(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["proz-profile-proz-profile-module"],{

/***/ "./node_modules/leaflet/dist/images/marker-shadow.png":
/*!************************************************************!*\
  !*** ./node_modules/leaflet/dist/images/marker-shadow.png ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "marker-shadow.png";

/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.11';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./src/app/proz-profile/my-proz-profile/my-proz-profile.component.html":
/*!*****************************************************************************!*\
  !*** ./src/app/proz-profile/my-proz-profile/my-proz-profile.component.html ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<app-commonvanlynkheader></app-commonvanlynkheader>\r\n<app-prozadmin-sidemenu></app-prozadmin-sidemenu>\r\n<!-- Page Content -->\r\n<div class=\"page-content\">\r\n  <!-- Page Breadcrumb -->\r\n  <div class=\"page-breadcrumbs\">\r\n    <ul class=\"breadcrumb\">\r\n      <li>\r\n        <i class=\"fa fa-home\"></i>\r\n        <a (click)=\"home()\">Home</a>\r\n      </li>\r\n      <li class=\"active\">My Profile Details</li>\r\n    </ul>\r\n  </div>\r\n  <!-- /Page Breadcrumb -->\r\n  <!-- Page Header -->\r\n  <div class=\"page-header position-relative\">\r\n    <div class=\"header-title\">\r\n      <h1>\r\n        My Profile Details\r\n      </h1>\r\n    </div>\r\n  </div>\r\n  <!-- /Page Header -->\r\n\r\n  <!-- Page Body -->\r\n  <div class=\"page-body\">\r\n    <br />\r\n    <!-- VIEW PROZ PROFILE DETAILS -->\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12 col-md-12 col-md-12 col-xs-12 \">\r\n        <div class=\"well with-header with-footer three-bordered \">\r\n          <div class=\"header gray\">\r\n            <span class=\"widget-caption\">My Profile Details</span>\r\n          </div>\r\n          <div id=\"registration-form\">\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-10\">\r\n                <div class=\"form-group\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-2\">\r\n                <div class=\"form-group\">\r\n                  <button type=\"button\" class=\"btn btn-block btn-gray\" (click)=\"editProfile()\"><i\r\n                      class=\"fa fa-pencil\"></i>Edit</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- COMPANY DETAILS -->\r\n            <div class=\"form-title\">\r\n              Company Details\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"companyName\"><b>Company Name</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"companyNameVal\" *ngIf=\"statusValue\">{{prozProfileData.companyName}} </label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"businessType\"><b>Business Type</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"businessType\" *ngIf=\"statusValue\">{{prozProfileData.bussinessType}} </label>\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"firstname\"><b>Contact Person First Name</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"firstname\" *ngIf=\"statusValue\">{{prozProfileData.firstName}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"lastname\"><b>Contact Person Last Name</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"lastname\" *ngIf=\"statusValue\">{{prozProfileData.lastName}}</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"emailID\"><b>E-Mail Address</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"emailID\" *ngIf=\"statusValue\">{{prozProfileData.businessEmail}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"mobileNumber\"><b>Business Phone Number</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"mobileNumber\" *ngIf=\"statusValue\">{{prozProfileData.businessPhone}}</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"businessAddressLine1\" *ngIf=\"statusValue\"><b>Business Address Line 1</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"businessAddressLine1\" *ngIf=\"statusValue\">{{prozProfileData.businessAddressLine1}}</label>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"mobileNumber\"><b>Send Lead Notification To This Phone Number</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"mobileNumber\" *ngIf=\"statusValue\">{{prozProfileData.smsMobile}}</label>\r\n                </div>\r\n              </div>\r\n\r\n\r\n\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <!-- <label for=\"businessAddressLine2\"><b>Business Address Line 2</b></label> -->\r\n                  <label for=\"city\"><b>City</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"city\" *ngIf=\"statusValue\">{{prozProfileData.city}}</label>\r\n                  <!-- <label for=\"businessAddressLine2\" *ngIf=\"statusValue\">{{prozProfileData.businessAddressLine2}}</label> -->\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <!-- <label for=\"suite\"><b>Suite</b></label> -->\r\n                  <label for=\"state\"><b>State</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <!-- <label for=\"suite\" *ngIf=\"statusValue\">{{prozProfileData.suite}}</label> -->\r\n                  <label for=\"state\" *ngIf=\"statusValue\">{{prozProfileData.state}}</label>\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"zipCode\"><b>Zip Code</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"zipCode\" *ngIf=\"statusValue\">{{prozProfileData.zipCode}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"website\"><b>Website</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"websiteVal\" *ngIf=\"statusValue\">{{prozProfileData.webMailId}} </label>\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"companyLogo\"><b>Company Logo</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <img *ngIf=\"statusValue\" [src]=\"prozProfileData.image\" alt=\"company_logo\" class=\"logo\" />\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"companyLogo\"><b>Pro-Profile Image</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <img *ngIf=\"statusValue\" [src]=\"prozProfileData.proProfileImage\" alt=\"profile_logo\" class=\"logo\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"businessHours\"><b>Business Hours</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-6\">\r\n                <div class=\"form-group\">\r\n                  <table class=\"table table-bordered table-hover\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>\r\n                          Day\r\n                        </th>\r\n                        <th>\r\n                          Status\r\n                        </th>\r\n                        <th>\r\n                          From Time\r\n                        </th>\r\n                        <th>\r\n                          To Time\r\n                        </th>\r\n\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr *ngFor=\"let data of dateTimeData\">\r\n                        <td>\r\n                          {{data.day}}\r\n                        </td>\r\n                        <!---Task #497: View Private Profile Screen, Business Hours, For Sunday,It should show the schedule selected but not as closed as default-->\r\n                        <td>\r\n                          {{data.status}}\r\n                        </td>\r\n                        <!---Task #497:View Private Profile Screen, Business Hours, For Sunday,It should show the schedule selected but not as closed as default-->\r\n                        <td *ngIf=\"data.fromTime\">\r\n                          {{data.fromTime}}\r\n                        </td>\r\n                        <td *ngIf=\"!data.fromTime\">\r\n                          <!-- {{data.fromTime}} -->\r\n                        </td>\r\n                        <!-- <td *ngIf=\"data.colorRed\">\r\n                          <p style=\"color: red;\">{{data.fromTime}}</p>\r\n                        </td> -->\r\n                        <td *ngIf=\"!data.toTime\">\r\n                          <!-- {{data.fromTime}} -->\r\n                        </td>\r\n                        <td *ngIf=\"data.toTime\">\r\n                          {{data.toTime}}\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- COMPANY DETAILS -->\r\n\r\n            <!-- SOCIAL MEDIA LINKS -->\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-12\">\r\n                <div class=\"form-group\">\r\n                  <hr class=\"hr-gray\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-title\">\r\n              Social Media Links\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"yelpAPI\"><b>Yelp Business ID</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-6\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"yelpAPI\" *ngIf=\"statusValue\">{{prozProfileData.yelpBusinessId}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"fbAPI\" *ngIf=\"statusValue\">{{prozProfileData.fbBusinessId}}</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"googleAPI\"><b>Google Business ID</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-9\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"googleAPI\" *ngIf=\"statusValue\">{{prozProfileData.googleBusinessId}}</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-12\">\r\n                <div class=\"form-group\">\r\n                  <label class=\"aggregateRating\" for=\"aggregateRating\">Rating From Yelp: <span\r\n                      *ngIf=\"statusValue\">{{prozProfileData.yelpRating}}</span></label><br>\r\n                  <label class=\"aggregateRating\" for=\"aggregateRating\">Rating From Google: <span\r\n                      *ngIf=\"statusValue\">{{prozProfileData.googleRating}}</span></label><br>\r\n                  <label class=\"aggregateRating\" for=\"aggregateRating\">Aggregate Rating From Yelp and Google:\r\n                    <span *ngIf=\"statusValue\">{{prozProfileData.aggregateRating}}</span></label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- /SOCIAL MEDIA LINKS -->\r\n\r\n            <!-- BUSINESS INFORMATION -->\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-12\">\r\n                <div class=\"form-group\">\r\n                  <hr class=\"hr-gray\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-title\">\r\n              Business Information\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"inBusinessSince\"><b>In Business Since</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"inBusinessSince\" *ngIf=\"statusValue\">{{prozProfileData.inBusinessSince}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"numberEmployees\" *ngIf=\"statusValue\"><b>No. of Employees in the company?</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"numberEmployees\" *ngIf=\"statusValue\">{{prozProfileData.numberOfEmployees}}</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"insured\"><b>Are you insured?</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"insured\" *ngIf=\"statusValue\">{{prozProfileData.areYouInsured}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"bonded\"><b>Are you Bonded?</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"bonded\" *ngIf=\"statusValue\">{{prozProfileData.areYouBonded}}</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"companyProfileDesc\" *ngIf=\"statusValue\"><b>Business Description</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"companyProfileDesc\"\r\n                    *ngIf=\"statusValue\">{{prozProfileData.companyProfileDescription}}</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- /BUSINESS INFORMATION -->\r\n\r\n            <!-- LICENSE DETAILS -->\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-12\">\r\n                <div class=\"form-group\">\r\n                  <hr class=\"hr-gray\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-title\">\r\n              License Details\r\n            </div>\r\n            <ng-container *ngIf=\"statusValue\">\r\n              <ng-container *ngFor=\"let data of prozProfileData.tradeLicenseList\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"stateRegistred\"><b>State Registered In?</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"stateRegistred\" *ngIf=\"statusValue\">{{data.stateRegisteredIn}}</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"tradeLicense1\" *ngIf=\"statusValue\"><b>Trade License</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"tradeLicense1\" *ngIf=\"statusValue\">{{data.name}}</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"tradeLicense1N\"><b>Trade License #</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"stateRegistred\" *ngIf=\"statusValue\">{{data.tradeLicenseNumber}}</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"tradeLicense1Exp\"><b>Trade License Expiration</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"tradeLicense1\" *ngIf=\"statusValue\">{{data.tradeLicenseExpiration}}</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <br>\r\n                <br>\r\n              </ng-container>\r\n            </ng-container>\r\n            <!-- /LICENSE DETAILS -->\r\n\r\n            <!-- AREAS OF EXPERTISE -->\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-12\">\r\n                <hr class=\"hr-gray\">\r\n              </div>\r\n            </div>\r\n            <div class=\"form-title\">\r\n              Areas of Expertise\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"warrantyoffered\"><b>Warranty Offered?</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"warrantyoffered\" *ngIf=\"statusValue\">{{prozProfileData.warrantyOffered}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"ccAccepted\"><b>Credit Card Accepted?</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"ccAccepted\" *ngIf=\"statusValue\">{{prozProfileData.creditCardAccepted}}</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"freeEstimates\"><b>Free Estimates</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"freeEstimates\" *ngIf=\"statusValue\">{{prozProfileData.freeEstimated}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"areasofexpertise\"><b>Areas of Expertise</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"areasofexpertise\" *ngIf=\"areaStatus\">{{this.areaExpertiseList}}</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"additionalInfo\"><b>Additional Info</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-9\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"additionalInfo\" *ngIf=\"statusValue\">{{prozProfileData.additionalInfo}}</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- /AREAS OF EXPERTISE -->\r\n\r\n            <!-- SERVICE AREA DETAILS  -->\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-12\">\r\n                <div class=\"form-group\">\r\n                  <hr class=\"hr-gray\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-title\">\r\n              Service Area Details\r\n            </div>\r\n            <!---Map-->\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-12\" *ngIf=\"showMap\">\r\n                <!-- <div id=\"google_map\"></div> -->\r\n                <div class=\"map\" id=\"leafletmap\" leaflet (leafletMapReady)=\"onMapReady($event,'na')\"\r\n                  [leafletOptions]=\"options\" [leafletLayersControl]=\"layersControl\"></div>\r\n              </div>\r\n            </div>\r\n            <br>\r\n            <!---Map-->\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-4\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"nameofbusiness\"><b>Subscription Type:</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-4\" *ngIf=\"monthlyStatus\">\r\n                <span class=\"text\"> Monthly</span>\r\n              </div>\r\n              <div class=\"col-sm-4\" *ngIf=\"perLeadStatus\">\r\n                <span class=\"text\"> Per Lead</span>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- <div class=\"row\" *ngIf=\"monthlyStatus\">\r\n              <div class=\"col-xs-12 col-md-12\">\r\n                <div class=\"widget-body\">\r\n                  <div class=\"flip-scroll\">\r\n                    <table class=\"table table-bordered table-striped table-condensed flip-content\">\r\n                      <thead class=\"flip-content bordered-palegreen\">\r\n                        <tr>\r\n                          <th>\r\n                            County\r\n                          </th>\r\n                          <th>\r\n                            Households\r\n                          </th>\r\n                          <th>\r\n                            Category\r\n                          </th>\r\n                          <th>\r\n                            Sub Category\r\n                          </th>\r\n                          <th>\r\n                            Monthly Subscription Fee\r\n                          </th>\r\n                          <th>\r\n                            Total\r\n                          </th>\r\n                        </tr>\r\n                      </thead>\r\n                      <ng-container>\r\n                        <tbody>\r\n                          <ng-container *ngFor=\"let data of countyList\">\r\n                            <tr>\r\n                              <td><a data-toggle=\"modal\" data-target=\".bs-example-modal-lg\"\r\n                                  (click)=\"getZipcodesFromCounty(data)\">{{data.county}}</a>\r\n                              </td>\r\n                              <td>{{data.households}}</td>\r\n                              <td>\r\n                                <table>\r\n                                  <tr *ngFor=\"let categoryData of data.categories\">\r\n                                    <td>\r\n                                      <div style=\"overflow:auto;width:100%;height:100px\">\r\n                                        <div>\r\n                                          <div style=\"float:left;width:60%;\">\r\n                                            <span class=\"text\">{{categoryData.categoryName}}</span>\r\n                                          </div>\r\n                                          <div style=\"float:right;width:40%;\">\r\n                                            <span>&nbsp;</span>\r\n                                          </div>\r\n                                        </div>\r\n                                      </div>\r\n                                    </td>\r\n                                  </tr>\r\n                                </table>\r\n                              </td>\r\n                              <td colspan=\"2\">\r\n                                <table>\r\n                                  <ng-container *ngFor=\"let categoryData of data.categories\">\r\n                                    <ng-container>\r\n                                      <tr>\r\n                                        <td>\r\n                                          <div style=\"overflow:auto;width:100%;height:100px;\">\r\n                                            <div>\r\n                                              <ng-container *ngFor=\"let categoryDataSub of data.subcategories\">\r\n                                                <ng-container\r\n                                                  *ngIf=\"categoryDataSub.categoryCode == categoryData.categoryCode\">\r\n                                                  <div style=\"float:left;width:60%;\">\r\n                                                    <span class=\"text\">{{categoryDataSub.subcategoryName}}</span>\r\n                                                  </div>\r\n                                                  <div style=\"float:right;width:40%;\">\r\n                                                    <span>$&nbsp;{{categoryDataSub.monthly}}</span>\r\n                                                  </div>\r\n                                                </ng-container>\r\n                                              </ng-container>\r\n                                            </div>\r\n                                          </div>\r\n                                        </td>\r\n                                      </tr>\r\n                                    </ng-container>\r\n                                  </ng-container>\r\n                                </table>\r\n                              </td>\r\n                              <td>\r\n                                $ {{data.totalEstimatedCost}}\r\n                              </td>\r\n                            </tr>\r\n                          </ng-container>\r\n                        </tbody>\r\n                      </ng-container>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div> -->\r\n\r\n            <div class=\"row\" *ngIf=\"perLeadStatus\">\r\n              <div class=\"col-xs-12 col-md-12\">\r\n                <div class=\"widget-body\">\r\n                  <div class=\"flip-scroll\">\r\n                    <table class=\"table table-bordered table-striped table-condensed flip-content\">\r\n                      <thead class=\"flip-content bordered-palegreen\">\r\n                        <tr>\r\n                          <th style=\"width: 15%;\">\r\n                            County\r\n                          </th>\r\n                          <th style=\"width: 10%;\">\r\n                            State\r\n                          </th>\r\n                          <th style=\"width: 15%;\">\r\n                            Category\r\n                          </th>\r\n                          <th style=\"width: 45%;\">\r\n                            Sub Category\r\n                          </th>\r\n                          <th style=\"width: 15%;\">\r\n                            Per Lead Fee\r\n                          </th>\r\n                        </tr>\r\n                      </thead>\r\n                      <ng-container>\r\n\r\n                        <tbody>\r\n                          <ng-container *ngFor=\"let data of countyList\">\r\n                            <tr style=\"border-bottom: 2px solid black;\">\r\n                              <td style=\"width:15%\"><a data-toggle=\"modal\" data-target=\".bs-example-modal-lg\"\r\n                                  (click)=\"getZipcodesFromCounty(data,data.stateCode,'view')\">{{data.county}}</a>\r\n                              </td>\r\n                              <td style=\"width: 10%;\">{{data.state}}</td>\r\n                              <td style=\"width:15%\">\r\n                                <table>\r\n                                  <tr *ngFor=\"let categoryData of data.categories \"\r\n                                    style=\"border-bottom: 1px solid black;\">\r\n                                    <td>\r\n                                      <div style=\"overflow:auto;width:100%;height:110px\">\r\n                                        <div>\r\n                                          <div style=\"float:left;width:60%;\">\r\n                                            <span class=\"text\">{{categoryData.categoryName}}</span>\r\n                                          </div>\r\n                                          <div style=\"float:right;width:40%;\">\r\n                                            <span>&nbsp;</span>\r\n                                          </div>\r\n                                        </div>\r\n                                      </div>\r\n                                    </td>\r\n                                  </tr>\r\n                                </table>\r\n                              </td>\r\n                              <td colspan=\"2\" style=\"width: 60%;\">\r\n                                <table>\r\n                                  <ng-container *ngFor=\"let categoryData of data.categories\">\r\n                                    <ng-container>\r\n                                      <tr>\r\n                                        <td>\r\n                                          <div\r\n                                            style=\"overflow:auto;width:100%;height:112px; border-bottom: 1px solid black;\">\r\n                                            <div>\r\n                                              <ng-container *ngFor=\"let categoryDataSub of data.subcategories\">\r\n                                                <ng-container\r\n                                                  *ngIf=\"categoryDataSub.categoryCode == categoryData.categoryCode\">\r\n                                                  <div style=\"float:left;width:80%;\">\r\n                                                    <span class=\"text\">{{categoryDataSub.subcategoryName}}</span>\r\n                                                  </div>\r\n                                                  <div style=\"float:right;width:20%;\">\r\n                                                    <span>$&nbsp;{{categoryDataSub.perLead}}</span>\r\n                                                  </div>\r\n                                                </ng-container>\r\n                                              </ng-container>\r\n                                            </div>\r\n                                          </div>\r\n                                        </td>\r\n                                      </tr>\r\n                                    </ng-container>\r\n                                  </ng-container>\r\n                                </table>\r\n                              </td>\r\n                            </tr>\r\n                          </ng-container>\r\n                        </tbody>\r\n                      </ng-container>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n\r\n            <!-- <br> -->\r\n            <!-- <div class=\"row\">\r\n              <div class=\"col-sm-2\">\r\n                <div class=\"form-group\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-2\">\r\n                <div class=\"form-group\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-1\">\r\n                <div class=\"form-group\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-2\">\r\n                <div class=\"form-group\">\r\n                  <input type=\"button\" class=\"btn btn-success shiny btn-block\" value=\"Edit\" (click)=\"editProfile()\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-2\">\r\n                <div class=\"form-group\">\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-sm-2\">\r\n                <div class=\"form-group\">\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-sm-1\">\r\n                <div class=\"form-group\">\r\n                </div>\r\n              </div>\r\n\r\n            </div> -->\r\n\r\n            <!-- SERVICE OFFERED -->\r\n            <!-- <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <hr class=\"hr-gray\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                <div class=\"form-title\">\r\n                  Service Offered\r\n                </div>\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"subscriptionType\"><b>Subscription Type</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"subscriptionType\">{{prozServiceData.paymentType}}</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"subscribedOn\"><b>Subscribed On</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"subscribedOn\">15-Dec-2018</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"subscriptionExpiry\"><b>Subscription Expiry</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"subscriptionExpiry\">15-Jan-2019</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"categories\"><b>Categories</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"categories\">{{prozServiceData.serviceOffered}}</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"subCategories\"><b>Sub Categories</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"subCategories\">{{prozServiceData.subServices}}</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"cost\"><b>Cost</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"cost\">{{prozServiceData.serviceCost}}</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-6\">\r\n                    <div class=\"form-group\">\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-4\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"zipCode\" class=\"big-text\">Total Service Cost</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"zipCode\" class=\"big-text\">{{prozServiceData.serviceCost}}</label>\r\n                    </div>\r\n                  </div>\r\n                </div> -->\r\n            <!-- /SERVICE OFFERED -->\r\n\r\n            <!-- PAYMENT INFO -->\r\n            <!-- <div class=\"row\">\r\n              <div class=\"col-sm-12\">\r\n                <div class=\"form-group\">\r\n                  <hr class=\"hr-gray\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-title\">\r\n              Payment Info\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"paymentType\"><b>Credit Card Type</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"paymentType\" *ngIf=\"statusValue\">{{prozPaymentData.creditCardType}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"emailID\"><b>Credit Card Number</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"emailID\" *ngIf=\"statusValue\">{{prozPaymentData.creditCardNumber}}</label>\r\n                </div>\r\n              </div>\r\n            </div> -->\r\n\r\n            <!-- CREDIT/DEBIT CARD -->\r\n            <!-- <div class=\"row\">\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"emailID\"><b>Email ID</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"emailID\">{{prozPaymentData.emailId}}</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"cardNumber\"><b>Card Number</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"cardNumber\">{{prozPaymentData.cardNumber}}</label>\r\n                    </div>\r\n                  </div>\r\n                </div> -->\r\n            <!-- <div class=\"row\">\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"expiry\"><b>Expiry</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"expiry\">{{prozPaymentData.expiryOn}}</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"cvc\"><b>CVC</b></label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"cvc\">{{prozPaymentData.cvcCode}}</label>\r\n                    </div>\r\n                  </div>\r\n                </div> -->\r\n            <!-- /CREDIT/DEBIT CARD -->\r\n\r\n            <!-- CHECKING/SAVINGS ACCOUNT -->\r\n            <!-- <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"accountNumber\"><b>CVV Number</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"accountNumber\" *ngIf=\"statusValue\">{{prozPaymentData.ccvNumber}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"routingNumber\"><b>Expiry On</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"routingNumber\" *ngIf=\"statusValue\">{{prozPaymentData.expiryOn}}</label>\r\n                </div>\r\n              </div>\r\n            </div> -->\r\n            <!-- /CHECKING/SAVINGS ACCOUNT -->\r\n\r\n            <!-- PAYPAL -->\r\n            <!-- <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"payPalUserID\"><b>Business Address Line1</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"routingNumber\" *ngIf=\"statusValue\">{{prozPaymentData.businessAddressLine1}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"payPalUserID\"><b>State</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"routingNumber\" *ngIf=\"statusValue\">{{prozPaymentData.state}}</label>\r\n                </div>\r\n              </div>\r\n            </div> -->\r\n            <!-- /PAYPAL -->\r\n            <!-- <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"payPalUserID\"><b>City</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"routingNumber\" *ngIf=\"statusValue\">{{prozPaymentData.city}}</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"payPalUserID\"><b>Zipcode</b></label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"routingNumber\" *ngIf=\"statusValue\">{{prozPaymentData.zipCode}}</label>\r\n                </div>\r\n              </div>\r\n            </div> -->\r\n\r\n            <!-- /PAYMENT INFO -->\r\n\r\n            <!-- AGREE TERMS & CONDITIONS -->\r\n            <br/>\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-12\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"agreeTNC\"><b>Note<span class=\"mandatory\">*</span>:</b> Yes, I agree TopProz <a\r\n                      (click)=\"gotoTerms()\">Terms\r\n                      &amp; Conditions.</a></label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- /AGREE TERMS & CONDITIONS -->\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-12\">\r\n                <div class=\"form-group\">\r\n                  <hr class=\"hr-gray\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <button type=\"button\" class=\"btn btn-block btn-gray\" (click)=\"editProfile()\">\r\n                    <i class=\"fa fa-pencil\"></i>Edit</button>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <button type=\"button\" class=\"btn btn-block btn-blue\" (click)=\"okButton()\">\r\n                    <i class=\"fa fa-check\"></i>OK</button>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <!-- <input type=\"button\" class=\"btn btn-success shiny btn-block\" value=\"Edit\" (click)=\"okButton()\"> -->\r\n                </div>\r\n              </div>\r\n              <!-- This ok, edit button show in My Profile for Proz -->\r\n              <!-- <div class=\"col-sm-2\">\r\n                            <div class=\"form-group\">\r\n                                <input type=\"button\" class=\"btn btn-success shiny btn-block\" value=\"OK\" (click)=\"okButton()\">\r\n                            </div>\r\n                          </div>\r\n                        <div class=\"col-sm-2\">\r\n                            <div class=\"form-group\">\r\n                                <input type=\"button\" class=\"btn btn-primary shiny btn-block\" value=\"EDIT\" (click)=\"editButton()\">\r\n                            </div>\r\n                          </div> -->\r\n              <!-- /This ok, edit button show in My Profile for Proz -->\r\n              <div class=\"col-sm-2\">\r\n                <div class=\"form-group\">\r\n                </div>\r\n              </div>\r\n            </div><br />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- /VIEW PROZ PROFILE DETAILS -->\r\n  </div>\r\n  <!-- /Page Body -->\r\n</div>\r\n<!-- /Page Content -->\r\n\r\n<div class=\"modal fade bs-example-modal-lg\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n  aria-hidden=\"true\" style=\"display: none;\">\r\n  <div class=\"modal-dialog modal-lg\">\r\n    <div class=\"modal-content\">\r\n\r\n      <div class=\"modal-header\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\r\n        <h4 class=\"modal-title\" id=\"myLargeModalLabel\">Zipcodes</h4>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div style=\"overflow:auto;width:100%\">\r\n          <table class=\"table table-bordered table-striped table-condensed flip-content\">\r\n            <thead class=\"flip-content bordered-palegreen\">\r\n              <tr>\r\n                <th>\r\n                  Zipcode\r\n                </th>\r\n                <th>\r\n                  County\r\n                </th>\r\n                <th>\r\n                  City\r\n                </th>\r\n                <!-- <th>\r\n                  Households\r\n                </th> -->\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr *ngFor=\"let data of displayZipcodes\">\r\n                <td>{{data.zipcode}}</td>\r\n                <td>{{data.county}}</td>\r\n                <td>{{data.city}}</td>\r\n                <!-- <td>{{data.households}}</td> -->\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div><!-- /.modal-content -->\r\n  </div><!-- /.modal-dialog -->\r\n</div>\r\n\r\n\r\n<div style=\"width:100%\" class=\"modal fade bs-example-modal-sm\" tabindex=\"-1\" role=\"dialog\"\r\n  aria-labelledby=\"myLargeModalLabelTrade\" aria-hidden=\"true\" style=\"display: none;\">\r\n  <div class=\"modal-dialog modal-lg\">\r\n    <div class=\"modal-content\">\r\n\r\n      <div class=\"modal-header\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\r\n        <h4 class=\"modal-title\" id=\"myLargeModalLabelTrade\">Trade License Details</h4>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div style=\"overflow:auto;width:100%;height:400px;\">\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <form [formGroup]=\"addTradeLicenseList\">\r\n                <ng-container formArrayName=\"tradeLicense\">\r\n                  <div id=\"field\" *ngFor=\"let item of addTradeLicenseList.get('tradeLicense').controls; let i = index;\"\r\n                    [formGroupName]=\"i\">\r\n                    <div id=\"field0\">\r\n                      <div class=\"row\">\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"stateRegistred\">State Registered In?<span class=\"mandatory\">*</span></label>\r\n                            <select class=\"form-control\" id=\"stateRegistred\" name=\"status\" data-bv-field=\"row-title\"\r\n                              formControlName=\"stateRegisteredIn\" (change)=\"checkValidationTrade()\">\r\n                              <option value=\"\">Select</option>\r\n                              <option *ngFor=\"let data of statesData\" value={{data.stateName}}>\r\n                                {{data.stateName}}\r\n                              </option>\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"tradeLicense1\">Trade License Category<span class=\"mandatory\">*</span></label>\r\n                            <select class=\"form-control\" id=\"tradeLicense1\" name=\"status\" data-bv-field=\"row-title\"\r\n                              formControlName=\"tradeLicense\" (change)=\"checkValidationTrade()\">\r\n                              <option value=\"\">Select</option>\r\n                              <option *ngFor=\"let data of categoriesData\" value={{data.cat_code}}>\r\n                                {{data.categoryName}}\r\n                              </option>\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-2\">\r\n                          <div class=\"form-group\">\r\n                            <span class=\"input-icon icon-right\" style=\"margin-top:28px;\">\r\n                              <a (click)=\"deleteFieldValue(i)\" class=\"btn btn-danger btn-sm shiny\">\r\n                                <i class=\"fa fa-trash-o\"></i>\r\n                              </a>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"row\">\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"tradeLicense1N\">Trade License #<span class=\"mandatory\">*</span> </label>\r\n                            <span class=\"input-icon icon-right\">\r\n                              <input type=\"text\" class=\"form-control\" id=\"tradeLicense1N\"\r\n                                placeholder=\"Enter Trade License #\" formControlName=\"tradeLicenseNumber\"\r\n                                (change)=\"checkValidationTrade()\">\r\n                              <i class=\"fa fa-file\"></i>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"tradeLicense1Exp\">Trade License Expiration<span\r\n                                class=\"mandatory\">*</span></label>\r\n                            <span class=\"input-icon icon-right\">\r\n                              <input type=\"date\" class=\"form-control\" id=\"tradeLicense1Exp\" placeholder=\"DD/MM/YYYY\"\r\n                                formControlName=\"tradeLicenseExpiration\" (change)=\"checkValidationTrade()\">\r\n                              <i class=\"fa fa-calendar\"></i>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-2\">\r\n\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <div class=\"col-sm-12\">\r\n                        <hr class=\"hr-gray\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </ng-container>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <input type=\"button\" [disabled]=\"tradeStatusCheck\" class=\"btn btn-azure shiny btn-block\"\r\n                value=\"+ Add Another Trade License\" id=\"add-more\" (click)=\"addFieldValue()\">\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <input type=\"button\" [disabled]=\"tradeStatusCheck\" class=\"btn btn-azure shiny btn-block\" value=\"+Submit\"\r\n                id=\"add-more\" data-dismiss=\"modal\" (click)=\"addTradeLicense()\">\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div><!-- /.modal-content -->\r\n  </div><!-- /.modal-dialog -->\r\n</div>"

/***/ }),

/***/ "./src/app/proz-profile/my-proz-profile/my-proz-profile.component.scss":
/*!*****************************************************************************!*\
  !*** ./src/app/proz-profile/my-proz-profile/my-proz-profile.component.scss ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".logo {\n  width: 100px;\n  height: 100px; }\n\n.hr-blue {\n  border-top: 1px solid #5DB2FF !important; }\n\n.form-title {\n  display: block;\n  padding: 8px 0;\n  border-bottom: 1px dashed #5DB2FF;\n  font-size: 15px;\n  font-weight: bold;\n  color: #5DB2FF;\n  margin-bottom: 15px; }\n\n.aggregateRating {\n  color: #bc5679;\n  font-size: 14px !important;\n  font-weight: bold !important; }\n\n.aggregateRating span {\n  color: green;\n  font-size: 14px !important;\n  font-weight: bold !important; }\n\n.big-text {\n  font-size: 16px;\n  font-weight: bold;\n  text-align: left !important; }\n\nlabel .mandatory {\n  color: red;\n  font-size: 16px !important;\n  font-weight: bold !important; }\n\n#google_map {\n  width: 100%;\n  height: 400px; }\n\n.three-bordered {\n  border-left: 1px solid #333;\n  border-right: 1px solid #333;\n  border-bottom: 1px solid #333;\n  /* border-left: 3px solid #7e3794;*/ }\n\n.hr-gray-thick {\n  border-top: 3px solid #333 !important; }\n\n.hr-gray {\n  border-top: 1px solid #333 !important; }\n\ninput {\n  color: black; }\n\n.gray {\n  background-color: #333 !important;\n  color: #5db2ff !important; }\n\n.btn-gray {\n  background-color: #333 !important;\n  color: #5db2ff !important; }\n\n.btn-blue {\n  color: #333 !important;\n  background-color: #5db2ff !important; }\n\n.button-center {\n  text-align: center; }\n\n.map {\n  width: 100%;\n  height: 400px; }\n\na {\n  cursor: pointer; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcHJvei1wcm9maWxlL215LXByb3otcHJvZmlsZS9EOlxcVG9wcHJvelxcVG9wUHJvel9BZHZhbmNlX0NsaWVudC9zcmNcXGFwcFxccHJvei1wcm9maWxlXFxteS1wcm96LXByb2ZpbGVcXG15LXByb3otcHJvZmlsZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQVk7RUFDWixjQUFhLEVBQ2hCOztBQUVEO0VBQ0kseUNBQXdDLEVBQzNDOztBQUVEO0VBQ0ksZUFBYztFQUNkLGVBQWM7RUFDZCxrQ0FBaUM7RUFDakMsZ0JBQWU7RUFDZixrQkFBaUI7RUFDakIsZUFBYztFQUNkLG9CQUFtQixFQUN0Qjs7QUFFRDtFQUNJLGVBQWE7RUFDYiwyQkFBMEI7RUFDMUIsNkJBQTRCLEVBQy9COztBQUVEO0VBQ0ksYUFBWTtFQUNaLDJCQUEwQjtFQUMxQiw2QkFBNEIsRUFDL0I7O0FBSUQ7RUFDSSxnQkFBZTtFQUNmLGtCQUFpQjtFQUNqQiw0QkFBMkIsRUFDOUI7O0FBR0Q7RUFDSSxXQUFTO0VBQ1QsMkJBQTBCO0VBQzFCLDZCQUE0QixFQUMvQjs7QUFFRDtFQUFjLFlBQVc7RUFBRSxjQUFhLEVBQUk7O0FBRzVDO0VBQ0ksNEJBQTJCO0VBQzNCLDZCQUE0QjtFQUM1Qiw4QkFBNkI7RUFDOUIsb0NBQW9DLEVBQ3RDOztBQUVEO0VBQ0ksc0NBQXFDLEVBQ3hDOztBQUVEO0VBQ0ksc0NBQXFDLEVBRXhDOztBQUVEO0VBQ0ksYUFBWSxFQUNmOztBQUVEO0VBQ0ksa0NBQWlDO0VBQ2pDLDBCQUF5QixFQUM1Qjs7QUFFRDtFQUNJLGtDQUFpQztFQUNqQywwQkFBeUIsRUFDNUI7O0FBRUQ7RUFDSSx1QkFBc0I7RUFDdEIscUNBQW9DLEVBQ3ZDOztBQUVEO0VBQ0ksbUJBQWtCLEVBQ2pCOztBQUNEO0VBQU8sWUFBVztFQUFFLGNBQWEsRUFBSTs7QUFDckM7RUFBSyxnQkFBZSxFQUFJIiwiZmlsZSI6InNyYy9hcHAvcHJvei1wcm9maWxlL215LXByb3otcHJvZmlsZS9teS1wcm96LXByb2ZpbGUuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubG9nb3tcclxuICAgIHdpZHRoOiAxMDBweDtcclxuICAgIGhlaWdodDogMTAwcHg7XHJcbn1cclxuXHJcbi5oci1ibHVleyAgICBcclxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjNURCMkZGICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5mb3JtLXRpdGxlIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgcGFkZGluZzogOHB4IDA7XHJcbiAgICBib3JkZXItYm90dG9tOiAxcHggZGFzaGVkICM1REIyRkY7XHJcbiAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGNvbG9yOiAjNURCMkZGO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDtcclxufVxyXG5cclxuLmFnZ3JlZ2F0ZVJhdGluZ3tcclxuICAgIGNvbG9yOiNiYzU2Nzk7IFxyXG4gICAgZm9udC1zaXplOiAxNHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXdlaWdodDogYm9sZCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4uYWdncmVnYXRlUmF0aW5nIHNwYW57XHJcbiAgICBjb2xvcjogZ3JlZW47XHJcbiAgICBmb250LXNpemU6IDE0cHggIWltcG9ydGFudDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcblxyXG5cclxuLmJpZy10ZXh0e1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7ICBcclxuICAgIHRleHQtYWxpZ246IGxlZnQgIWltcG9ydGFudDsgIFxyXG59XHJcblxyXG5cclxubGFiZWwgLm1hbmRhdG9yeXtcclxuICAgIGNvbG9yOnJlZDtcclxuICAgIGZvbnQtc2l6ZTogMTZweCAhaW1wb3J0YW50O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQgIWltcG9ydGFudDtcclxufVxyXG5cclxuI2dvb2dsZV9tYXAgeyB3aWR0aDogMTAwJTsgaGVpZ2h0OiA0MDBweDsgfVxyXG5cclxuXHJcbi50aHJlZS1ib3JkZXJlZHtcclxuICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgIzMzMztcclxuICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICMzMzM7XHJcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzMzMztcclxuICAgLyogYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAjN2UzNzk0OyovXHJcbn1cclxuXHJcbi5oci1ncmF5LXRoaWNreyAgICBcclxuICAgIGJvcmRlci10b3A6IDNweCBzb2xpZCAjMzMzICFpbXBvcnRhbnQ7XHJcbn0gXHJcblxyXG4uaHItZ3JheXsgICAgXHJcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgIzMzMyAhaW1wb3J0YW50O1xyXG4gICAgLy8gYm9yZGVyLXRvcDogMXB4IHNvbGlkICM3ZTM3OTQgIWltcG9ydGFudDtcclxufSBcclxuXHJcbmlucHV0e1xyXG4gICAgY29sb3I6IGJsYWNrO1xyXG59XHJcblxyXG4uZ3JheXsgICAgXHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzICFpbXBvcnRhbnQ7XHJcbiAgICBjb2xvcjogIzVkYjJmZiAhaW1wb3J0YW50O1xyXG59XHJcbiBcclxuLmJ0bi1ncmF5e1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMyAhaW1wb3J0YW50O1xyXG4gICAgY29sb3I6ICM1ZGIyZmYgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmJ0bi1ibHVleyAgICBcclxuICAgIGNvbG9yOiAjMzMzICFpbXBvcnRhbnQ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNWRiMmZmICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5idXR0b24tY2VudGVye1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgfVxyXG4gICAgLm1hcCB7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDQwMHB4OyB9XHJcbiAgICBhICB7IGN1cnNvcjogcG9pbnRlcjsgfSJdfQ== */"

/***/ }),

/***/ "./src/app/proz-profile/my-proz-profile/my-proz-profile.component.ts":
/*!***************************************************************************!*\
  !*** ./src/app/proz-profile/my-proz-profile/my-proz-profile.component.ts ***!
  \***************************************************************************/
/*! exports provided: MyProzProfileComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MyProzProfileComponent", function() { return MyProzProfileComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _utilities_beyond__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utilities/beyond */ "./src/utilities/beyond.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm5/ngx-toastr.js");
/* harmony import */ var _global_global__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../global/global */ "./src/global/global.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! leaflet */ "./node_modules/leaflet/dist/leaflet-src.js");
/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var ngx_spinner__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ngx-spinner */ "./node_modules/ngx-spinner/fesm5/ngx-spinner.js");












var MyProzProfileComponent = /** @class */ (function () {
    function MyProzProfileComponent(beyond, router, http, HttP, activatedRoute, toastr, formBuilder, spinner) {
        this.beyond = beyond;
        this.router = router;
        this.http = http;
        this.HttP = HttP;
        this.activatedRoute = activatedRoute;
        this.toastr = toastr;
        this.formBuilder = formBuilder;
        this.spinner = spinner;
        this.statusValue = false;
        this.perLeadStatus = true;
        this.estimatedServiceCost = 0;
        this.totalHouseHolds = 0;
        this.totalServiceCost = 0;
        this.latitude = 51.673858;
        this.longitude = 7.815982;
        this.zipcodes = [];
        this.subCategoriesList = [];
        this.prozLocationFetch = [];
        this.countyList = [];
        this.serviceCostTotal = 0;
        this.totalCostSubscription = 0;
        this.totalNumberOfHouses = 0;
        this.counties = [];
        this.countyZipcode = [];
        this.countyCategory = [];
        this.countySubCategory = [];
        this.categoriesData = [];
        this.monthlyStatus = false;
        this.tradeStatusCheck = false;
        this.areaStatus = false;
        this.displayZipcodes = [];
        this.countyStore = [];
        this.areaExpertiseList = [];
        this.countyStatus = false;
        this.showMap = false;
        this.statesData = [];
        this.imagePreview = "assets/img/proz/company_default.jpg";
        this.streetMaps = Object(leaflet__WEBPACK_IMPORTED_MODULE_9__["tileLayer"])('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            detectRetina: true,
        });
        this.wMaps = Object(leaflet__WEBPACK_IMPORTED_MODULE_9__["tileLayer"])('http://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png', {
            detectRetina: true,
        });
        this.options = {
            layers: [this.streetMaps],
            zoom: 7,
            center: Object(leaflet__WEBPACK_IMPORTED_MODULE_9__["latLng"])([46.879966, -121.726909])
        };
    }
    MyProzProfileComponent.prototype.ngOnInit = function () {
        this.spinner.show();
        this.beyond.beyondAdmin();
        this.loginData = JSON.parse(localStorage.getItem("login"));
        this.prozId = this.activatedRoute.snapshot.params['prozId'];
        this.getListOfStates();
        this.getMasterDateTime();
        this.getListOfCategories();
        this.prozLocation(this.activatedRoute.snapshot.params['prozId']);
        this.categoryProz(this.activatedRoute.snapshot.params['prozId']);
        this.addTradeLicenseList = this.formBuilder.group({
            tradeLicense: this.formBuilder.array([])
        });
    };
    MyProzProfileComponent.prototype.ngAfterViewInit = function () {
        document.body.scrollTop = document.documentElement.scrollTop = 0;
    };
    //TRADE LICENSE GENERATION
    MyProzProfileComponent.prototype.createTradeLicense = function (prozProfileData) {
        return this.formBuilder.group({
            stateRegisteredIn: [prozProfileData.stateRegisteredIn, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            tradeLicense: [prozProfileData.tradeLicense, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            tradeLicenseNumber: [prozProfileData.tradeLicenseNumber, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            tradeLicenseExpiration: [prozProfileData.tradeLicenseExpiration, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required]
        });
    };
    MyProzProfileComponent.prototype.addFieldValue = function () {
        this.items = this.addTradeLicenseList.get('tradeLicense');
        this.items.push(this.createTradeLicense(''));
        this.checkValidationTrade();
    };
    Object.defineProperty(MyProzProfileComponent.prototype, "tradeLicenseValues", {
        get: function () {
            return this.addTradeLicenseList.get('tradeLicense');
        },
        enumerable: true,
        configurable: true
    });
    MyProzProfileComponent.prototype.deleteFieldValue = function (index) {
        this.tradeLicenseValues.removeAt(index);
        this.checkValidationTrade();
    };
    //VIEW PROZ DETAILS
    MyProzProfileComponent.prototype.viewProzDetails = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getProDetails/' + this.prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                //this.spinner.hide()
                _this.estimatedServiceCost = 0;
                _this.totalHouseHolds = 0;
                _this.prozProfileData = response.profile[0];
                if (_this.prozProfileData.image == 'assets/img/proz/company_default.jpg') {
                    _this.prozProfileData.image = _this.prozProfileData.image;
                }
                else {
                    _this.prozProfileData.image = _global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + _this.prozProfileData.image;
                }
                if (_this.prozProfileData.proProfileImage == 'assets/img/default person.jpg') {
                    _this.prozProfileData.proProfileImage = _this.prozProfileData.proProfileImage;
                }
                else {
                    _this.prozProfileData.proProfileImage = _global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + _this.prozProfileData.proProfileImage;
                }
                _this.prozServiceData = response.serviceAreas;
                _this.prozPaymentData = response.payment[0];
                //console.log("prozPaymentData"+JSON.stringify(this.prozPaymentData))
                _this.prozProfileData.tradeLicenseList = [];
                _this.subCategoryProz(_this.prozProfileData.tradeLicense);
                _this.prozProfileData.stateRegisteredIn.split(',').forEach(function (e, i) {
                    var tradeDetailsObj = {
                        stateRegisteredIn: _this.prozProfileData.stateRegisteredIn.split(',')[i],
                        tradeLicense: _this.prozProfileData.tradeLicense.split(',')[i],
                        tradeLicenseNumber: _this.prozProfileData.tradeLicenseNumber.split(',')[i],
                        tradeLicenseExpiration: _this.prozProfileData.tradeLicenseExpiration.split(',')[i],
                    };
                    _this.prozProfileData.tradeLicenseList.push(tradeDetailsObj);
                    //console.log(this.prozProfileData.tradeLicenseList)
                    if (i === _this.prozProfileData.stateRegisteredIn.split(',').length - 1) {
                        _this.prozProfileData.tradeLicenseList.forEach(function (e) {
                            _this.categoriesData.forEach(function (f, j) {
                                if (e.tradeLicense == f.cat_code) {
                                    e.name = f.categoryName;
                                }
                            });
                            _this.items = _this.addTradeLicenseList.get('tradeLicense');
                            _this.items.push(_this.createTradeLicense(e));
                        });
                    }
                });
                _this.statusValue = true;
                for (var i = 0; i < response.serviceAreas.length; i++) {
                    _this.estimatedServiceCost = parseInt(_this.estimatedServiceCost) + parseInt(response.serviceAreas[i].serviceCost);
                    _this.totalHouseHolds = parseInt(_this.totalHouseHolds) + parseInt(response.serviceAreas[i].households);
                    _this.zipcodes.push(response.serviceAreas[i].zipcode);
                }
            }
        }, function (error) {
            _this.toastr.warning('Unable to Connect to Server');
        });
    };
    //VIEW PROZ DETAILS
    //GOOGLE MAP INITIALISATION
    MyProzProfileComponent.prototype.initializeZipMap = function (prozLocationFetch) {
        this.infoWindowSet = new google.maps.InfoWindow();
        var isMobile = (navigator.userAgent.toLowerCase().indexOf('android') > -1) ||
            (navigator.userAgent.match(/(iPod|iPhone|iPad|BlackBerry|Windows Phone|iemobile)/));
        if (isMobile) {
            var viewport = document.querySelector("meta[name=viewport]");
            viewport.setAttribute('content', 'initial-scale=1.0, user-scalable=no');
        }
        // var mapDiv = document.getElementById('google_map');
        // mapDiv.style.width = isMobile ? '100%' : '100%';
        // mapDiv.style.height = isMobile ? '100%' : '400px';
        // this.mapSet = new google.maps.Map(mapDiv, {
        //   center: new google.maps.LatLng(parseFloat(prozLocationFetch[0].latitude), parseFloat(prozLocationFetch[0].longitude)),
        //   zoom: 8,
        //   mapTypeId: google.maps.MapTypeId['ROADMAP']
        // });
        // this.mapSet.controls[google.maps.ControlPosition['RIGHT_BOTTOM']].push(document.getElementById('googft-legend-open'));
        // this.mapSet.controls[google.maps.ControlPosition['RIGHT_BOTTOM']].push(document.getElementById('googft-legend'));
        // this.layerSet = new google.maps.FusionTablesLayer({
        //   map: this.mapSet,
        //   heatmap: { enabled: false },
        //   query: {
        //     select: "col13",
        //     from: "1I9tW-TTrYj-84uoRfdBcFwgcJOsmnguq1Y_Hevkd",
        //     where: ""
        //   },
        //   options: {
        //     styleId: 2,
        //     templateId: 2
        //   }
        // });
        // if (isMobile) {
        //   var legend = document.getElementById('googft-legend');
        //   var legendOpenButton = document.getElementById('googft-legend-open');
        //   var legendCloseButton = document.getElementById('googft-legend-close');
        //   legend.style.display = 'none';
        //   legendOpenButton.style.display = 'block';
        //   legendCloseButton.style.display = 'block';
        //   legendOpenButton.onclick = function () {
        //     legend.style.display = 'block';
        //     legendOpenButton.style.display = 'none';
        //   }
        //   legendCloseButton.onclick = function () {
        //     legend.style.display = 'none';
        //     legendOpenButton.style.display = 'block';
        //   }
        // }
        // this.getCountiesList(this.activatedRoute.snapshot.params['prozId'])
    };
    //GOOGLE MAP INITIALISATION  
    //GET MASTER DATE TIME
    //Task #497:View Private Profile Screen, Business Hours, For Sunday,It should show the schedule selected but not as closed as default
    MyProzProfileComponent.prototype.getMasterDateTime = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/masterDateTime/' + this.prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            _this.dateTimeData = response.response;
            // for (var i = 0; i < this.dateTimeData.length; i++) {
            //   this.dateTimeData[i].color = true;
            //   this.dateTimeData[i].colorRed = false;
            // }
            for (var i = 0; i < _this.dateTimeData.length; i++) {
                if (_this.dateTimeData[i].status == "CLOSED") {
                    _this.dateTimeData[i].fromTime = false;
                    _this.dateTimeData[i].toTime = false;
                }
                else if (_this.dateTimeData[i].status == "OPEN") {
                    // this.dateTimeData[i].fromTime = ;
                    // this.dateTimeData[i].toTime = true;
                }
            }
        }, function (error) {
            _this.toastr.warning('Unable to Connect to Server');
        });
    };
    ///Task #497:View Private Profile Screen, Business Hours, For Sunday,It should show the schedule selected but not as closed as default
    //GET MASTER DATE TIME
    //OK BUTTON
    MyProzProfileComponent.prototype.okButton = function () {
        this.router.navigate(['/proz-dashboard/prozDashboard', this.prozId]);
        // this.toastr.info("In Progress")
    };
    //OK BUTTON
    //EDIT PROFILE
    MyProzProfileComponent.prototype.editProfile = function () {
        this.router.navigate(['/prozProfile/proEditMyProfile', this.activatedRoute.snapshot.params['prozId']]);
    };
    //EDIT PROFILE
    //SUB CATEGORIES PROZ
    MyProzProfileComponent.prototype.subCategoryProz = function (categoryCode) {
        var _this = this;
        //console.log('cat')
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        var catCodeObj = {
            catCodes: categoryCode
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/subCategoryFromCategoryCounty', catCodeObj, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                var list = response.response;
                console.log(response.response);
                var subcatArray = _this.prozProfileData.areaOfExpertise.split(',');
                console.log(subcatArray);
                list.forEach(function (e, i) {
                    subcatArray.forEach(function (f, j) {
                        if (e.subcat_code == f) {
                            _this.areaExpertiseList.push(e.subcategoryName);
                        }
                    });
                    if (i == list.length - 1) {
                        console.log(_this.areaExpertiseList);
                        _this.areaStatus = true;
                    }
                });
            }
            else {
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //SUB CATEGORIES PROZ
    //CATEGORIES PROZ
    MyProzProfileComponent.prototype.categoryProz = function (prozId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getProCategories/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.subCategoriesList = response.response;
                for (var i = 0; i < _this.subCategoriesList.length; i++) {
                    _this.serviceCostTotal = _this.serviceCostTotal + parseInt(_this.subCategoriesList[i].serviceCost);
                }
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //CATEGORIES PROZ  
    //FETCH PROZ LOCATION
    MyProzProfileComponent.prototype.prozLocation = function (prozId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getProzLocation/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozLocationFetch = response.response;
                _this.getCountiesList(_this.activatedRoute.snapshot.params['prozId']);
                google.maps.event.addDomListener(window, 'load', _this.initializeZipMap(_this.prozLocationFetch));
                return false;
            }
            else {
                _this.toastr.warning("No Records Found");
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //FETCH PROZ LOCATION  
    //VIEW PROZ SERVICE DETAILS
    MyProzProfileComponent.prototype.viewProzDetailsCounties = function (prozCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getProzServiceArea/' + prozCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.countyList = response.response;
                for (var i = 0; i < _this.countyList.length; i++) {
                    _this.countyList[i].households = _this.countyList[i].totalHouseHolds;
                    _this.totalNumberOfHouses = _this.totalNumberOfHouses + parseInt(_this.countyList[i].totalHouseHolds);
                    _this.counties.push(_this.countyList[i].county);
                    // this.layerSet.set("styles", [{
                    //   where: "'name' IN('" + this.counties.join("','") + "')",
                    //   polygonOptions: {
                    //     fillColor: "#00FF00"
                    //   }
                    // }]);
                    if (i == _this.countyList.length - 1) {
                    }
                }
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to Connect to server");
        });
    };
    //VIEW PROZ SERVICE DETAILS   
    //GET COUNTIES ZIPCODE LIST
    MyProzProfileComponent.prototype.getCountiesZipcodeList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getCountiesZipcodeList/' + proCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.countyZipcode = response.response;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES ZIPCODE LIST
    //GET COUNTIES CATEGORY LIST
    MyProzProfileComponent.prototype.getCountiesCategoryList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getCountiesCategoryList/' + proCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.countyCategory = response.response;
                _this.getCountiesSubCategoryList(proCode);
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES CATEGORY LIST
    //GET COUNTIES SUB CATEGORY LIST
    MyProzProfileComponent.prototype.getCountiesSubCategoryList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getCountiesSubCategoryList/' + proCode, options)
            .subscribe(function (data) {
            var response = data.json();
            //console.log(this.counties)
            //console.log(this.countyCategory[0].stateCode)
            //console.log(response.response)
            if (response.status == 200) {
                _this.countyStatus = true;
                _this.countySubCategory = response.response;
                for (var i = 0; i < _this.counties.length; i++) {
                    _this.counties[i].categories = [];
                    _this.counties[i].subcategories = [];
                    for (var j = 0; j < _this.countyCategory.length; j++) {
                        if (_this.counties[i].county === _this.countyCategory[j].county && _this.counties[i].stateCode == _this.countyCategory[j].stateCode) {
                            _this.counties[i].categories.push(_this.countyCategory[j]);
                        }
                    }
                    for (var k = 0; k < _this.countySubCategory.length; k++) {
                        if (_this.countySubCategory[k].subscriptionType === 'perLead') {
                            //console.log(this.countySubCategory[k])
                            _this.totalCostSubscription = _this.totalCostSubscription + parseInt(_this.countySubCategory[k].perLead);
                            _this.perLeadStatus = true;
                            _this.monthlyStatus = false;
                        }
                        if (_this.countySubCategory[k].subscriptionType === 'monthly') {
                            //console.log(this.countySubCategory[k])
                            _this.totalCostSubscription = _this.totalCostSubscription + parseInt(_this.countySubCategory[k].monthly);
                            _this.perLeadStatus = false;
                            _this.monthlyStatus = true;
                        }
                        if (_this.counties[i].county === _this.countySubCategory[k].county && _this.counties[i].stateCode == _this.countySubCategory[k].stateCode) {
                            _this.counties[i].subcategories.push(_this.countySubCategory[k]);
                        }
                    }
                    //console.log(this.totalCostSubscription)
                    localStorage.setItem('serviceCost', _this.totalCostSubscription);
                }
                _this.countyList = _this.counties;
                //console.log(this.counties[i])
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES SUB CATEGORY LIST
    //CATEGORIES
    MyProzProfileComponent.prototype.getListOfCategories = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getListOfCategories', options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                _this.categoriesData = response.response;
                _this.viewProzDetails();
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //CATEGORIES
    //GET ZIPCODES FROM COUNTY
    MyProzProfileComponent.prototype.getZipcodesFromCounty = function (data, stateCode, key) {
        var _this = this;
        if (key == 'view') {
            this.spinner.show();
            setTimeout(function () {
                /** spinner ends after 5 seconds */
                _this.spinner.hide();
            }, 2000);
        }
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getZipcodeFromCountyTable/' + data.county + '/' + stateCode + '/' + this.activatedRoute.snapshot.params['prozId'], options)
            .subscribe(function (data) {
            var response = data.json();
            //console.log(response)
            if (response.status == 200) {
                _this.displayZipcodes = response.response;
                _this.displayZipcodes.forEach(function (e) {
                    e.proCode = _this.activatedRoute.snapshot.params['prozId'];
                    e.checked = true;
                });
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET ZIPCODES FROM COUNTY
    //CHECK TRADE VALIDATIONS
    MyProzProfileComponent.prototype.checkValidationTrade = function () {
        var _this = this;
        this.tradeStatusCheck = true;
        this.addTradeLicenseList.get('tradeLicense').value.forEach(function (e) {
            //console.log(e)
            if (e.stateRegisteredIn == "" || e.tradeLicense == "" || e.tradeLicenseExpiration == "" || e.tradeLicenseNumber == "") {
                //console.log('The empty')
                _this.tradeStatusCheck = true;
                return false;
            }
            if (e.stateRegisteredIn == null || e.tradeLicense == null || e.tradeLicenseExpiration == null || e.tradeLicenseNumber == null) {
                //console.log('The empty')
                _this.tradeStatusCheck = true;
                return false;
            }
            else if (e.stateRegisteredIn !== "" && e.tradeLicense !== "" && e.tradeLicenseExpiration !== "" && e.tradeLicenseNumber !== "") {
                //console.log('The not empty')
                _this.tradeStatusCheck = false;
                return false;
            }
        });
    };
    //CHECK TRADE VALIDATIONS
    //ADD TRADE LICENSE
    MyProzProfileComponent.prototype.addTradeLicense = function () {
        var _this = this;
        var state = [];
        var tradeLicense = [];
        var tradeLicenseNumber = [];
        var tradeLicenseExpiration = [];
        var tradeLicenseCategoryNames = [];
        this.addTradeLicenseList.get('tradeLicense').value.forEach(function (e) {
            state.push(e.stateRegisteredIn);
            tradeLicense.push(e.tradeLicense);
            tradeLicenseNumber.push(e.tradeLicenseNumber);
            tradeLicenseExpiration.push(e.tradeLicenseExpiration);
            tradeLicenseCategoryNames.push(e.tradeLicense);
        });
        var tradeDetailsObj = {
            "prozId": this.activatedRoute.snapshot.params['prozId'],
            "stateRegisteredIn": state,
            "tradeLicense": tradeLicense,
            "tradeLicenseNumber": tradeLicenseNumber,
            "tradeLicenseExpiration": tradeLicenseExpiration,
        };
        //console.log(tradeDetailsObj)
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/bulkTradeLicenseDetailsInsert', tradeDetailsObj)
            .subscribe(function (data) {
            var response = data.json();
            //console.log(response)
            if (response.status === 200) {
                _this.toastr.success("Trade License Added Successfully");
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //ADD TRADE LICENSE
    //STATES
    MyProzProfileComponent.prototype.getListOfStates = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getListOfStates', options)
            .subscribe(function (data) {
            var response = data.json();
            _this.statesData = response.response;
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //STATES
    MyProzProfileComponent.prototype.onMapReady = function (map, key) {
        var _this = this;
        this.HttP.get("assets/geolocations.json").subscribe(function (json) {
            json.features.map(function (val) {
                val.checked = false;
            });
            _this.json = json;
            var myStyle = {
                "color": "blue",
                "fillColor": ' rgb(242,239,233)',
                "weight": 0.5,
                "fillOpacity": 0.05,
                "opacity": 1,
            };
            // this.countyStore.forEach((a)=>{
            leaflet__WEBPACK_IMPORTED_MODULE_9__["geoJSON"](_this.json, {
                style: myStyle,
                onEachFeature: function (feature, layer) {
                    // popup content
                    var popupContent = '<h4>NAME: ' + feature.properties.NAME + '</h4><b>COUNTY: ' + feature.properties.COUNTY + '</b>';
                    // pop content ends here
                    //Open data in Popup on Map
                    layer.bindPopup(popupContent);
                    // Open data in Popoup on map ends
                    // Click event on Map
                    var name = feature.properties.NAME.toUpperCase();
                    _this.countyStore.forEach(function (a) {
                        if (a.county == name && a.stateCode == feature.properties.STATE) {
                            feature['checked'] = true;
                            var style = {
                                fillColor: 'yellow',
                                fillOpacity: 0.5,
                                weight: 0.2,
                                opacity: 1,
                            };
                            var highlight = {
                                'fillColor': 'green',
                                'weight': 0.2,
                                'opacity': 1
                            };
                            layer['setStyle'](style);
                            layer['setStyle'](highlight);
                        }
                    });
                    layer.on({
                        'click': function (e) {
                            var name = feature.properties.NAME.toUpperCase();
                            if (feature['checked'] == true) {
                                e.target.closePopup();
                                feature['checked'] = false;
                                var style = {
                                    fillColor: ' rgb(242,239,233)',
                                    fillOpacity: 0.05,
                                    weight: 0.2,
                                    opacity: 1,
                                };
                                layer.bindPopup['true'];
                                // this.featuresSelected = feature.properties.NAME;
                                // var val = this.featuresSelected.toUpperCase();
                                layer['setStyle'](style);
                                layer['setStyle'](highlight);
                            }
                            else if (feature['checked'] == false) {
                                feature['checked'] = true;
                                var style = {
                                    fillColor: 'green',
                                    fillOpacity: 0.5,
                                    weight: 0.2,
                                    opacity: 1,
                                };
                                var highlight = {
                                    'fillColor': 'green',
                                    'weight': 0.2,
                                    'opacity': 1
                                };
                                // this.featuresSelected = feature.properties.NAME;
                                layer['setStyle'](style);
                                layer['setStyle'](highlight);
                                // this.getCountyManualy(this.featureSelected)
                            }
                        }
                    });
                    // Click event on Map ends here
                },
            }).addTo(map);
            // })
            leaflet__WEBPACK_IMPORTED_MODULE_9__["marker"]([_this.prozLocationFetch[0].latitude, _this.prozLocationFetch[0].longitude]).addTo(map);
            map.setView([_this.prozLocationFetch[0].latitude, _this.prozLocationFetch[0].longitude], 7);
        });
        this.spinner.hide();
    };
    //GET COUNTIES LIST
    MyProzProfileComponent.prototype.getCountiesList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getUniqueCounty/' + proCode, options)
            .subscribe(function (data) {
            var response = data.json();
            var categoryName = [];
            if (response.status == 200) {
                _this.countyStatus = true;
                _this.countyStore = response.response;
                _this.counties = response.response;
                _this.getCountiesCategoryList(proCode);
                _this.showMap = true;
                //LOAD LAYER
                // this.loadSelected(this.countyStore)
                //LOAD LAYER
            }
            else {
                // this.spinner.hide()
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES LIST
    MyProzProfileComponent.prototype.gotoTerms = function () {
        this.router.navigate(['/proz/terms', this.activatedRoute.snapshot.params['prozId']]);
    };
    MyProzProfileComponent.prototype.home = function () {
        this.router.navigate(['/proz-dashboard/prozDashboard/', this.loginData.loginCode]);
    };
    MyProzProfileComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            providers: [_utilities_beyond__WEBPACK_IMPORTED_MODULE_2__["Beyond"]],
            selector: 'app-my-proz-profile',
            template: __webpack_require__(/*! ./my-proz-profile.component.html */ "./src/app/proz-profile/my-proz-profile/my-proz-profile.component.html"),
            styles: [__webpack_require__(/*! ./my-proz-profile.component.scss */ "./src/app/proz-profile/my-proz-profile/my-proz-profile.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_utilities_beyond__WEBPACK_IMPORTED_MODULE_2__["Beyond"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _angular_http__WEBPACK_IMPORTED_MODULE_4__["Http"],
            _angular_common_http__WEBPACK_IMPORTED_MODULE_8__["HttpClient"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormBuilder"],
            ngx_spinner__WEBPACK_IMPORTED_MODULE_10__["NgxSpinnerService"]])
    ], MyProzProfileComponent);
    return MyProzProfileComponent;
}());



/***/ }),

/***/ "./src/app/proz-profile/pro-edit-my-profile/pro-edit-my-profile.component.html":
/*!*************************************************************************************!*\
  !*** ./src/app/proz-profile/pro-edit-my-profile/pro-edit-my-profile.component.html ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<app-commonvanlynkheader></app-commonvanlynkheader>\r\n<app-prozadmin-sidemenu></app-prozadmin-sidemenu>\r\n<!-- Page Content -->\r\n<div class=\"page-content\">\r\n  <!-- Page Breadcrumb -->\r\n  <div class=\"page-breadcrumbs\">\r\n    <ul class=\"breadcrumb\">\r\n      <li>\r\n        <i class=\"fa fa-home\"></i>\r\n        <a (click)=\"home()\">Home</a>\r\n      </li>\r\n      <li class=\"active\">My Profile Edit Details</li>\r\n    </ul>\r\n  </div>\r\n  <!-- /Page Breadcrumb -->\r\n  <!-- Page Header -->\r\n  <div class=\"page-header position-relative\">\r\n    <div class=\"header-title\">\r\n      <h1>\r\n        My Profile Edit Details\r\n      </h1>\r\n    </div>\r\n  </div>\r\n  <!-- /Page Header -->\r\n\r\n  <!-- Page Body -->\r\n  <div class=\"page-body\">\r\n    <div class=\"widget-body\">\r\n      <div id=\"registration-form\">\r\n        <form [formGroup]=\"serProzDetails\" (ngSubmit)=\"onSubmit()\" *ngIf=\"editProfile\">\r\n          <div class=\"form-title\">\r\n            Company Details\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"companyName\">Company Name </label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" id=\"companyName\" placeholder=\"Enter Company Name\"\r\n                    formControlName=\"companyName\" (change)=\"changeBusinessName()\" required>\r\n                  <i class=\"fa fa-briefcase\"></i>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"website\">Business Type </label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <select class=\"form-control\" id=\"businessType\" name=\"status\" data-bv-field=\"row-title\"\r\n                    formControlName=\"businessType\" required>\r\n                    <option value=\"\">--Select Business Type--</option>\r\n                    <option value=\"Sole Proprietor\">Sole Proprietor</option>\r\n                    <option value=\"LLC\">LLC</option>\r\n                    <option value=\"Corporation\">Corporation</option>\r\n                  </select>\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"firstname\">Contact Person First Name <span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" id=\"firstname\" placeholder=\"Enter First Name\"\r\n                    formControlName=\"firstName\" required>\r\n                  <i class=\"fa fa-user\"></i>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"lastname\">Contact Person Last Name <span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" id=\"lastname\" placeholder=\"Enter Last Name\"\r\n                    formControlName=\"lastName\" required>\r\n                  <i class=\"fa fa-user\"></i>\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"emailID\">E-Mail Address <span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"email\" readonly class=\"form-control\" id=\"emailID\" placeholder=\"Enter E-Mail ID\"\r\n                    formControlName=\"businessEmail\" required>\r\n                  <i class=\"fa fa-envelope-o\"></i>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"mobileNumber\">Business Phone Number <span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" id=\"mobileNumber\" placeholder=\"Enter Mobile Number\"\r\n                    formControlName=\"businessPhone\" required [dropSpecialCharacters]=\"false\"\r\n                    mask=\"000-000-000000\">\r\n                  <i class=\"fa fa-mobile-phone\"></i>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"mobileNumber\" style=\"color: white;\">Verify</label>               \r\n                <a data-toggle=\"modal\" data-target=\"\" class=\"btn btn-azure shiny btn-block\" \r\n                value=\"Verify\" (click)=\"verifyotp()\" >Verify\r\n              </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"businessAddressLine1\">Business Address<span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" placeholder=\"Enter Business Address\"\r\n                    formControlName=\"businessAddressLine1\" (change)=\"changeBusinessName()\" required>\r\n                  <i class=\"fa fa-envelope\"></i>\r\n                </span>\r\n             \r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"mobileNumber\">Send Lead Notification To This Phone Number<span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" id=\"mobileNumber\" placeholder=\"Enter Mobile Number\"\r\n                    formControlName=\"smsMobile\" required [dropSpecialCharacters]=\"false\"\r\n                    mask=\"000-000-000000\">\r\n                  <i class=\"fa fa-mobile-phone\"></i>\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"city\">City<span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" placeholder=\"Enter City\" formControlName=\"city\"\r\n                    (change)=\"changeBusinessName()\" required>\r\n                  <i class=\"fa fa-envelope\"></i>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"state\">State<span class=\"mandatory\">*</span></label>\r\n                <select class=\"form-control\" id=\"state\" name=\"status\" data-bv-field=\"row-title\" formControlName=\"state\"\r\n                  (change)=\"changeBusinessName()\" required>\r\n                  <option value=\"\">Select</option>\r\n                  <option *ngFor=\"let data of statesData\" value={{data.stateCode}}>\r\n                    {{data.stateName}}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"zipCode\">Zip Code<span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" id=\"zipCode\" (change)=\"changeBusinessName()\"\r\n                    placeholder=\"Enter Zip Code\" formControlName=\"zipCode\" required>\r\n                  <i class=\"fa fa-map-marker\"></i>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"website\">Website </label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" id=\"website\" placeholder=\"Enter Website\"\r\n                    formControlName=\"webMailId\">\r\n                  <i class=\"fa fa-globe\"></i>\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"companyLogo\">Company Logo</label>\r\n                <div class=\"controls\">\r\n                  <div data-provides=\"fileupload\" class=\"fileupload fileupload-new\">\r\n                    <div style=\"width: 100px; height: 120px;\" class=\"fileupload-new thumbnail\">\r\n                      <img [src]=\"imagePreview\" style=\"height:120px;width:100px;\">\r\n                    </div>\r\n                    <div style=\"max-width: 90px; max-height: 110px; line-height: 20px;\"\r\n                      class=\"fileupload-preview fileupload-exists thumbnail\"></div>\r\n                    <div>\r\n                      <input #imageUpload type=\"file\" accept=\"image/*\" id=\"avatar\" (change)=\"select($event)\" #fileInput>\r\n                      <button type=\"button\" class=\"btn\" [disabled]=\"!img\" (click)=\"imgfileUpload()\">Upload</button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div *ngIf=\"progressShow\" class=\"progress-bar1 blue stripes\">\r\n                <span [style.width.%]=\"percentage\">\r\n                  <p style=\"text-align: center;color:black;font-size:18px;\">{{percentage}}%</p>\r\n                </span>\r\n              </div>\r\n              <br>\r\n              <div *ngIf=\"progressHide\" class=\"alert alert-block alert-success\" style=\"height:3px;\">\r\n                <h4 class=\"alert-heading\" style=\"margin-top:-5px;text-align:center;\">Image Uploaded\r\n                  Successfully</h4>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"companyLogo\">Pro-Profile Image</label>\r\n                <div class=\"controls\">\r\n                  <div data-provides=\"fileupload\" class=\"fileupload fileupload-new\">\r\n                    <div style=\"width: 100px; height: 120px;\" class=\"fileupload-new thumbnail\">\r\n                      <img [src]=\"imagePreview1\" style=\"height:120px;width:100px;\">\r\n                    </div>\r\n                    <div style=\"max-width: 90px; max-height: 110px; line-height: 20px;\"\r\n                      class=\"fileupload-preview fileupload-exists thumbnail\"></div>\r\n                    <div>\r\n                      <input #imageUpload type=\"file\" accept=\"image/*\" id=\"avatar\" (change)=\"proselect($event)\"\r\n                        #fileInput>\r\n                      <button type=\"button\" class=\"btn\" [disabled]=\"!img1\"\r\n                        (click)=\"proimgfileUpload()\">Upload</button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div *ngIf=\"proprogressShow\" class=\"progress-bar1 blue stripes\">\r\n                <span [style.width.%]=\"percentage\">\r\n                  <p style=\"text-align: center;color:black;font-size:18px;\">{{percentage}}%</p>\r\n                </span>\r\n              </div>\r\n              <br>\r\n              <div *ngIf=\"proprogressHide\" class=\"alert alert-block alert-success\" style=\"height:3px;\">\r\n                <h4 class=\"alert-heading\" style=\"margin-top:-5px;text-align:center;\">Image Uploaded\r\n                  Successfully</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div class=\"row\">\r\n\r\n            \r\n          </div>\r\n\r\n          <div class=\"form-title\">\r\n            Yelp Businesses\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-xs-12 col-md-12\">\r\n              <table class=\"table table-hover table-striped table-bordered\">\r\n                <tbody>\r\n                  <tr>\r\n                    <td>\r\n                      <label>Select</label>\r\n                    </td>\r\n                    <td>\r\n                      <label>Business Name</label>\r\n                    </td>\r\n                    <td>\r\n                      <label>City</label>\r\n                    </td>\r\n                    <td>\r\n                      <label>State</label>\r\n                    </td>\r\n                    <td>\r\n                      <label>Country</label>\r\n                    </td>\r\n                    <td>\r\n                      <label>Address</label>\r\n                    </td>\r\n                    <td>\r\n                      <label>Zipcode</label>\r\n                    </td>\r\n                  </tr>\r\n                  <ng-container *ngIf=\"!yelpExists\">\r\n                    <tr *ngFor=\"let data of yelpBusinesses\">\r\n                      <td>\r\n                        <div class=\"radio\">\r\n                          <label>\r\n                            <input value=\"{{data.name}}\" type=\"radio\" (change)=\"selectYelp(data)\"\r\n                              class=\"colored-success\">\r\n                            <span class=\"text\"></span>\r\n                          </label>\r\n                        </div>\r\n                        <!-- <input type=\"radio\" value=\"select\" [(ngModel)]=\"data.selected\" [ngModelOptions]=\"{standalone: true}\"> -->\r\n                      </td>\r\n                      <td>\r\n                        <label class=\"aggregateRating\" for=\"aggregateRating\">{{data.name}}</label>\r\n                      </td>\r\n                      <td>\r\n                        <label class=\"aggregateRating\" for=\"aggregateRating\">\r\n                          <span>{{data.location.city}}</span></label>\r\n                      </td>\r\n                      <td>\r\n                        <label class=\"aggregateRating\"\r\n                          for=\"aggregateRating\"><span>{{data.location.state}}</span></label>\r\n                      </td>\r\n                      <td>\r\n                        <label class=\"aggregateRating\"\r\n                          for=\"aggregateRating\"><span>{{data.location.country}}</span></label>\r\n                      </td>\r\n                      <td>\r\n                        <label class=\"aggregateRating\"\r\n                          for=\"aggregateRating\"><span>{{data.location.address1}}</span></label>\r\n                      </td>\r\n                      <td>\r\n                        <label class=\"aggregateRating\"\r\n                          for=\"aggregateRating\"><span>{{data.location.zip_code}}</span></label>\r\n                      </td>\r\n                    </tr>\r\n                  </ng-container>\r\n                  <ng-container *ngIf=\"yelpExists\">\r\n                    NO YELP BUSINESS FOUND\r\n                  </ng-container>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          <br><br>\r\n          <div class=\"form-title\">\r\n            Social Media Links\r\n          </div>\r\n\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-xs-12 col-md-12\">\r\n              <table class=\"table table-hover table-striped table-bordered\">\r\n                <tbody>\r\n                  <tr>\r\n                    <td>\r\n                      <label class=\"aggregateRating\" for=\"aggregateRating\">Social Media</label>\r\n                    </td>\r\n                    <td>\r\n                      <label class=\"aggregateRating\" for=\"aggregateRating\"> <span>Id</span></label>\r\n                    </td>\r\n                    <td>\r\n                      <label class=\"aggregateRating\" for=\"aggregateRating\"><span>Rating</span></label>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <label class=\"aggregateRating\" for=\"aggregateRating\">Yelp</label>\r\n                    </td>\r\n                    <td>\r\n                      <label class=\"aggregateRating\" for=\"aggregateRating\"> <span>{{yelpId}}</span></label>\r\n                    </td>\r\n                    <td>\r\n                      <label class=\"aggregateRating\" for=\"aggregateRating\"><span>{{yelpRatingNo}}</span></label>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <label class=\"aggregateRating\" for=\"aggregateRating\">Google</label>\r\n                    </td>\r\n                    <td>\r\n                      <label class=\"aggregateRating\" for=\"aggregateRating\"><span>{{googleRatingId}}</span></label>\r\n                    </td>\r\n                    <td>\r\n                      <label class=\"aggregateRating\" for=\"aggregateRating\"><span>{{googleRating}}</span></label>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <label class=\"aggregateRating\" for=\"aggregateRating\">Aggregate Rating From Yelp and\r\n                        Google</label>\r\n                    </td>\r\n                    <td>\r\n                      <label class=\"aggregateRating\" for=\"aggregateRating\"><span></span></label>\r\n                    </td>\r\n                    <td style=\"border: none;\">\r\n                      <label class=\"aggregateRating\" for=\"aggregateRating\"><span>{{aggregateRating}}</span></label>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          <br>\r\n          <br>\r\n          <div class=\"form-title\">\r\n            Business Hours\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"city\">Day</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-3\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"status\">Status</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-2\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"FromTime\">From Time</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-2\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"ToTime\">To Time</label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-2\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"city\">Edit/Save</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <div class=\"form-group\">\r\n                <span class=\"input-icon icon-right\">\r\n                  <div *ngFor=\"let data of dateTimeData\">\r\n                    <div *ngIf=\"data.saveButton\">\r\n                      <div class=\"col-sm-3 gap\">\r\n                        <!-- <label for=\"city\">Day</label> -->\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input readonly type=\"text\" class=\"form-control\" value=\"{{data.day}}\">\r\n                          <i class=\"fa fa-calendar\"></i>\r\n                        </span>\r\n                      </div>\r\n                      <div class=\"col-sm-3 gap\">\r\n                        <!-- <label for=\"status\">Status</label> -->\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input readonly type=\"text\" class=\"form-control\" id=\"status\" value=\"{{data.status}}\">\r\n                        </span>\r\n                      </div>\r\n                      <div class=\"col-sm-2 gap\">\r\n                        <!-- <label for=\"city\">From Time</label> -->\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input readonly type=\"text\" class=\"form-control\" value=\"{{data.fromTime}}\">\r\n                          <i class=\"fa fa-clock-o\"></i>\r\n                        </span>\r\n                      </div>\r\n\r\n                      <div class=\"col-sm-2 gap\">\r\n                        <!-- <label for=\"city\">To Time</label> -->\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input readonly type=\"text\" class=\"form-control\" value=\"{{data.toTime}}\">\r\n                          <i class=\"fa fa-clock-o\"></i>\r\n                        </span>\r\n                      </div>\r\n\r\n                      <div class=\"col-sm-2 gap\">\r\n                        <!-- <label for=\"city\">Edit</label> -->\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"button\" class=\"form-control\" (click)=\"editCalen(data)\" value=\"Edit\">\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div *ngIf=\"data.editButton\">\r\n                      <div class=\"col-sm-3 gap\">\r\n                        <!-- <label for=\"city\">Day</label> -->\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input readonly type=\"text\" class=\"form-control\" value=\"{{data.day}}\">\r\n                          <i class=\"fa fa-calendar\"></i>\r\n                        </span>\r\n                      </div>\r\n                      <!-- TASK #497 -->\r\n                      <div class=\"col-sm-3 gap\" *ngIf=\"data.status\">\r\n                        <!-- <label for=\"city\">status</label> -->\r\n                        <span class=\"input-icon icon-right\">\r\n                          <select [(ngModel)]=\"data.status\" (ngModelChange)=\"statusChange()\"\r\n                            [ngModelOptions]=\"{standalone: true}\">\r\n                            <option value=\"OPEN\">OPEN</option>\r\n                            <option value=\"CLOSED\">CLOSED</option>\r\n                          </select>\r\n                        </span>\r\n                      </div>\r\n                      <!-- /TASK #497 -->\r\n                      <!-- Status Closed/Open -->\r\n                      <div class=\"col-sm-2 gap\" *ngIf=\"data.status=='OPEN'\">\r\n                        <!-- <label for=\"FromTime\">From Time</label> -->\r\n                        <span class=\"input-icon icon-right\">\r\n                          <select [(ngModel)]=\"data.fromTime\" [ngModelOptions]=\"{standalone: true}\">\r\n                            <option value=\"06:00 AM\">06:00 AM</option>\r\n                            <option value=\"07:00 AM\">07:00 AM</option>\r\n                            <option value=\"08:00 AM\">08:00 AM</option>\r\n                            <option value=\"09:00 AM\">09:00 AM</option>\r\n                            <option value=\"10:00 AM\">10:00 AM</option>\r\n                            <option value=\"11:00 AM\">11:00 AM</option>\r\n                            <option value=\"12:00 PM\">12:00 PM</option>\r\n                            <option value=\"01:00 PM\">01:00 PM</option>\r\n                            <option value=\"02:00 PM\">02:00 PM</option>\r\n                            <option value=\"03:00 PM\">03:00 PM</option>\r\n                            <option value=\"04:00 PM\">04:00 PM</option>\r\n                            <option value=\"05:00 PM\">05:00 PM</option>\r\n                            <option value=\"06:00 PM\">06:00 PM</option>\r\n                            <option value=\"07:00 PM\">07:00 PM</option>\r\n                            <option value=\"08:00 PM\">08:00 PM</option>\r\n                            <option value=\"09:00 PM\">09:00 PM</option>\r\n                            <option value=\"10:00 PM\">10:00 PM</option>\r\n                          </select>\r\n                        </span>\r\n                      </div>\r\n                      <div class=\"col-sm-2 gap\" *ngIf=\"data.status=='CLOSED'\">\r\n                        <!-- <label for=\"FromTime\">From Time</label> -->\r\n                        <span class=\"input-icon icon-right\">\r\n                          <!-- <select [(ngModel)]=\"data.fromTime\" [ngModelOptions]=\"{standalone: true}\">\r\n                            <option value=\" \">00:00 AM</option>\r\n                          </select> -->\r\n                        </span>\r\n                      </div>\r\n                      <div class=\"col-sm-2 gap\" *ngIf=\"data.status=='OPEN'\">\r\n                        <!-- <label for=\"ToTime\">To Time</label> -->\r\n                        <span class=\"input-icon icon-right\">\r\n                          <select [(ngModel)]=\"data.toTime\" [ngModelOptions]=\"{standalone: true}\">\r\n                            <option value=\"06:00 AM\">06:00 AM</option>\r\n                            <option value=\"07:00 AM\">07:00 AM</option>\r\n                            <option value=\"08:00 AM\">08:00 AM</option>\r\n                            <option value=\"09:00 AM\">09:00 AM</option>\r\n                            <option value=\"10:00 AM\">10:00 AM</option>\r\n                            <option value=\"11:00 AM\">11:00 AM</option>\r\n                            <option value=\"12:00 PM\">12:00 PM</option>\r\n                            <option value=\"01:00 PM\">01:00 PM</option>\r\n                            <option value=\"02:00 PM\">02:00 PM</option>\r\n                            <option value=\"03:00 PM\">03:00 PM</option>\r\n                            <option value=\"04:00 PM\">04:00 PM</option>\r\n                            <option value=\"05:00 PM\">05:00 PM</option>\r\n                            <option value=\"06:00 PM\">06:00 PM</option>\r\n                            <option value=\"07:00 PM\">07:00 PM</option>\r\n                            <option value=\"08:00 PM\">08:00 PM</option>\r\n                            <option value=\"09:00 PM\">09:00 PM</option>\r\n                            <option value=\"10:00 PM\">10:00 PM</option>\r\n                          </select>\r\n                        </span>\r\n                      </div>\r\n                      <div class=\"col-sm-2 gap\" *ngIf=\"data.status=='CLOSED'\">\r\n                        <!-- <label for=\"ToTime\">To Time</label> -->\r\n                        <!-- <span class=\"input-icon icon-right\">\r\n                          <select [(ngModel)]=\"data.toTime\" [ngModelOptions]=\"{standalone: true}\">\r\n                            <option value=\" \">00:00 AM</option>\r\n                          </select>\r\n                        </span> -->\r\n                      </div>\r\n                      <div class=\"col-sm-2 gap\">\r\n                        <!-- <label for=\"city\">Save</label> -->\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"button\" class=\"form-control\" (click)=\"saveCalen(data)\" value=\"Save\">\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <div class=\"form-group\">\r\n                <hr class=\"hr-blue\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"form-title\">\r\n            Business Information\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"companyProfileDesc\">Business Description <span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" id=\"companyProfileDesc\"\r\n                    placeholder=\"Enter Business Description\" formControlName=\"companyProfileDescription\" required>\r\n                  <i class=\"fa fa-file\"></i>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"inBusinessSince\">In Business Since <span class=\"mandatory\">*</span></label>\r\n                <select class=\"form-control\" data-bv-field=\"row-title\" formControlName=\"inBusinessSince\" required>\r\n                  <option value=\"\">Select</option>\r\n                  <option *ngFor=\"let data of yearsData\" value={{data.year}}>\r\n                    {{data.year}}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"companyProfileDesc\">Are you insured? <span class=\"mandatory\">*</span></label>\r\n                <div class=\"control-group\">\r\n                  <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                    <div class=\"radio\">\r\n                      <label>\r\n                        <input value=\"yes\" type=\"radio\" class=\"colored-success\" formControlName=\"areYouInsured\"\r\n                          required>\r\n                        <span class=\"text\"> Yes</span>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                    <div class=\"radio\">\r\n                      <label>\r\n                        <input value=\"no\" type=\"radio\" class=\"colored-success\" formControlName=\"areYouInsured\" required>\r\n                        <span class=\"text\"> No</span>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"companyProfileDesc\">Are you Bonded? <span class=\"mandatory\">*</span></label>\r\n                <div class=\"control-group\">\r\n                  <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                    <div class=\"radio\">\r\n                      <label>\r\n                        <input value=\"yes\" type=\"radio\" class=\"colored-success\" formControlName=\"areYouBonded\">\r\n                        <span class=\"text\"> Yes</span>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                    <div class=\"radio\">\r\n                      <label>\r\n                        <input value=\"no\" type=\"radio\" class=\"colored-success\" formControlName=\"areYouBonded\">\r\n                        <span class=\"text\"> No</span>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"numberEmployees\">No. of Employees in the company? <span class=\"mandatory\">*</span></label>\r\n                <select class=\"form-control\" id=\"numberEmployees\" name=\"status\" data-bv-field=\"row-title\"\r\n                  formControlName=\"numberOfEmployees\" required>\r\n                  <option value=\"\">--Select No. of Employees--</option>\r\n                  <option value=\"<10\">Less than 10</option>\r\n                  <option value=\"11-50\">11-50</option>\r\n                  <option value=\"51-200\">51-200</option>\r\n                  <option value=\"200-More\">200-More</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <hr class=\"hr-blue\">\r\n            </div>\r\n          </div>\r\n\r\n          <!---License Details-->\r\n          <div class=\"form-title\">\r\n            Trade License Details\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <form [formGroup]=\"addTradeLicenseList\">\r\n                <ng-container formArrayName=\"tradeLicense\">\r\n                  <div id=\"field\" *ngFor=\"let item of addTradeLicenseList.get('tradeLicense').controls; let i = index;\"\r\n                    [formGroupName]=\"i\">\r\n                    <div id=\"field0\">\r\n                      <div class=\"row\">\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"stateRegistred\">State Registered In?<span class=\"mandatory\">*</span></label>\r\n                            <select class=\"form-control\" id=\"stateRegistred\" name=\"status\" data-bv-field=\"row-title\"\r\n                              formControlName=\"stateRegisteredIn\" (change)=\"checkValidationTrade()\">\r\n                              <option value=\"\">Select</option>\r\n                              <option *ngFor=\"let data of statesData\" value={{data.stateName}}>\r\n                                {{data.stateName}}\r\n                              </option>\r\n                            </select>\r\n                            <span\r\n                              *ngIf=\"item.value.StatusCheck&&item.value.stateRegisteredIn==null||item.value.stateRegisteredIn==''\"\r\n                              style=\"color:red;font-size: 11px\">* Required State Registered In </span>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"tradeLicense1\">Trade License Category<span class=\"mandatory\">*</span></label>\r\n                            <select class=\"form-control\" id=\"tradeLicense1\" name=\"status\" data-bv-field=\"row-title\"\r\n                              formControlName=\"tradeLicense\" (change)=\"checkValidationTrade()\" (click)=\"getSubcat(i)\">\r\n                              <option value=\"\">Select</option>\r\n                              <option *ngFor=\"let data of categoriesData\" value={{data.cat_code}}>\r\n                                {{data.categoryName}}\r\n                              </option>\r\n                            </select>\r\n                            <span\r\n                              *ngIf=\"item.value.StatusCheck&&item.value.tradeLicense==null||item.value.tradeLicense==''\"\r\n                              style=\"color:red; font-size: 11px\">* Required Trade License Category </span>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-2\">\r\n                          <div class=\"form-group\">\r\n                            <span class=\"input-icon icon-right\" style=\"margin-top:28px;\">\r\n                              <a (click)=\"deleteFieldValueModelLevel(i)\" data-toggle=\"modal\"\r\n                                data-target=\"#modal-success\" class=\"btn btn-danger btn-sm shiny\">\r\n                                <i class=\"fa fa-trash-o\"></i>\r\n                              </a>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"row\">\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"tradeLicense1N\">Trade License #<span class=\"mandatory\">*</span> </label>\r\n                            <span class=\"input-icon icon-right\">\r\n                              <input type=\"text\" class=\"form-control\" id=\"tradeLicense1N\"\r\n                                placeholder=\"Enter Trade License #\" formControlName=\"tradeLicenseNumber\"\r\n                                (change)=\"checkValidationTrade()\" min=\"6\" max=\"6\" mask=\"000000\"\r\n                                [dropSpecialCharacters]=\"false\">\r\n                              <i class=\"fa fa-file\"></i>\r\n                            </span>\r\n                            <span\r\n                              *ngIf=\"item.value.StatusCheck&&item.value.tradeLicenseNumber==null||item.value.tradeLicenseNumber==''\"\r\n                              style=\"color:red; font-size: 11px\">*Required Trade License Number</span>\r\n                            <span *ngIf=\"addTradeLicenseList.get('tradeLicense').controls.invalid\"\r\n                              style=\"color:red; font-size: 11px\">*Min length should be 6\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"tradeLicense1Exp\">Trade License Expiration<span\r\n                                class=\"mandatory\">*</span></label>\r\n                            <span class=\"input-icon icon-right\">\r\n                              <input type=\"date\" class=\"form-control\" id=\"tradeLicense1Exp\" placeholder=\"DD/MM/YYYY\"\r\n                                formControlName=\"tradeLicenseExpiration\" (change)=\"checkValidationTrade()\"\r\n                                (change)=\"tradeLicenseExpiration()\" min=\"{{blockifyDate}}\" onkeydown=\"return false\">\r\n                              <i class=\"fa fa-calendar\"></i>\r\n                            </span>\r\n                            <span\r\n                              *ngIf=\"item.value.StatusCheck&&item.value.tradeLicenseExpiration==null||item.value.tradeLicenseExpiration=='mm/dd/yyyy'||item.value.tradeLicenseExpiration==''\"\r\n                              style=\"color:red;font-size: 11px\">*Required Trade License Expiration</span>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-2\">\r\n\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <div class=\"col-sm-12\">\r\n                        <hr class=\"hr-blue\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </ng-container>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <!-- Button -->\r\n\r\n\r\n\r\n\r\n          <!-- <div class=\"row\" *ngIf=\"addTradeLicenseList.get('tradeLicense').value.length == '1'\">\r\n            <div class=\"col-sm-3\">\r\n              <input type=\"button\" class=\"btn btn-azure shiny btn-block\" value=\"+ Add Trade License\"\r\n                id=\"add-more\" (click)=\"addFieldValue()\">\r\n            </div>\r\n          </div> -->\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-3\">\r\n              <input type=\"button\" class=\"btn btn-azure shiny btn-block\" value=\"+ Add Trade License\" id=\"add-more\"\r\n                data-toggle=\"modal\" data-target=\".bs-example-modal-sm\">\r\n            </div>\r\n          </div>\r\n\r\n          <!---/License Details-->\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <hr class=\"hr-blue\">\r\n            </div>\r\n          </div>\r\n          <div class=\"form-title\">\r\n            Areas of Expertise\r\n          </div>\r\n          <div class=\"row\" *ngIf=\"showSubCat\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"areasofexpertise\">Areas of Expertise</label>\r\n                <div style=\"overflow:auto;width:100%;height:100px\">\r\n                  <div *ngFor=\"let data of subCategoriesData\">\r\n                    <div *ngFor=\"let subCat of data.subCategories\">\r\n                      <label>\r\n                        <input type=\"checkbox\" [(ngModel)]=\"subCat.checked\" [ngModelOptions]=\"{standalone: true}\"\r\n                          (ngModelChange)=\"checkCategory(data,subCat)\">\r\n                        <span class=\"text\">{{subCat.subcategoryName}}</span>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"additionalInfo\">Additional Info</label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" id=\"additionalInfo\" placeholder=\"Enter Additional Info\"\r\n                    formControlName=\"additionalInfo\">\r\n                  <i class=\"fa fa-file\"></i>\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"warrantyoffered\">Warranty Offered </label>\r\n                <div class=\"control-group\">\r\n                  <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                    <div class=\"radio\">\r\n                      <label>\r\n                        <input value=\"yes\" type=\"radio\" class=\"colored-success\" formControlName=\"warrantyOffered\">\r\n                        <span class=\"text\">Yes</span>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                    <div class=\"radio\">\r\n                      <label>\r\n                        <input value=\"no\" type=\"radio\" class=\"colored-success\" formControlName=\"warrantyOffered\">\r\n                        <span class=\"text\">No</span>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ccAccepted\">Credit Card Accepted? </label>\r\n                <div class=\"control-group\">\r\n                  <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                    <div class=\"radio\">\r\n                      <label>\r\n                        <input value=\"yes\" type=\"radio\" class=\"colored-success\" formControlName=\"creditCardAccepted\">\r\n                        <span class=\"text\"> Yes</span>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                    <div class=\"radio\">\r\n                      <label>\r\n                        <input value=\"no\" type=\"radio\" class=\"colored-success\" checked=\"checked\"\r\n                          formControlName=\"creditCardAccepted\">\r\n                        <span class=\"text\"> No</span>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"freeEstimates\">Free Estimates </label>\r\n                <div class=\"control-group\">\r\n                  <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                    <div class=\"radio\">\r\n                      <label>\r\n                        <input value=\"yes\" type=\"radio\" class=\"colored-success\" formControlName=\"freeEstimated\">\r\n                        <span class=\"text\"> Yes</span>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                    <div class=\"radio\">\r\n                      <label>\r\n                        <input value=\"no\" type=\"radio\" class=\"colored-success\" checked=\"checked\"\r\n                          formControlName=\"freeEstimated\">\r\n                        <span class=\"text\"> No</span>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <hr class=\"hr-blue\">\r\n            </div>\r\n          </div>\r\n          <div class=\"form-title\">\r\n            Service Area Details\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <div class=\"form-group\">\r\n                <h5><span class=\"mandatory\">*</span> <b>Please click on the map to select county</b></h5>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\" *ngIf=\"showMap\">\r\n              <!-- <div id=\"google_map\"></div> -->\r\n              <div class=\"map\" id=\"leafletmap\" leaflet (leafletMapReady)=\"onMapReady($event,'na')\"\r\n                [leafletOptions]=\"options\" [leafletLayersControl]=\"layersControl\"></div>\r\n            </div>\r\n          </div>\r\n          <br />\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-2\">\r\n\r\n            </div>\r\n            <div class=\"col-sm-2\">\r\n\r\n            </div>\r\n            <div class=\"col-sm-2\">\r\n\r\n            </div>\r\n            <div class=\"col-sm-2\">\r\n\r\n            </div>\r\n            <div class=\"col-sm-2\">\r\n\r\n            </div>\r\n            <div class=\"col-sm-2\">\r\n              <a class=\"btn btn-danger btn-sm shiny\" (click)=\"clearMap()\">\r\n                Clear Map\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <br />\r\n          <div class=\"page-header position-relative\">\r\n            <div class=\"header-title\">\r\n              <h1>\r\n                <b>List of Selected Service Area Households</b>\r\n              </h1>\r\n            </div>\r\n          </div>\r\n\r\n          <br>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-4\">\r\n              <div class=\"form-group\">\r\n                <label for=\"nameofbusiness\" style=\"font-size:18px;\">Subscription Type:</label>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-4\">\r\n              <div class=\"form-group\">\r\n                <div class=\"radio\">\r\n                  <label>\r\n                    <input name=\"form-field-radio\" type=\"radio\" name=\"type\" value=\"perLead\" class=\"colored-success\"\r\n                      [(ngModel)]=\"typeOfSubscription\" [ngModelOptions]=\"{standalone: true}\"\r\n                      (change)=\"toggleType(typeOfSubscription)\">\r\n                    <span class=\"text\"> Per Lead</span>\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- <div class=\"col-sm-4\">\r\n                <div class=\"form-group\">\r\n                  <div class=\"radio\">\r\n                    <label>\r\n                      <input name=\"form-field-radio\" type=\"radio\" name=\"type\" value=\"monthly\"\r\n                        class=\"colored-success\" [(ngModel)]=\"typeOfSubscription\"\r\n                        (change)=\"toggleType(typeOfSubscription)\">\r\n                      <span class=\"text\"> Monthly</span>\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n              </div> -->\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-8\">\r\n              <div class=\"form-group\">\r\n                <label for=\"nameofbusiness\" style=\"color:blue;font-size:18px;\">Click on Map to Select Additional\r\n                  Counties</label>\r\n\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-4\">\r\n            </div>\r\n          </div>\r\n\r\n          <br>\r\n          <div class=\"row\">\r\n\r\n            <div class=\"col-sm-8\">\r\n              <div class=\"form-group\">\r\n                <label for=\"nameofbusiness\" style=\"color:blue;font-size:18px;\">Click on the County Name to Select\r\n                  Service Zipcodes\r\n                  list</label>\r\n\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-4\">\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-xs-12 col-md-12\">\r\n              <div class=\"widget-body\">\r\n                <div class=\"flip-scroll\">\r\n                  <table class=\"table table-bordered table-striped table-condensed flip-content\">\r\n                    <thead class=\"flip-content bordered-palegreen\">\r\n                      <tr>\r\n                        <th style=\"width: 8%;\">\r\n                          County\r\n                        </th>\r\n                        <th style=\"width: 4%;\">\r\n                          State\r\n                        </th>\r\n                        <th *ngIf=\"typeOfSubscription=='monthly'\">\r\n                          Households\r\n                        </th>\r\n                        <th style=\"width: 15%;\">\r\n                          Category\r\n                        </th>\r\n                        <th style=\"width: 35%;\">\r\n                          Sub Category\r\n                        </th>\r\n                        <th *ngIf=\"typeOfSubscription=='monthly'\">\r\n                          Monthly Subscription Fee\r\n                        </th>\r\n                        <th *ngIf=\"typeOfSubscription=='perLead'\" style=\"width:8%;\">\r\n                          Per Lead Fees\r\n                        </th>\r\n                        <th *ngIf=\"typeOfSubscription=='monthly'\">\r\n                          Total\r\n                        </th>\r\n                        <th style=\"width: 5%;\">\r\n                          Delete\r\n                        </th>\r\n                        <!-- <th>\r\n                            Add Category\r\n                          </th> -->\r\n                      </tr>\r\n                    </thead>\r\n                    <ng-container *ngIf=\"countyStatus\">\r\n                      <tbody>\r\n                        <ng-container *ngFor=\"let data of countyList\">\r\n                          <tr>\r\n                            <td style=\"width:18%\"><a data-toggle=\"modal\" data-target=\".bs-example-modal-lg\"\r\n                                (click)=\"getZipcodesFromCountyData(data,data.stateCode,'view')\">{{data.county}}</a></td>\r\n                            <td>{{data.state}}</td>\r\n                            <td *ngIf=\"typeOfSubscription=='monthly'\">{{data.households}}</td>\r\n                            <td style=\"width:20%\">\r\n                              <table>\r\n                                <ng-container *ngIf=\"typeOfSubscription=='monthly'\">\r\n                                  <tr *ngFor=\"let categoryData of data.category\">\r\n                                    <td>\r\n                                      <div style=\"overflow:auto;width:100%;height:100px\">\r\n                                        <div>\r\n                                          <div style=\"float:left;width:60%;\">\r\n                                            <label>\r\n                                              <input type=\"checkbox\" [(ngModel)]=\"categoryData.checkedNew\"\r\n                                                (ngModelChange)=\"changeCategoryService(data,categoryData)\">\r\n                                              <span class=\"text\">{{categoryData.serviceName}}</span>\r\n                                            </label>\r\n                                          </div>\r\n                                          <div style=\"float:right;width:40%;\">\r\n                                            <span>&nbsp;</span>\r\n                                          </div>\r\n                                        </div>\r\n                                      </div>\r\n                                    </td>\r\n                                  </tr>\r\n                                </ng-container>\r\n                                <ng-container *ngIf=\"typeOfSubscription=='perLead'\">\r\n                                  <tr *ngFor=\"let categoryData of data.subCategoriesListPerLead\">\r\n                                    <td>\r\n                                      <div\r\n                                        style=\"overflow:auto;width:100%;height:100px;border-bottom: 1px solid black;\">\r\n                                        <div>\r\n                                          <div style=\"float:left;width:60%;\">\r\n                                            <label>\r\n                                              <input type=\"checkbox\" [ngModelOptions]=\"{standalone: true}\"\r\n                                                [(ngModel)]=\"categoryData.checkedNewLead\"\r\n                                                [disabled]=\"categoryData.allowCatCheck\"\r\n                                                (ngModelChange)=\"changeCategoryServiceLead(data,categoryData)\">\r\n                                              <span class=\"text\">{{categoryData.serviceName}}</span>\r\n                                            </label>\r\n                                          </div>\r\n                                          <div style=\"float:right;width:15%;\">\r\n                                            <span>&nbsp;</span>\r\n                                          </div>\r\n                                        </div>\r\n                                      </div>\r\n                                    </td>\r\n                                  </tr>\r\n                                </ng-container>\r\n\r\n                              </table>\r\n                            </td>\r\n                            <td colspan=\"2\" *ngIf=\"typeOfSubscription=='monthly'\">\r\n                              <table>\r\n                                <ng-container *ngFor=\"let categoryData of data.category\">\r\n                                  <ng-container>\r\n                                    <tr>\r\n                                      <td>\r\n                                        <div\r\n                                          style=\"overflow:auto;width:100%;height:100px; border-bottom: 1px solid black;\">\r\n                                          <div>\r\n                                            <ng-container\r\n                                              *ngFor=\"let categoryDataSub of categoryData.serviceCategories\">\r\n                                              <div style=\"float:left;width:60%;\">\r\n                                                <label>\r\n                                                  <input type=\"checkbox\" [(ngModel)]=\"categoryDataSub.checkedNew\"\r\n                                                    (ngModelChange)=\"changeSubCategoryService(data,categoryDataSub)\">\r\n                                                  <span class=\"text\">{{categoryDataSub.subcategoryName}}</span>\r\n                                                </label>\r\n                                              </div>\r\n                                              <div style=\"float:right;width:40%;\">\r\n                                                <span>$&nbsp;{{categoryDataSub.estimatedCost}}</span>\r\n                                              </div>\r\n                                            </ng-container>\r\n                                          </div>\r\n                                        </div>\r\n                                      </td>\r\n                                    </tr>\r\n                                  </ng-container>\r\n                                </ng-container>\r\n                              </table>\r\n                            </td>\r\n                            <td *ngIf=\"typeOfSubscription=='monthly'\">\r\n                              $ {{data.totalEstimatedCost}}\r\n                            </td>\r\n                            <td colspan=\"2\" *ngIf=\"typeOfSubscription=='perLead'\">\r\n                              <table>\r\n                                <ng-container *ngFor=\"let categoryData of data.subCategoriesListPerLead\">\r\n                                  <ng-container>\r\n                                    <tr>\r\n                                      <td>\r\n                                        <div\r\n                                          style=\"overflow:auto;width:100%;height:100px; border-bottom: 1px solid black;\">\r\n                                          <div>\r\n                                            <ng-container\r\n                                              *ngFor=\"let categoryDataSub of categoryData.serviceCategories\">\r\n                                              <div style=\"float:left;width:60%;\">\r\n                                                <label>\r\n                                                  <input type=\"checkbox\" [ngModelOptions]=\"{standalone: true}\"\r\n                                                    [(ngModel)]=\"categoryDataSub.checkedNewLead\"\r\n                                                    [disabled]=\"categoryDataSub.allowCheck\"\r\n                                                    (ngModelChange)=\"changeSubCategoryServiceLead(data,categoryDataSub)\">\r\n                                                  <span class=\"text\">{{categoryDataSub.subcategoryName}}</span>\r\n                                                </label>\r\n                                              </div>\r\n                                              <div style=\"float:right;width:10%;\">\r\n                                                <span\r\n                                                  *ngIf=\"!categoryDataSub.allowCheck\">$&nbsp;{{categoryDataSub.perLeadCost}}</span>\r\n                                                <span\r\n                                                  *ngIf=\"categoryDataSub.allowCheck\">&nbsp;{{categoryDataSub.perLeadCost}}</span>\r\n                                              </div>\r\n                                            </ng-container>\r\n                                          </div>\r\n                                        </div>\r\n                                      </td>\r\n                                    </tr>\r\n                                  </ng-container>\r\n                                </ng-container>\r\n                              </table>\r\n                            </td>\r\n                            <td>\r\n                              <a class=\"btn btn-danger btn-sm shiny\" (click)=\"deleteCounty(data)\">\r\n                                <i class=\"fa fa-trash-o\"></i>\r\n                              </a>\r\n                            </td>\r\n                            <!-- <td>\r\n                                <a class=\"btn btn-info btn-sm shiny\" (click)=\"comingSoonAddCategory()\">\r\n                                  <i class=\"fa fa-plus\"></i>\r\n                                </a>\r\n                              </td> -->\r\n                          </tr>\r\n                        </ng-container>\r\n                      </tbody>\r\n                    </ng-container>\r\n                  </table>\r\n                  <ng-container *ngIf=\"!countyStatus\">\r\n                    NO RECORDS FOUND\r\n                  </ng-container>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <br>\r\n          <div class=\"row\">\r\n\r\n            <div class=\"col-sm-4\">\r\n            </div>\r\n\r\n            <div class=\"col-sm-4\">\r\n              <input type=\"button\" class=\"btn btn-azure shiny btn-block\" value=\"+ Add Trade License\" id=\"add-more\"\r\n                data-toggle=\"modal\" data-target=\".bs-example-modal-sm\">\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <div class=\"form-group\">\r\n                <hr class=\"hr-gray\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- <div class=\"form-title\">\r\n            <b>Payment Info</b>\r\n          </div> -->\r\n\r\n          <!-- <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"companyProfileDesc\">Credit Card Type <span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <select class=\"form-control\" name=\"status\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f.creditCardNumber.errors }\"\r\n                    formControlName=\"creditCardType\" required>\r\n                    <option value=\"\">--Select Credit Card Type--</option>\r\n                    <option value=\"Master\">Master</option>\r\n                    <option value=\"Visa\">Visa</option>\r\n                    <option value=\"Amercian Express\">Amercian Express</option>\r\n                    <option value=\"Discover Network\">Discover Network</option>\r\n                  </select>\r\n                  <div *ngIf=\"submitted && f.creditCardType.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.creditCardType.errors.required\">\r\n                      <p style=\"color: red; font-size: 11px\">* Required Credit Card Type</p>\r\n                    </div>\r\n                  </div>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"companyProfileDesc\">Credit Card Number<span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" placeholder=\"Enter Credit Card Number\"\r\n                    formControlName=\"creditCardNumber\" required [dropSpecialCharacters]=\"false\"\r\n                    mask=\"0000-0000-0000-0000\" [ngClass]=\"{ 'is-invalid': submitted && f.creditCardNumber.errors }\">\r\n                  <i class=\"fa fa-file\"></i>\r\n                </span>\r\n                <div *ngIf=\"submitted && f.creditCardNumber.errors\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"f.creditCardNumber.errors.required\">\r\n                    <p style=\"color: red; font-size: 11px\">* Required Credit Card Number</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div> -->\r\n          <!-- <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"companyProfileDesc\">CVV Number <span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" id=\"ccvNumber\" placeholder=\"Enter CVV Number\"\r\n                    [dropSpecialCharacters]=\"false\" mask=\"000\" formControlName=\"ccvNumber\" required\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f.ccvNumber.errors }\">\r\n                  <i class=\"fa fa-file\"></i>\r\n                </span>\r\n                <div *ngIf=\"submitted && f.ccvNumber.errors\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"f.ccvNumber.errors.required\">\r\n                    <p style=\"color: red; font-size: 11px\">* Required CVV Number</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <div class=\"col-sm-12\">\r\n                  <label for=\"companyProfileDesc\">Expires On<span class=\"mandatory\">*</span></label>\r\n                </div>\r\n                <div class=\"col-sm-6\">\r\n                  <select class=\"form-control\" name=\"status\" data-bv-field=\"row-title\" formControlName=\"selectMonth\"\r\n                    required [ngClass]=\"{ 'is-invalid': submitted && f.selectMonth.errors }\">\r\n                    <option value=\"\">--Select Month--</option>\r\n                    <option value=\"JAN\">JAN</option>\r\n                    <option value=\"FEB\">FEB</option>\r\n                    <option value=\"MAR\">MAR</option>\r\n                    <option value=\"APR\">APR</option>\r\n                    <option value=\"MAY\">MAY</option>\r\n                    <option value=\"JUN\">JUN</option>\r\n                    <option value=\"JUL\">JUL</option>\r\n                    <option value=\"AUG\">AUG</option>\r\n                    <option value=\"SEP\">SEP</option>\r\n                    <option value=\"OCT\">OCT</option>\r\n                    <option value=\"NOV\">NOV</option>\r\n                    <option value=\"DEC\">DEC</option>\r\n                  </select>\r\n                  <div *ngIf=\"submitted && f.selectMonth.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.selectMonth.errors.required\">\r\n                      <p style=\"color: red; font-size: 11px\">* Select Month</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"col-sm-6\">\r\n                  <select class=\"form-control\" name=\"status\" data-bv-field=\"row-title\" formControlName=\"selectYear\"\r\n                    required [ngClass]=\"{ 'is-invalid': submitted && f.selectYear.errors }\">\r\n                    <option value=\"\">--Select Year--</option>\r\n                    <option value=\"2030\">2030</option>\r\n                    <option value=\"2029\">2029</option>\r\n                    <option value=\"2028\">2028</option>\r\n                    <option value=\"2027\">2027</option>\r\n                    <option value=\"2026\">2026</option>\r\n                    <option value=\"2025\">2025</option>\r\n                    <option value=\"2024\">2024</option>\r\n                    <option value=\"2023\">2023</option>\r\n                    <option value=\"2022\">2022</option>\r\n                    <option value=\"2021\">2021</option>\r\n                    <option value=\"2020\">2020</option>\r\n                    <option value=\"2019\">2019</option>\r\n                  </select>\r\n                  <div *ngIf=\"submitted && f.selectYear.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.selectYear.errors.required\">\r\n                      <p style=\"color: red; font-size: 11px\">* Select Year</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"businessAddressLine1\">Address<span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" placeholder=\"Enter Business Address\"\r\n                    formControlName=\"cardBusinessAddressLine1\" required\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f.cardBusinessAddressLine1.errors }\">\r\n                  <i class=\"fa fa-envelope\"></i>\r\n                </span>\r\n                <div *ngIf=\"submitted && f.cardBusinessAddressLine1.errors\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"f.cardBusinessAddressLine1.errors.required\">\r\n                    <p style=\"color: red; font-size: 11px\">* Select Year</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"state\">State<span class=\"mandatory\">*</span></label>\r\n                <select class=\"form-control\" name=\"status\" data-bv-field=\"row-title\" formControlName=\"cardState\"\r\n                  required [ngClass]=\"{ 'is-invalid': submitted && f.cardState.errors }\">\r\n                  <option value=\"\">Select</option>\r\n                  <option *ngFor=\"let data of statesData\" value={{data.stateCode}}>\r\n                    {{data.stateName}}\r\n                  </option>\r\n                </select>\r\n                <div *ngIf=\"submitted && f.cardState.errors\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"f.cardState.errors.required\">\r\n                    <p style=\"color: red; font-size: 11px\">* Select State</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"city\">City<span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" placeholder=\"Enter City\" formControlName=\"cardCity\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f.cardCity.errors }\" required>\r\n                  <i class=\"fa fa-envelope\"></i>\r\n                </span>\r\n                <div *ngIf=\"submitted && f.cardCity.errors\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"f.cardCity.errors.required\">\r\n                    <p style=\"color: red; font-size: 11px\">* Select City</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"zipCode\">Zipcode<span class=\"mandatory\">*</span></label>\r\n                <span class=\"input-icon icon-right\">\r\n                  <input type=\"text\" class=\"form-control\" placeholder=\"Enter Zipcode\" formControlName=\"cardZipCode\"\r\n                    minlength=\"5\" maxlength=\"6\" required [ngClass]=\"{ 'is-invalid': submitted && f.zipCode.errors }\">\r\n                  <i class=\"fa fa-map-marker\"></i>\r\n                </span>\r\n                <div *ngIf=\"submitted && f.cardZipCode.errors\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"f.cardZipCode.errors.required\">\r\n                    <p style=\"color: red;font-size: 11px\">* Required ZipCode </p>\r\n\r\n                  </div>\r\n                  <div *ngIf=\"f.cardZipCode.errors.minlength\" style=\"color:red;font-size: 11px\">Invalid Zip Code\r\n                    (5-6 digits)\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div> -->\r\n\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <div class=\"form-group\">\r\n                <hr class=\"hr-blue\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-2\">\r\n              <div class=\"form-group\"></div>\r\n            </div>\r\n            <div class=\"col-sm-4\">\r\n              <div class=\"form-group\">\r\n                <input type=\"submit\" class=\"btn btn-success shiny btn-block\" value=\"Save Profile\">\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-4\">\r\n              <div class=\"form-group\">\r\n                <input type=\"button\" class=\"btn btn-danger shiny btn-block\" value=\"Cancel\" (click)=\"cancel()\">\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-2\">\r\n              <div class=\"form-group\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- /Page Body -->\r\n</div>\r\n<!-- /Page Content -->\r\n\r\n\r\n<div class=\"modal fade bs-example-modal-lg\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n  aria-hidden=\"true\" style=\"display: none;\">\r\n  <div class=\"modal-dialog modal-lg\">\r\n    <div class=\"modal-content\">\r\n\r\n      <div class=\"modal-header\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"clearZips()\">×</button>\r\n        <h4 class=\"modal-title\" id=\"myLargeModalLabel\">Zipcodes</h4>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div style=\"overflow:auto;width:100%;\">\r\n          <table class=\"table table-bordered table-striped table-condensed flip-content\">\r\n            <thead class=\"flip-content bordered-palegreen\">\r\n              <tr>\r\n                <th>\r\n                  <label>\r\n                    <input type=\"checkbox\" [(ngModel)]=\"selectAllZipcodesVar\"\r\n                      (ngModelChange)=\"selectAllZipcodes(selectAllZipcodesVar)\">\r\n                    <span class=\"text\"></span>\r\n                  </label>\r\n                </th>\r\n                <th>\r\n                  Zipcode\r\n                </th>\r\n                <th *ngIf=\"typeOfSubscription=='monthly'\">\r\n                  Households\r\n                </th>\r\n                <th>\r\n                  Country\r\n                </th>\r\n                <th>\r\n                  City\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr *ngFor=\"let data of displayZipcodes\">\r\n                <td> <label>\r\n                    <input type=\"checkbox\" [(ngModel)]=\"data.checked\" (change)=\"zipcodesSelection(data)\">\r\n                    <span class=\"text\"></span>\r\n                  </label></td>\r\n                <td>{{data.zipcode}}</td>\r\n                <td *ngIf=\"typeOfSubscription=='monthly'\">{{data.households}}</td>\r\n                <td>{{data.county}}</td>\r\n                <td>{{data.city}}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          <br>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <pagination-controls class=\"span10\" style=\"float:left\" (pageChange)=\"p = $event\"></pagination-controls>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <span style=\"float: left\">\r\n          {{displayZipcodes.length}} Zipcode Records Found\r\n        </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n        <br>\r\n        <span style=\"float: left;color:red\" *ngIf=\"zipcodeValidation\">\r\n          <b>Please Select Atleast One Zipcode </b>\r\n        </span>\r\n        <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"zipcodeValidation||zipcodeValidationEmpty\"\r\n          (click)=\"insertCountiesZipcodeBatch(displayZipcodes[0].county)\" data-dismiss=\"modal\">Save</button>\r\n        <button type=\"button\" class=\"btn btn-warning\" data-dismiss=\"modal\" (click)=\"clearZips()\">Cancel</button>\r\n      </div>\r\n    </div><!-- /.modal-content -->\r\n  </div><!-- /.modal-dialog -->\r\n</div>\r\n\r\n\r\n<div style=\"width:100%\" class=\"modal fade bs-example-modal-sm\" tabindex=\"-1\" role=\"dialog\"\r\n  aria-labelledby=\"myLargeModalLabelTrade\" aria-hidden=\"true\" style=\"display: none;\">\r\n  <div class=\"modal-dialog modal-lg\">\r\n    <div class=\"modal-content\">\r\n\r\n      <div class=\"modal-header\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\r\n        <h4 class=\"modal-title\" id=\"myLargeModalLabelTrade\">Trade License Details</h4>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div style=\"width:100%;height:200px;\">\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <form>\r\n                <ng-container>\r\n                  <div id=\"field\" *ngFor=\"let list of tradeLicenseList;\">\r\n                    <div id=\"field0\">\r\n                      <div class=\"row\">\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"stateRegistred\">State Registered In?<span class=\"mandatory\">*</span></label>\r\n                            <select class=\"form-control\" id=\"stateRegistred\" name=\"status\" data-bv-field=\"row-title\"\r\n                              [(ngModel)]=\"list.stateRegisteredIn\" [ngModelOptions]=\"{standalone: true}\"\r\n                              (change)=\"checkValidationTrade()\">\r\n                              <option value=\"\">Select</option>\r\n                              <option *ngFor=\"let data of statesData\" value={{data.stateName}}>\r\n                                {{data.stateName}}\r\n                              </option>\r\n                            </select>\r\n\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"tradeLicense1\">Trade License Category<span class=\"mandatory\">*</span></label>\r\n                            <select class=\"form-control\" id=\"tradeLicense1\" name=\"status\" data-bv-field=\"row-title\"\r\n                              [(ngModel)]=\"list.tradeLicense\" [ngModelOptions]=\"{standalone: true}\"\r\n                              (change)=\"checkValidationTrade()\">\r\n                              <option value=\"\">Select</option>\r\n                              <option *ngFor=\"let data of categoriesData\" value={{data.cat_code}}>\r\n                                {{data.categoryName}}\r\n                              </option>\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-2\">\r\n\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"row\">\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"tradeLicense1N\">Trade License #<span class=\"mandatory\">*</span> </label>\r\n                            <span class=\"input-icon icon-right\">\r\n                              <input type=\"text\" class=\"form-control\" id=\"tradeLicense1N\"\r\n                                [(ngModel)]=\"list.tradeLicenseNumber\" [ngModelOptions]=\"{standalone: true}\"\r\n                                placeholder=\"Enter Trade License #\" (change)=\"checkValidationTrade()\">\r\n                              <i class=\"fa fa-file\"></i>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"tradeLicense1Exp\">Trade License Expiration<span\r\n                                class=\"mandatory\">*</span></label>\r\n                            <span class=\"input-icon icon-right\">\r\n                              <input type=\"date\" class=\"form-control\" id=\"tradeLicense1Exp\" placeholder=\"DD/MM/YYYY\"\r\n                                [(ngModel)]=\"list.tradeLicenseExpiration\" [ngModelOptions]=\"{standalone: true}\"\r\n                                (change)=\"checkValidationTrade()\">\r\n                              <i class=\"fa fa-calendar\"></i>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-2\">\r\n\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </ng-container>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <input type=\"button\" [disabled]=\"tradeStatusCheck\" class=\"btn btn-azure shiny btn-block\" value=\"+Submit\"\r\n                id=\"add-more\" data-dismiss=\"modal\" (click)=\"addTradeLicenseNew()\">\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div><!-- /.modal-content -->\r\n  </div><!-- /.modal-dialog -->\r\n</div>\r\n\r\n\r\n<div id=\"modal-success\" class=\"modal modal-message modal-success fade\" style=\"display: none;\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <i class=\"glyphicon glyphicon-check\"></i>\r\n      </div>\r\n      <div class=\"modal-title\">Alert</div>\r\n\r\n      <div class=\"modal-body\">Are you sure do you want to delete the license?</div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-success\" data-dismiss=\"modal\" (click)=\"deleteFieldValue()\">Yes</button>\r\n        <button type=\"button\" class=\"btn btn-success\" data-dismiss=\"modal\">No</button>\r\n      </div>\r\n    </div> <!-- / .modal-content -->\r\n  </div> <!-- / .modal-dialog -->\r\n</div>\r\n\r\n  <!-- Verify Button - Popup when Verification Code is coming -->\r\n\r\n  <div style=\"width:100%;margin-top: 3em\">\r\n    <div class=\"backdrop\" [ngStyle]=\"{'display':displayFileModalgroup}\"></div>\r\n    <div class=\"modal\" tabindex=\"-1\" role=\"dialog\" [ngStyle]=\"{'display':displayFileModalgroup}\"\r\n      style=\"width: 100em\">\r\n      <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n  \r\n            <div class=\"widget-header blue\">\r\n              <span class=\"widget-caption\" style=\"font-size:0.9em;\"><b>Business Phone Number Verification Code</b></span>\r\n            </div>\r\n            <h5 style=\"margin-left: 2em;\">Your Mobile Code is : {{mobileOtp}}</h5>\r\n            <div class=\"modal-body\" style=\"font-size:0.9em;\">\r\n              <input type=\"text\" class=\"form-control\" id=\"firstname\" placeholder=\"Verify code\"  [(ngModel)]=\"res\" (ngModelChange)=\"verifyotpDataaa(res)\" [dropSpecialCharacters]=\"false\"\r\n              mask=\"0000\">\r\n              <span *ngIf=\"Reason\" style=\"color:red\"> Enter Verify Code</span>\r\n              <span *ngIf=\"wrongOtp\" style=\"color:red\">Wrong Otp</span>\r\n              \r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\" >\r\n            <div class=\"col-lg-2 col-sm-2 col-xs-2\">\r\n            </div>\r\n            <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n              <button type=\"button\" class=\"btn btn-azure shiny btn-block\" data-dismiss=\"modal\" (click)=\"onEditnumber(res)\">Yes</button>\r\n            </div>\r\n            <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n              <button type=\"button\" class=\"btn btn-azure shiny btn-block\" data-dismiss=\"modal\" (click)=\"onCloseHandledNumber()\">No</button>\r\n            </div>\r\n            <div class=\"col-lg-2 col-sm-2 col-xs-2\">\r\n            </div>\r\n           \r\n          </div>\r\n        </div> <!-- / .modal-content -->\r\n      </div> <!-- / .modal-dialog -->\r\n    </div>\r\n  </div>\r\n  <!-- /Verify Button - Popup when Verification Code is coming   -->"

/***/ }),

/***/ "./src/app/proz-profile/pro-edit-my-profile/pro-edit-my-profile.component.scss":
/*!*************************************************************************************!*\
  !*** ./src/app/proz-profile/pro-edit-my-profile/pro-edit-my-profile.component.scss ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".map {\n  width: 100%;\n  height: 400px; }\n\n.static {\n  color: red;\n  font-weight: bold; }\n\n.login-container {\n  position: relative;\n  margin: 3% auto;\n  max-width: 100%; }\n\n.login-container .loginbox {\n  position: relative;\n  width: 100% !important;\n  height: auto !important;\n  padding: 0 0 0px 0;\n  box-shadow: 0 0 14px rgba(0, 0, 0, 0.1); }\n\n.login-container .loginbox .loginbox-social .social-buttons .button-facebook {\n  float: left;\n  border: 2px solid #3b5998;\n  color: #3b5998;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  margin-right: 40%;\n  background-color: #fff; }\n\n.login-container .loginbox .loginbox-social .social-buttons .button-twitter {\n  float: left;\n  border: 2px solid #29c1f6;\n  color: #29c1f6;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  margin-right: 35%;\n  background-color: #fff; }\n\n.login-container .loginbox .loginbox-social .social-buttons .button-google {\n  float: right;\n  border: 2px solid #ef4f1d;\n  color: #ef4f1d;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  background-color: #fff; }\n\n.loginbox-social {\n  padding: 0 0 0 0 !important; }\n\n.loginbox-title {\n  font-weight: bold !important;\n  font-size: 25px !important; }\n\nlabel {\n  font-weight: bold !important; }\n\nlabel .mandatory {\n  color: red;\n  font-size: 16px !important;\n  font-weight: bold !important; }\n\n.hr-blue-title {\n  border-top: 3px solid #5DB2FF !important; }\n\n.hr-blue {\n  border-top: 1px solid #5DB2FF !important; }\n\n.logoImage {\n  width: 100px;\n  height: 100px;\n  margin-top: 5px;\n  border-width: 1px;\n  border-color: #5DB2FF;\n  border-style: solid; }\n\n.aggregateRating {\n  color: #bc5679;\n  font-size: 14px !important;\n  font-weight: bold !important; }\n\n.aggregateRating span {\n  color: green;\n  font-size: 14px !important;\n  font-weight: bold !important; }\n\n.totalcost {\n  color: #bc5679;\n  font-size: 14px !important;\n  font-weight: bold !important;\n  margin-right: auto !important;\n  margin-left: auto !important; }\n\n.totalcost span {\n  color: green;\n  font-size: 14px !important;\n  font-weight: bold !important; }\n\n.well {\n  margin-bottom: 0 !important;\n  padding: 0 10px !important; }\n\n.well.with-footer {\n  padding-bottom: 10px !important; }\n\n.well.with-header {\n  padding-top: 10px !important; }\n\n.btn {\n  font-size: 14px !important;\n  font-weight: bold !important; }\n\n.form-title {\n  display: block;\n  padding: 8px 0;\n  border-bottom: 1px dashed #5DB2FF;\n  font-size: 15px;\n  font-weight: bold;\n  color: #5DB2FF;\n  margin-bottom: 15px; }\n\n.controlsMap:focus {\n  border-color: #4d90fe; }\n\n.title {\n  font-weight: bold; }\n\n#infowindow-content {\n  display: none; }\n\n#map #infowindow-content {\n  display: inline; }\n\n.controlsMap {\n  background-color: #fff;\n  border-radius: 2px;\n  border: 1px solid transparent;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n  box-sizing: border-box;\n  font-family: Roboto;\n  font-size: 15px;\n  font-weight: 300;\n  height: 29px;\n  margin-left: 17px;\n  margin-top: 10px;\n  outline: none;\n  padding: 0 11px 0 13px;\n  text-overflow: ellipsis;\n  width: 400px; }\n\n.gap {\n  margin: 5px 0px; }\n\n.form-title {\n  color: #5db2ff;\n  border-bottom: 1px dashed #5db2ff;\n  /*display: block;\r\n        padding: 8px 0;\r\n        border-bottom: 1px dashed #7e3794;*/\n  font-size: 15px;\n  font-weight: bold;\n  /*  color: #5DB2FF;\r\n       margin-bottom: 15px;*/ }\n\n.mandatory {\n  font-weight: bold;\n  color: #FF0000;\n  font-size: 16px; }\n\n.hr-gray-thick {\n  border-top: 3px solid #333 !important; }\n\n.hr-gray {\n  border-top: 1px solid #333 !important; }\n\ninput {\n  color: black; }\n\n.mock {\n  color: red;\n  text-align: center; }\n\n.mock-conf {\n  color: green;\n  text-align: center; }\n\n.inprogress {\n  color: orangered;\n  text-align: center; }\n\n.three-bordered {\n  border-left: 1px solid #333;\n  border-right: 1px solid #333;\n  border-bottom: 1px solid #333;\n  /* border-left: 3px solid #7e3794;*/ }\n\n.text-center {\n  text-align: center; }\n\n.checkbox-center {\n  position: relative;\n  display: block;\n  margin-top: 0px;\n  margin-bottom: 0px;\n  text-align: center; }\n\n.gray {\n  background-color: #333 !important;\n  color: #5db2ff !important; }\n\n.btn-gray {\n  background-color: #333 !important;\n  color: #5db2ff !important; }\n\n.btn-blue {\n  color: #333 !important;\n  background-color: #5db2ff !important; }\n\n.accordion.panel-group .panel-heading .accordion-toggle.collapsed {\n  color: #5db2ff !important;\n  background-color: #333 !important;\n  border-bottom: 1px solid #5db2ff !important; }\n\n.accordion.panel-group .panel-heading .accordion-toggle:hover:after {\n  color: #FFF !important; }\n\n.accordion.panel-group .panel-heading .accordion-toggle {\n  color: #5db2ff !important;\n  background-color: #333 !important;\n  border-bottom: 1px solid #5db2ff !important; }\n\n.accordion.panel-group .panel-heading .accordion-toggle:after {\n  color: #5db2ff !important; }\n\n.static {\n  color: red;\n  font-weight: bold; }\n\n.status-active {\n  color: #00FF00;\n  font-weight: bold; }\n\n.status-inactive {\n  color: #FF0000;\n  font-weight: bold; }\n\n.inprogress {\n  color: orangered;\n  text-align: center; }\n\n.three-bordered {\n  border-left: 1px solid #333;\n  border-right: 1px solid #333;\n  border-bottom: 1px solid #333;\n  /* border-left: 3px solid #7e3794;*/ }\n\n.gray {\n  background-color: #333 !important;\n  color: #5db2ff !important; }\n\n/* LIST MODE */\n\n.center {\n  text-align: center; }\n\n.item {\n  text-align: center; }\n\n/* /LIST MODE */\n\n/* VIEW MODE */\n\n.form-title {\n  color: #5DB2FF;\n  /*display: block;\r\n        padding: 8px 0;*/\n  border-bottom: 1px dashed #5DB2FF;\n  font-size: 15px;\n  font-weight: bold;\n  /*  color: #5DB2FF;\r\n       margin-bottom: 15px;*/ }\n\n.mandatory {\n  font-weight: bold;\n  color: #FF0000;\n  font-size: 16px; }\n\n.hr-gray {\n  border-top: 1px solid #333 !important; }\n\n.button-center {\n  text-align: center; }\n\ninput {\n  color: black; }\n\n.mock {\n  color: red;\n  text-align: center; }\n\n.mock-conf {\n  color: green;\n  text-align: center; }\n\n.inprogress {\n  color: orangered;\n  text-align: center; }\n\n.three-bordered {\n  border-left: 1px solid #333;\n  border-right: 1px solid #333;\n  border-bottom: 1px solid #333;\n  /* border-left: 3px solid #7e3794;*/ }\n\n.text-center {\n  text-align: center; }\n\n.checkbox-center {\n  position: relative;\n  display: block;\n  margin-top: 0px;\n  margin-bottom: 0px;\n  text-align: center; }\n\n.gray {\n  background-color: #333 !important;\n  color: #5db2ff !important; }\n\n.blue {\n  background-color: #5db2ff !important;\n  color: #333 !important;\n  font-weight: bold; }\n\n.btn-gray {\n  background-color: #333 !important;\n  color: #5db2ff !important; }\n\n.btn-blue {\n  color: #333 !important;\n  background-color: #5db2ff !important; }\n\n.modal-header {\n  padding: 0px 0px 0px 0px !important; }\n\n.well.with-footer {\n  padding-bottom: 10px !important; }\n\n/* /VIEW MODE */\n\n.static {\n  color: red;\n  font-weight: bold; }\n\n.noRecords {\n  color: blue;\n  font-weight: bold;\n  font-size: 12px; }\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcHJvei1wcm9maWxlL3Byby1lZGl0LW15LXByb2ZpbGUvRDpcXFRvcHByb3pcXFRvcFByb3pfQWR2YW5jZV9DbGllbnQvc3JjXFxhcHBcXHByb3otcHJvZmlsZVxccHJvLWVkaXQtbXktcHJvZmlsZVxccHJvLWVkaXQtbXktcHJvZmlsZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFPLFlBQVc7RUFBRSxjQUFhLEVBQUk7O0FBRXJDO0VBQ0ssV0FBUztFQUNULGtCQUFpQixFQUNwQjs7QUFFRDtFQUNHLG1CQUFrQjtFQUNsQixnQkFBZTtFQUNmLGdCQUFlLEVBQ2xCOztBQUVEO0VBQ0ksbUJBQWtCO0VBQ2xCLHVCQUFzQjtFQUN0Qix3QkFBdUI7RUFDdkIsbUJBQWtCO0VBR2xCLHdDQUFtQyxFQUN0Qzs7QUFFRDtFQUNJLFlBQVc7RUFDWCwwQkFBeUI7RUFDekIsZUFBYztFQUNkLG1CQUFrQjtFQUNsQixZQUFXO0VBQ1gsYUFBWTtFQUNaLGtCQUFpQjtFQUNqQix1QkFBc0IsRUFDekI7O0FBRUQ7RUFDSSxZQUFXO0VBQ1gsMEJBQXlCO0VBQ3pCLGVBQWM7RUFDZCxtQkFBa0I7RUFDbEIsWUFBVztFQUNYLGFBQVk7RUFDWixrQkFBaUI7RUFDakIsdUJBQXNCLEVBQ3pCOztBQUVEO0VBQ0ksYUFBWTtFQUNaLDBCQUF5QjtFQUN6QixlQUFjO0VBQ2QsbUJBQWtCO0VBQ2xCLFlBQVc7RUFDWCxhQUFZO0VBQ1osdUJBQXNCLEVBQ3pCOztBQUdBO0VBQ0csNEJBQTJCLEVBQzlCOztBQUVEO0VBQ0ksNkJBQTRCO0VBQzVCLDJCQUEwQixFQUM3Qjs7QUFFRDtFQUNJLDZCQUEyQixFQUM5Qjs7QUFFRDtFQUNJLFdBQVM7RUFDVCwyQkFBMEI7RUFDMUIsNkJBQTRCLEVBQy9COztBQUVEO0VBQ0kseUNBQXdDLEVBQzNDOztBQUVEO0VBQ0kseUNBQXdDLEVBQzNDOztBQUVEO0VBQ0ksYUFBVztFQUNYLGNBQVk7RUFDWixnQkFBYztFQUNkLGtCQUFpQjtFQUNqQixzQkFBcUI7RUFDckIsb0JBQW1CLEVBQ3RCOztBQUVEO0VBQ0ksZUFBYTtFQUNiLDJCQUEwQjtFQUMxQiw2QkFBNEIsRUFDL0I7O0FBRUQ7RUFDSSxhQUFZO0VBQ1osMkJBQTBCO0VBQzFCLDZCQUE0QixFQUMvQjs7QUFFRDtFQUNJLGVBQWE7RUFDYiwyQkFBMEI7RUFDMUIsNkJBQTRCO0VBQzVCLDhCQUE2QjtFQUM3Qiw2QkFBNEIsRUFDL0I7O0FBRUQ7RUFDSSxhQUFZO0VBQ1osMkJBQTBCO0VBQzFCLDZCQUE0QixFQUMvQjs7QUFFRDtFQUNJLDRCQUEyQjtFQUMzQiwyQkFBMEIsRUFDN0I7O0FBRUQ7RUFDSSxnQ0FBK0IsRUFDbEM7O0FBRUQ7RUFDSSw2QkFBNEIsRUFDL0I7O0FBRUQ7RUFDSSwyQkFBMEI7RUFDMUIsNkJBQTRCLEVBQy9COztBQUVEO0VBQ0ksZUFBYztFQUNkLGVBQWM7RUFDZCxrQ0FBaUM7RUFDakMsZ0JBQWU7RUFDZixrQkFBaUI7RUFDakIsZUFBYztFQUNkLG9CQUFtQixFQUN0Qjs7QUFDQztFQUNFLHNCQUFxQixFQUN0Qjs7QUFDRDtFQUNFLGtCQUFpQixFQUNsQjs7QUFDRDtFQUNFLGNBQWEsRUFDZDs7QUFDRDtFQUNFLGdCQUFlLEVBQ2hCOztBQUNEO0VBQ0UsdUJBQXNCO0VBQ3RCLG1CQUFrQjtFQUNsQiw4QkFBNkI7RUFDN0IseUNBQXdDO0VBQ3hDLHVCQUFzQjtFQUN0QixvQkFBbUI7RUFDbkIsZ0JBQWU7RUFDZixpQkFBZ0I7RUFDaEIsYUFBWTtFQUNaLGtCQUFpQjtFQUNqQixpQkFBZ0I7RUFDaEIsY0FBYTtFQUNiLHVCQUFzQjtFQUN0Qix3QkFBdUI7RUFDdkIsYUFBWSxFQUNiOztBQUVEO0VBQ0UsZ0JBQWUsRUFDZDs7QUFDRDtFQUNJLGVBQWU7RUFDZixrQ0FBaUM7RUFFakM7OzRDQUVvQztFQUNwQyxnQkFBZTtFQUNmLGtCQUFpQjtFQUNsQjs2QkFDc0IsRUFFeEI7O0FBRUQ7RUFDSSxrQkFBaUI7RUFDakIsZUFBYztFQUNkLGdCQUFlLEVBQ2xCOztBQUVEO0VBQ0ksc0NBQXFDLEVBQ3hDOztBQUVEO0VBQ0ksc0NBQXFDLEVBRXhDOztBQUVEO0VBQ0ksYUFBWSxFQUNmOztBQUVEO0VBQ0ksV0FBVTtFQUNWLG1CQUFrQixFQUNyQjs7QUFFRDtFQUNJLGFBQVk7RUFDWixtQkFBa0IsRUFDckI7O0FBRUQ7RUFDSSxpQkFBZ0I7RUFDaEIsbUJBQWtCLEVBQ3JCOztBQUVEO0VBQ0ksNEJBQTJCO0VBQzNCLDZCQUE0QjtFQUM1Qiw4QkFBNkI7RUFDOUIsb0NBQW9DLEVBQ3RDOztBQUVEO0VBQ0ksbUJBQWtCLEVBQ3JCOztBQUVEO0VBQ0ksbUJBQWtCO0VBQ2xCLGVBQWM7RUFDZCxnQkFBZTtFQUNmLG1CQUFrQjtFQUNsQixtQkFBa0IsRUFDckI7O0FBRUQ7RUFDSSxrQ0FBaUM7RUFDakMsMEJBQXlCLEVBQzVCOztBQUVEO0VBQ0ksa0NBQWlDO0VBQ2pDLDBCQUF5QixFQUM1Qjs7QUFFRDtFQUNJLHVCQUFzQjtFQUN0QixxQ0FBb0MsRUFDdkM7O0FBQ0Q7RUFDSSwwQkFBeUI7RUFDekIsa0NBQWlDO0VBQ2pDLDRDQUEyQyxFQUM5Qzs7QUFFRDtFQUNJLHVCQUFzQixFQUN6Qjs7QUFFRDtFQUNJLDBCQUF5QjtFQUN6QixrQ0FBaUM7RUFDakMsNENBQTJDLEVBQzlDOztBQUVEO0VBQ0ksMEJBQXlCLEVBQzVCOztBQUVEO0VBQ0ksV0FBUztFQUNULGtCQUFpQixFQUNwQjs7QUFDRDtFQUNJLGVBQWM7RUFDZCxrQkFBaUIsRUFDcEI7O0FBRUQ7RUFDSSxlQUFjO0VBQ2Qsa0JBQWlCLEVBQ3BCOztBQUVEO0VBQ0ksaUJBQWdCO0VBQ2hCLG1CQUFrQixFQUNyQjs7QUFFRDtFQUNJLDRCQUEyQjtFQUMzQiw2QkFBNEI7RUFDNUIsOEJBQTZCO0VBQzlCLG9DQUFvQyxFQUN0Qzs7QUFFRDtFQUNJLGtDQUFpQztFQUNqQywwQkFBeUIsRUFDNUI7O0FBQ0QsZUFBZTs7QUFDZjtFQUNLLG1CQUFrQixFQUNyQjs7QUFFRDtFQUNJLG1CQUFpQixFQUNwQjs7QUFDRCxnQkFBZ0I7O0FBR2pCLGVBQWU7O0FBQ2Q7RUFDRyxlQUFlO0VBQ2Y7eUJBQ2lCO0VBQ2pCLGtDQUFpQztFQUNqQyxnQkFBZTtFQUNmLGtCQUFpQjtFQUNsQjs2QkFDc0IsRUFDeEI7O0FBRUQ7RUFDSSxrQkFBaUI7RUFDakIsZUFBYztFQUNkLGdCQUFlLEVBQ2xCOztBQUVEO0VBQ0ksc0NBQXFDLEVBQ3hDOztBQUVEO0VBQ0ksbUJBQWtCLEVBQ3JCOztBQUVEO0VBQ0ksYUFBWSxFQUNmOztBQUVEO0VBQ0ksV0FBVTtFQUNWLG1CQUFrQixFQUNyQjs7QUFFRDtFQUNJLGFBQVk7RUFDWixtQkFBa0IsRUFDckI7O0FBRUQ7RUFDSSxpQkFBZ0I7RUFDaEIsbUJBQWtCLEVBQ3JCOztBQUVEO0VBQ0ksNEJBQTJCO0VBQzNCLDZCQUE0QjtFQUM1Qiw4QkFBNkI7RUFDOUIsb0NBQW9DLEVBQ3RDOztBQUVEO0VBQ0ksbUJBQWtCLEVBQ3JCOztBQUVEO0VBQ0ksbUJBQWtCO0VBQ2xCLGVBQWM7RUFDZCxnQkFBZTtFQUNmLG1CQUFrQjtFQUNsQixtQkFBa0IsRUFDckI7O0FBRUQ7RUFDSSxrQ0FBaUM7RUFDakMsMEJBQXlCLEVBQzVCOztBQUVEO0VBQ0kscUNBQW9DO0VBQ3BDLHVCQUFzQjtFQUN0QixrQkFBaUIsRUFDcEI7O0FBRUQ7RUFDSSxrQ0FBaUM7RUFDakMsMEJBQXlCLEVBQzVCOztBQUVEO0VBQ0ksdUJBQXNCO0VBQ3RCLHFDQUFvQyxFQUN2Qzs7QUFFRDtFQUNJLG9DQUFtQyxFQUN0Qzs7QUFFRDtFQUNJLGdDQUErQixFQUNsQzs7QUFDRCxnQkFBZ0I7O0FBQ2hCO0VBQ0ksV0FBUztFQUNULGtCQUFpQixFQUNwQjs7QUFDRDtFQUNJLFlBQVU7RUFDVixrQkFBaUI7RUFDakIsZ0JBQWUsRUFDbEIiLCJmaWxlIjoic3JjL2FwcC9wcm96LXByb2ZpbGUvcHJvLWVkaXQtbXktcHJvZmlsZS9wcm8tZWRpdC1teS1wcm9maWxlLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1hcCB7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDQwMHB4OyB9XHJcblxyXG4uc3RhdGlje1xyXG4gICAgIGNvbG9yOnJlZDtcclxuICAgICBmb250LXdlaWdodDogYm9sZDtcclxuIH1cclxuXHJcbiAubG9naW4tY29udGFpbmVyIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIG1hcmdpbjogMyUgYXV0bztcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxufVxyXG5cclxuLmxvZ2luLWNvbnRhaW5lciAubG9naW5ib3gge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcclxuICAgIGhlaWdodDogYXV0byAhaW1wb3J0YW50O1xyXG4gICAgcGFkZGluZzogMCAwIDBweCAwO1xyXG4gICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgMTRweCByZ2JhKDAsMCwwLC4xKTtcclxuICAgIC1tb3otYm94LXNoYWRvdzogMCAwIDE0cHggcmdiYSgwLDAsMCwuMSk7XHJcbiAgICBib3gtc2hhZG93OiAwIDAgMTRweCByZ2JhKDAsMCwwLC4xKTtcclxufVxyXG5cclxuLmxvZ2luLWNvbnRhaW5lciAubG9naW5ib3ggLmxvZ2luYm94LXNvY2lhbCAuc29jaWFsLWJ1dHRvbnMgLmJ1dHRvbi1mYWNlYm9vayB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkICMzYjU5OTg7XHJcbiAgICBjb2xvcjogIzNiNTk5ODtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIHdpZHRoOiA1MHB4O1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiA0MCU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG59XHJcblxyXG4ubG9naW4tY29udGFpbmVyIC5sb2dpbmJveCAubG9naW5ib3gtc29jaWFsIC5zb2NpYWwtYnV0dG9ucyAuYnV0dG9uLXR3aXR0ZXIge1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjMjljMWY2O1xyXG4gICAgY29sb3I6ICMyOWMxZjY7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICB3aWR0aDogNTBweDtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIG1hcmdpbi1yaWdodDogMzUlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxufVxyXG5cclxuLmxvZ2luLWNvbnRhaW5lciAubG9naW5ib3ggLmxvZ2luYm94LXNvY2lhbCAuc29jaWFsLWJ1dHRvbnMgLmJ1dHRvbi1nb29nbGUge1xyXG4gICAgZmxvYXQ6IHJpZ2h0O1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgI2VmNGYxZDtcclxuICAgIGNvbG9yOiAjZWY0ZjFkO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgd2lkdGg6IDUwcHg7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG59XHJcblxyXG5cclxuIC5sb2dpbmJveC1zb2NpYWwge1xyXG4gICAgcGFkZGluZzogMCAwIDAgMCAhaW1wb3J0YW50OyBcclxufVxyXG5cclxuLmxvZ2luYm94LXRpdGxle1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQgIWltcG9ydGFudDtcclxuICAgIGZvbnQtc2l6ZTogMjVweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5sYWJlbHtcclxuICAgIGZvbnQtd2VpZ2h0OmJvbGQgIWltcG9ydGFudDtcclxufVxyXG5cclxubGFiZWwgLm1hbmRhdG9yeXtcclxuICAgIGNvbG9yOnJlZDtcclxuICAgIGZvbnQtc2l6ZTogMTZweCAhaW1wb3J0YW50O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmhyLWJsdWUtdGl0bGV7ICAgIFxyXG4gICAgYm9yZGVyLXRvcDogM3B4IHNvbGlkICM1REIyRkYgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmhyLWJsdWV7ICAgIFxyXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM1REIyRkYgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmxvZ29JbWFnZXtcclxuICAgIHdpZHRoOjEwMHB4OyBcclxuICAgIGhlaWdodDoxMDBweDtcclxuICAgIG1hcmdpbi10b3A6NXB4OyBcclxuICAgIGJvcmRlci13aWR0aDogMXB4OyAgIFxyXG4gICAgYm9yZGVyLWNvbG9yOiAjNURCMkZGOyAgIFxyXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDsgXHJcbn1cclxuXHJcbi5hZ2dyZWdhdGVSYXRpbmd7XHJcbiAgICBjb2xvcjojYmM1Njc5OyBcclxuICAgIGZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmFnZ3JlZ2F0ZVJhdGluZyBzcGFue1xyXG4gICAgY29sb3I6IGdyZWVuO1xyXG4gICAgZm9udC1zaXplOiAxNHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXdlaWdodDogYm9sZCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4udG90YWxjb3N0e1xyXG4gICAgY29sb3I6I2JjNTY3OTsgXHJcbiAgICBmb250LXNpemU6IDE0cHggIWltcG9ydGFudDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7IFxyXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XHJcbiAgICBtYXJnaW4tbGVmdDogYXV0byAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4udG90YWxjb3N0IHNwYW57XHJcbiAgICBjb2xvcjogZ3JlZW47XHJcbiAgICBmb250LXNpemU6IDE0cHggIWltcG9ydGFudDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi53ZWxse1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50O1xyXG4gICAgcGFkZGluZzogMCAxMHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi53ZWxsLndpdGgtZm9vdGVyIHtcclxuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi53ZWxsLndpdGgtaGVhZGVyIHtcclxuICAgIHBhZGRpbmctdG9wOiAxMHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5idG4ge1xyXG4gICAgZm9udC1zaXplOiAxNHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXdlaWdodDogYm9sZCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4uZm9ybS10aXRsZSB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBhZGRpbmc6IDhweCAwO1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZCAjNURCMkZGO1xyXG4gICAgZm9udC1zaXplOiAxNXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBjb2xvcjogIzVEQjJGRjtcclxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XHJcbn1cclxuICAuY29udHJvbHNNYXA6Zm9jdXMge1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjNGQ5MGZlO1xyXG4gIH1cclxuICAudGl0bGUge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG4gICNpbmZvd2luZG93LWNvbnRlbnQge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbiAgI21hcCAjaW5mb3dpbmRvdy1jb250ZW50IHtcclxuICAgIGRpc3BsYXk6IGlubGluZTtcclxuICB9XHJcbiAgLmNvbnRyb2xzTWFwIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcclxuICAgIGJveC1zaGFkb3c6IDAgMnB4IDZweCByZ2JhKDAsIDAsIDAsIDAuMyk7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgZm9udC1mYW1pbHk6IFJvYm90bztcclxuICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICBoZWlnaHQ6IDI5cHg7XHJcbiAgICBtYXJnaW4tbGVmdDogMTdweDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgICBvdXRsaW5lOiBub25lO1xyXG4gICAgcGFkZGluZzogMCAxMXB4IDAgMTNweDtcclxuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xyXG4gICAgd2lkdGg6IDQwMHB4O1xyXG4gIH1cclxuXHJcbiAgLmdhcHtcclxuICAgIG1hcmdpbjogNXB4IDBweDtcclxuICAgIH1cclxuICAgIC5mb3JtLXRpdGxleyAgICBcclxuICAgICAgICBjb2xvcjogICM1ZGIyZmY7XHJcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZCAjNWRiMmZmO1xyXG4gICAgXHJcbiAgICAgICAgLypkaXNwbGF5OiBibG9jaztcclxuICAgICAgICBwYWRkaW5nOiA4cHggMDtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggZGFzaGVkICM3ZTM3OTQ7Ki9cclxuICAgICAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAvKiAgY29sb3I6ICM1REIyRkY7XHJcbiAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4OyovXHJcbiAgICBcclxuICAgIH1cclxuICAgIFxyXG4gICAgLm1hbmRhdG9yeXtcclxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgICAgICBjb2xvcjogI0ZGMDAwMDtcclxuICAgICAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5oci1ncmF5LXRoaWNreyAgICBcclxuICAgICAgICBib3JkZXItdG9wOiAzcHggc29saWQgIzMzMyAhaW1wb3J0YW50O1xyXG4gICAgfSBcclxuICAgIFxyXG4gICAgLmhyLWdyYXl7ICAgIFxyXG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjMzMzICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgLy8gYm9yZGVyLXRvcDogMXB4IHNvbGlkICM3ZTM3OTQgIWltcG9ydGFudDtcclxuICAgIH0gXHJcbiAgICBcclxuICAgIGlucHV0e1xyXG4gICAgICAgIGNvbG9yOiBibGFjaztcclxuICAgIH1cclxuICAgIFxyXG4gICAgLm1vY2t7XHJcbiAgICAgICAgY29sb3I6IHJlZDsgICAgXHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAubW9jay1jb25me1xyXG4gICAgICAgIGNvbG9yOiBncmVlbjsgICAgXHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAuaW5wcm9ncmVzc3tcclxuICAgICAgICBjb2xvcjogb3JhbmdlcmVkOyAgICBcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC50aHJlZS1ib3JkZXJlZHtcclxuICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICMzMzM7XHJcbiAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgIzMzMztcclxuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzMzMztcclxuICAgICAgIC8qIGJvcmRlci1sZWZ0OiAzcHggc29saWQgIzdlMzc5NDsqL1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAudGV4dC1jZW50ZXJ7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAuY2hlY2tib3gtY2VudGVyIHtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogMHB4O1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDBweDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5ncmF5eyAgICBcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgY29sb3I6ICM1ZGIyZmYgIWltcG9ydGFudDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLmJ0bi1ncmF5e1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzMgIWltcG9ydGFudDtcclxuICAgICAgICBjb2xvcjogIzVkYjJmZiAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAuYnRuLWJsdWV7ICAgIFxyXG4gICAgICAgIGNvbG9yOiAjMzMzICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzVkYjJmZiAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG4gICAgLmFjY29yZGlvbi5wYW5lbC1ncm91cCAucGFuZWwtaGVhZGluZyAuYWNjb3JkaW9uLXRvZ2dsZS5jb2xsYXBzZWQge1xyXG4gICAgICAgIGNvbG9yOiAjNWRiMmZmICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMyAhaW1wb3J0YW50O1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjNWRiMmZmICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5hY2NvcmRpb24ucGFuZWwtZ3JvdXAgLnBhbmVsLWhlYWRpbmcgLmFjY29yZGlvbi10b2dnbGU6aG92ZXI6YWZ0ZXIge1xyXG4gICAgICAgIGNvbG9yOiAjRkZGICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5hY2NvcmRpb24ucGFuZWwtZ3JvdXAgLnBhbmVsLWhlYWRpbmcgLmFjY29yZGlvbi10b2dnbGUge1xyXG4gICAgICAgIGNvbG9yOiAjNWRiMmZmICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMyAhaW1wb3J0YW50O1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjNWRiMmZmICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5hY2NvcmRpb24ucGFuZWwtZ3JvdXAgLnBhbmVsLWhlYWRpbmcgLmFjY29yZGlvbi10b2dnbGU6YWZ0ZXIge1xyXG4gICAgICAgIGNvbG9yOiAjNWRiMmZmICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5zdGF0aWN7XHJcbiAgICAgICAgY29sb3I6cmVkO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgfVxyXG4gICAgLnN0YXR1cy1hY3RpdmV7XHJcbiAgICAgICAgY29sb3I6ICMwMEZGMDA7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5zdGF0dXMtaW5hY3RpdmV7XHJcbiAgICAgICAgY29sb3I6ICNGRjAwMDA7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5pbnByb2dyZXNze1xyXG4gICAgICAgIGNvbG9yOiBvcmFuZ2VyZWQ7ICAgIFxyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLnRocmVlLWJvcmRlcmVke1xyXG4gICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgIzMzMztcclxuICAgICAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjMzMzO1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMzMzO1xyXG4gICAgICAgLyogYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAjN2UzNzk0OyovXHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5ncmF5eyAgICBcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgY29sb3I6ICM1ZGIyZmYgIWltcG9ydGFudDtcclxuICAgIH1cclxuICAgIC8qIExJU1QgTU9ERSAqL1xyXG4gICAgLmNlbnRlcntcclxuICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgIH0gXHJcbiAgICBcclxuICAgICAuaXRlbXtcclxuICAgICAgICAgdGV4dC1hbGlnbjpjZW50ZXI7XHJcbiAgICAgfVxyXG4gICAgIC8qIC9MSVNUIE1PREUgKi9cclxuICAgIFxyXG4gICAgXHJcbiAgICAvKiBWSUVXIE1PREUgKi9cclxuICAgICAuZm9ybS10aXRsZXtcclxuICAgICAgICBjb2xvcjogICM1REIyRkY7XHJcbiAgICAgICAgLypkaXNwbGF5OiBibG9jaztcclxuICAgICAgICBwYWRkaW5nOiA4cHggMDsqL1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBkYXNoZWQgIzVEQjJGRjtcclxuICAgICAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAvKiAgY29sb3I6ICM1REIyRkY7XHJcbiAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4OyovXHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5tYW5kYXRvcnl7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAgY29sb3I6ICNGRjAwMDA7XHJcbiAgICAgICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAuaHItZ3JheXsgICAgXHJcbiAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICMzMzMgIWltcG9ydGFudDtcclxuICAgIH0gXHJcbiAgICBcclxuICAgIC5idXR0b24tY2VudGVye1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaW5wdXR7XHJcbiAgICAgICAgY29sb3I6IGJsYWNrO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAubW9ja3tcclxuICAgICAgICBjb2xvcjogcmVkOyAgICBcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5tb2NrLWNvbmZ7XHJcbiAgICAgICAgY29sb3I6IGdyZWVuOyAgICBcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5pbnByb2dyZXNze1xyXG4gICAgICAgIGNvbG9yOiBvcmFuZ2VyZWQ7ICAgIFxyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLnRocmVlLWJvcmRlcmVke1xyXG4gICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgIzMzMztcclxuICAgICAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjMzMzO1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMzMzO1xyXG4gICAgICAgLyogYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAjN2UzNzk0OyovXHJcbiAgICB9XHJcbiAgICBcclxuICAgIC50ZXh0LWNlbnRlcntcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5jaGVja2JveC1jZW50ZXIge1xyXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICBtYXJnaW4tdG9wOiAwcHg7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMHB4O1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLmdyYXl7ICAgIFxyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzMgIWltcG9ydGFudDtcclxuICAgICAgICBjb2xvcjogIzVkYjJmZiAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAuYmx1ZXsgICAgXHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzVkYjJmZiAhaW1wb3J0YW50O1xyXG4gICAgICAgIGNvbG9yOiAjMzMzICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5idG4tZ3JheXtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgY29sb3I6ICM1ZGIyZmYgIWltcG9ydGFudDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLmJ0bi1ibHVleyAgICBcclxuICAgICAgICBjb2xvcjogIzMzMyAhaW1wb3J0YW50O1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM1ZGIyZmYgIWltcG9ydGFudDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLm1vZGFsLWhlYWRlciB7XHJcbiAgICAgICAgcGFkZGluZzogMHB4IDBweCAwcHggMHB4ICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC53ZWxsLndpdGgtZm9vdGVyIHtcclxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMTBweCAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG4gICAgLyogL1ZJRVcgTU9ERSAqL1xyXG4gICAgLnN0YXRpY3tcclxuICAgICAgICBjb2xvcjpyZWQ7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB9XHJcbiAgICAubm9SZWNvcmRze1xyXG4gICAgICAgIGNvbG9yOmJsdWU7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgfSJdfQ== */"

/***/ }),

/***/ "./src/app/proz-profile/pro-edit-my-profile/pro-edit-my-profile.component.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/proz-profile/pro-edit-my-profile/pro-edit-my-profile.component.ts ***!
  \***********************************************************************************/
/*! exports provided: ProEditMyProfileComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProEditMyProfileComponent", function() { return ProEditMyProfileComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _utilities_imageupload__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utilities/imageupload */ "./src/utilities/imageupload.ts");
/* harmony import */ var _global_global__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/global */ "./src/global/global.ts");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm5/ngx-toastr.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _utilities_beyond__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../utilities/beyond */ "./src/utilities/beyond.ts");
/* harmony import */ var _utilities_geocode_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../utilities/geocode.service */ "./src/utilities/geocode.service.ts");
/* harmony import */ var ngx_spinner__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ngx-spinner */ "./node_modules/ngx-spinner/fesm5/ngx-spinner.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! leaflet */ "./node_modules/leaflet/dist/leaflet-src.js");
/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_12__);














var DEFAULT_COMPANY_LOGO = "assets/img/proz/company_default.jpg";
var DEFAULT_PROFILE_IMG = "assets/img/default person.jpg";
var ProEditMyProfileComponent = /** @class */ (function () {
    function ProEditMyProfileComponent(beyond, router, formBuilder, activatedRoute, http, HttP, toastr, ngZone, geocodingService, geocoding, spinner, ref) {
        this.beyond = beyond;
        this.router = router;
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.http = http;
        this.HttP = HttP;
        this.toastr = toastr;
        this.ngZone = ngZone;
        this.geocodingService = geocodingService;
        this.geocoding = geocoding;
        this.spinner = spinner;
        this.ref = ref;
        this.yelpBusinesses = [];
        this.prozDetailsData = [];
        this.ratingsDetails = [];
        this.statesData = [];
        this.categoriesData = [];
        this.yearsData = [];
        this.dateTimeData = [];
        this.areaOfExpertise = [];
        this.areaOfExpertiseTemp = [];
        this.prozLocationFetch = [];
        this.countyList = [];
        this.counties = [];
        this.subCategoriesData = [];
        this.subcatArray = [];
        this.typeOfSubscription = "perLead";
        this.selected = {};
        this.tradeLicenseDeleteObj = {
            categoryCode: '',
            index: 0
        };
        this.prozInDetail = {
            firstName: '',
            lastName: '',
            emailId: '',
            mobileNumber: '',
            businessPhone: ''
        };
        //ARRAYS FOR USE
        this.yelpExists = true;
        this.saveAndContinueStatus = false;
        this.countyStatus = false;
        this.paymentStatus = false;
        this.showMap = false;
        this.zipcodeValidationEmpty = false;
        this.disableButton = true;
        this.disableCheck = true;
        this.coordinates = {
            latitude: 0,
            longitude: 0
        };
        this.percentage = 0;
        this.imagePreview = DEFAULT_COMPANY_LOGO;
        this.imagePreview1 = DEFAULT_PROFILE_IMG;
        this.progressShow = false;
        this.progressHide = false;
        this.proprogressShow = false;
        this.proprogressHide = false;
        this.editProfile = false;
        this.img = false;
        this.yelpRatingNo = 0;
        this.googleRating = 0;
        this.aggregateRating = 0;
        this.yelpValidate = true;
        this.tradeStatusCheck = true;
        this.subCategoriesList = [];
        this.displayZipcodes = [];
        this.countyCategory = [];
        this.countySubCategory = [];
        this.countyStore = [];
        this.quaterlyDiscountRate = 0;
        this.yearlyDiscountRate = 0;
        this.quaterlyDiscount = 0;
        this.yearlyDiscount = 0;
        this.quaterly = 0;
        this.yearly = 0;
        this.monthlyFee = 0;
        this.totalNumberOfHouses = 0;
        this.totalServiceCost = 0;
        this.zipcodeValidation = false;
        this.showZipcode = false;
        this.submitted = false;
        this.selectAllZipcodesVar = true;
        this.showSubCat = true;
        this.noSubCategory = false;
        this.Feedata = [];
        this.tradeLicenseList = [
            { stateRegisteredIn: '', tradeLicense: '', tradeLicenseNumber: '', tradeLicenseExpiration: '' },
        ];
        this.streetMaps = Object(leaflet__WEBPACK_IMPORTED_MODULE_12__["tileLayer"])('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            detectRetina: true,
        });
        this.wMaps = Object(leaflet__WEBPACK_IMPORTED_MODULE_12__["tileLayer"])('http://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png', {
            detectRetina: true,
        });
        this.options = {
            layers: [this.streetMaps],
            zoom: 7,
            center: Object(leaflet__WEBPACK_IMPORTED_MODULE_12__["latLng"])([46.879966, -121.726909])
        };
        this.profileImageToSave = DEFAULT_PROFILE_IMG;
        this.companyLogoToSave = DEFAULT_COMPANY_LOGO;
        this.addTradeLicenseList = this.formBuilder.group({
            tradeLicense: this.formBuilder.array([])
        });
    }
    ProEditMyProfileComponent.prototype.ngAfterViewInit = function () {
        document.body.scrollTop = document.documentElement.scrollTop = 0;
    };
    ProEditMyProfileComponent.prototype.ngOnInit = function () {
        this.spinner.show();
        this.beyond.beyondAdmin();
        this.loginData = JSON.parse(localStorage.getItem("login"));
        this.getMasterDateTime(this.activatedRoute.snapshot.params['prozId']);
        this.getListOfStates();
        this.getYears();
        this.getListOfCategories();
        this.prozLocation(this.activatedRoute.snapshot.params['prozId']);
        this.listRatingDetails(this.activatedRoute.snapshot.params['prozId']);
        this.prozDetails(this.activatedRoute.snapshot.params['prozId']);
        this.viewProzDetails(this.activatedRoute.snapshot.params['prozId']);
        this.beAProValues = JSON.parse(localStorage.getItem('regValues'));
        // console.log("beAProValues" + JSON.stringify(this.beAProValues))
        //this.proPayment(this.activatedRoute.snapshot.params['prozId'])
        this.serProzDetails = this.formBuilder.group({
            companyName: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            webMailId: [''],
            firstName: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            lastName: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            businessPhone: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            smsMobile: [''],
            businessEmail: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            businessType: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            businessHours: [''],
            businessAddressLine1: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            businessAddressLine2: [''],
            suite: [''],
            city: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            state: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            zipCode: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            image: [''],
            proProfileImage: [''],
            companyProfileDescription: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            inBusinessSince: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            areYouInsured: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('no'),
            areYouBonded: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('no'),
            numberOfEmployees: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            stateRegisteredIn: [''],
            tradeLicense: [''],
            tradeLicenseNumber: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].minLength(6)],
            tradeLicenseExpiration: [''],
            areaOfExpertise: [''],
            additionalInfo: [''],
            warrantyOffered: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('no'),
            creditCardAccepted: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('yes'),
            freeEstimated: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('no'),
            creditCardType: ['445455454', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            creditCardNumber: ['54545', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            ccvNumber: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            selectMonth: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            selectYear: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            cardBusinessAddressLine1: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            cardState: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            cardCity: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            cardZipCode: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
        });
        /*current date and future Date*/
        this.blockifyDate = new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getDate();
        var day = new Date().getDate();
        var month = new Date().getMonth() + 1;
        if (day < 10) {
            var formattedDay = "0" + day;
        }
        else {
            var formattedDay = "" + day;
        }
        if (month < 10) {
            var formattedMonth = "0" + month;
        }
        else {
            var formattedMonth = "" + month;
        }
        this.blockifyDate = new Date().getFullYear() + '-' + formattedMonth + '-' + formattedDay;
        //var splitDtae = params.start_date.split('-')
        //  var convertedDate = splitDtae[2] + "-" + splitDtae[1] + "-" + splitDtae[0]
        /*current date and future Date*/
    };
    /*current date and future Date*/
    ProEditMyProfileComponent.prototype.departureReturnDate = function (date) {
        this.min = date;
    };
    ProEditMyProfileComponent.prototype.verifyotpDataaa = function (res) {
        if (res == null || res == "") {
            this.Reason = true;
        }
        else {
            this.Reason = false;
            this.wrongOtp = false;
        }
    };
    ProEditMyProfileComponent.prototype.onEditnumber = function (res) {
        var _this = this;
        if (!res) {
            this.Reason = true;
            return false;
        }
        else {
            this.Reason = false;
        }
        if (this.mobileOtp == res) {
            var otpObj = {
                prozId: this.activatedRoute.snapshot.params["prozId"],
                otp: this.mobileOtp,
            };
            this.isMNVerified = false;
            this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + "/updateOtp", otpObj).subscribe(function (data) {
                var response = data.json();
                if (response.status == 200) {
                    $("#myModal9").modal("hide");
                    _this.res = "";
                    _this.displayFileModalgroup = "none";
                    _this.updatephonenumberOtp = response.response;
                    _this.isMNVerified = true;
                    _this.toastr.success("Mobile number verified successfully");
                }
            });
        }
        else {
            this.wrongOtp = true;
        }
    };
    ProEditMyProfileComponent.prototype.verifyotp = function () {
        var _this = this;
        this.displayFileModalgroup = "block";
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", "application/json");
        headers.append("Content-Type", "application/json");
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        var topObj = {
            prozId: this.activatedRoute.snapshot.params["prozId"],
            businessPhone: this.serProzDetails.value.businessPhone,
        };
        this.http
            .post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + "/updatePhonenumber", topObj, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.mobileOtp = response.response;
            }
        });
    };
    ProEditMyProfileComponent.prototype.onCloseHandledNumber = function () {
        this.displayFileModalgroup = 'none';
    };
    Object.defineProperty(ProEditMyProfileComponent.prototype, "f", {
        get: function () { return this.serProzDetails.controls; },
        enumerable: true,
        configurable: true
    });
    //TRADE LICENSE GENERATION
    ProEditMyProfileComponent.prototype.createTradeLicense = function (prozProfileData) {
        return this.formBuilder.group({
            stateRegisteredIn: [prozProfileData.stateRegisteredIn, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            tradeLicense: [prozProfileData.tradeLicense, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            tradeLicenseNumber: [prozProfileData.tradeLicenseNumber, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            tradeLicenseExpiration: [prozProfileData.tradeLicenseExpiration, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required]
        });
    };
    ProEditMyProfileComponent.prototype.addFieldValue = function () {
        this.items = this.addTradeLicenseList.get('tradeLicense');
        this.items.push(this.createTradeLicense(''));
        this.checkValidationTrade();
    };
    Object.defineProperty(ProEditMyProfileComponent.prototype, "tradeLicenseValues", {
        get: function () {
            return this.addTradeLicenseList.get('tradeLicense');
        },
        enumerable: true,
        configurable: true
    });
    ProEditMyProfileComponent.prototype.deleteFieldValueModelLevel = function (index) {
        this.tradeLicenseDeleteObj.index = index;
        this.tradeLicenseDeleteObj.categoryCode = this.addTradeLicenseList.get('tradeLicense').value[index].tradeLicense;
        this.tradeLicenseValues.removeAt(index);
        this.checkValidationTrade();
    };
    ProEditMyProfileComponent.prototype.deleteFieldValue = function () {
        this.tradeLicenseDeleteObj.categoryCode = this.addTradeLicenseList.get('tradeLicense').value[this.tradeLicenseDeleteObj.index].tradeLicense;
        this.tradeLicenseValues.removeAt(this.tradeLicenseDeleteObj.index);
        // console.log(this.tradeLicenseDeleteObj.categoryCode)
        this.getSubcat(this.tradeLicenseDeleteObj.index);
        this.checkValidationTrade();
    };
    //DELETE LICENSES
    ProEditMyProfileComponent.prototype.deleteLicenses = function () {
        var _this = this;
        this.spinner.show();
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/deleteLicenses', this.tradeLicenseDeleteObj, options)
            .subscribe(function (data) {
            var response = data.json();
            ////// console.log(response)
            if (response.status == 200) {
                _this.spinner.hide();
                _this.toastr.success("Trade License Updated Successfully");
                window.location.reload();
                return false;
            }
            else {
                _this.spinner.hide();
                _this.toastr.success("Trade License Updated Successfully");
                window.location.reload();
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //DELETE LICENSES
    //TRADE LICENSE GENERATION
    ProEditMyProfileComponent.prototype.listRatingDetails = function (prozCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/listRatings/' + prozCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.ratingsDetails = response.response;
                return false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    ProEditMyProfileComponent.prototype.keyPress1 = function (event) {
        var pattern = /^[a-zA-Z ]+$/;
        var inputChar = String.fromCharCode(event.charCode);
        if (event.keyCode != 8 && event.keyCode != 9 && !pattern.test(inputChar)) {
            event.preventDefault();
        }
    };
    //TRADE LICENSE GENERATION
    //IMAGE UPLOAD
    ProEditMyProfileComponent.prototype.handleImage = function (file) {
        var _this = this;
        var picReader = new FileReader();
        picReader.onload = function (e) {
            var reader = e.target;
            _this.imagePreview = reader.result;
        };
        picReader.readAsDataURL(file);
    };
    ProEditMyProfileComponent.prototype.select = function (event) {
        var reader = new FileReader();
        if (event.target.files && event.target.files.length > 0) {
            var file = event.target.files[0];
            this.img = true;
            this.progressShow = false;
            this.progressHide = false;
            this.file2Upload = event.target.files[0];
            this.handleImage(file);
        }
        else {
            this.img = false;
            this.progressShow = false;
            this.progressHide = false;
            this.imagePreview = 'assets/img/proz/company_default.jpg';
        }
    };
    ProEditMyProfileComponent.prototype.imgfileUpload = function () {
        var _this = this;
        var url = _global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/imageUpload';
        var formData = new FormData();
        var xhr = new XMLHttpRequest();
        formData.append('image', this.file2Upload);
        var config = {
            headers: {
                'content-type': 'multipart/form-data'
            }
        };
        xhr.open('post', url, true);
        xhr.upload.onprogress = function (e) {
            if (e.lengthComputable) {
                _this.percentage = (e.loaded / e.total) * 100;
                _this.progressShow = true;
                _this.progressHide = false;
                if (_this.percentage === 100) {
                    _this.progressShow = false;
                    _this.progressHide = true;
                    _this.imageUploadVariable.nativeElement.value = "";
                    _this.img = false;
                }
            }
        };
        xhr.onerror = function (e) {
        };
        xhr.onload = function () {
            var a = JSON.parse(xhr.responseText);
            _this.companyLogoToSave = a.imagePath;
        };
        xhr.send(formData);
    };
    //IMAGE UPLOAD
    //Profile IMAGE UPLOAD
    ProEditMyProfileComponent.prototype.handleproImage = function (file) {
        var _this = this;
        var picReader = new FileReader();
        picReader.onload = function (e) {
            var reader = e.target;
            _this.imagePreview1 = reader.result;
        };
        picReader.readAsDataURL(file);
    };
    ProEditMyProfileComponent.prototype.proselect = function (event) {
        var reader = new FileReader();
        if (event.target.files && event.target.files.length > 0) {
            var file = event.target.files[0];
            this.img1 = true;
            this.proprogressShow = false;
            this.proprogressHide = false;
            this.file1Upload = event.target.files[0];
            this.handleproImage(file);
        }
        else {
            this.img1 = false;
            this.proprogressShow = false;
            this.proprogressHide = false;
            this.imagePreview1 = 'assets/img/default person.jpg';
        }
    };
    ProEditMyProfileComponent.prototype.proimgfileUpload = function () {
        var _this = this;
        var url = _global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/proimageUpload';
        var formData = new FormData();
        var xhr = new XMLHttpRequest();
        formData.append('image', this.file1Upload);
        var config = {
            headers: {
                'content-type': 'multipart/form-data'
            }
        };
        xhr.open('post', url, true);
        xhr.upload.onprogress = function (e) {
            if (e.lengthComputable) {
                _this.percentage = (e.loaded / e.total) * 100;
                _this.proprogressShow = true;
                _this.proprogressHide = false;
                if (_this.percentage === 100) {
                    _this.proprogressShow = false;
                    _this.proprogressHide = true;
                    _this.imageUploadVariable.nativeElement.value = "";
                    _this.img1 = false;
                }
            }
        };
        xhr.onerror = function (e) {
        };
        xhr.onload = function () {
            var a = JSON.parse(xhr.responseText);
            _this.profileImageToSave = a.imagePath;
        };
        xhr.send(formData);
    };
    //Profile IMAGE UPLOAD
    //SUBMIT IMAGE
    //PROZ DETAILS
    ProEditMyProfileComponent.prototype.prozDetails = function (prozId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getProzDetails/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozDetailsData = response.response;
                //////// console.log(this.prozDetailsData)
                _this.prozInDetail.firstName = _this.prozDetailsData[0].firstName;
                _this.prozInDetail.lastName = _this.prozDetailsData[0].lastName;
                _this.prozInDetail.mobileNumber = _this.prozDetailsData[0].mobileNumber;
                _this.prozInDetail.businessPhone = _this.prozDetailsData[0].mobileNumber;
                _this.prozInDetail.emailId = _this.prozDetailsData[0].emailId;
                _this.serProzDetails.get("companyName").setValue(_this.prozDetailsData[0].typeOfBusiness);
                _this.serProzDetails.get("firstName").setValue(_this.prozDetailsData[0].firstName);
                _this.serProzDetails.get("lastName").setValue(_this.prozDetailsData[0].lastName);
                _this.serProzDetails.get("businessPhone").setValue(_this.prozDetailsData[0].mobileNumber);
                _this.serProzDetails.get("smsMobile").setValue(_this.prozDetailsData[0].mobileNumber);
                _this.serProzDetails.get("businessEmail").setValue(_this.prozDetailsData[0].emailId);
                _this.serProzDetails.get("businessType").setValue(_this.prozDetailsData[0].businessType);
                _this.serProzDetails.get("businessAddressLine1").setValue(_this.prozDetailsData[0].businessAddress);
                _this.serProzDetails.get("state").setValue(_this.prozDetailsData[0].state);
                _this.serProzDetails.get("city").setValue(_this.prozDetailsData[0].city);
                _this.serProzDetails.get("zipCode").setValue(_this.prozDetailsData[0].zipcode);
                _this.changeBusinessName();
                return false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //PROZ DETAILS
    //STATES
    ProEditMyProfileComponent.prototype.getListOfStates = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getListOfStates', options)
            .subscribe(function (data) {
            var response = data.json();
            _this.statesData = response.response;
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //STATES
    //YEARS
    ProEditMyProfileComponent.prototype.getYears = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getYears', options)
            .subscribe(function (data) {
            var response = data.json();
            _this.yearsData = response.response;
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //YEARS
    //CATEGORIES
    ProEditMyProfileComponent.prototype.getListOfCategories = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getListOfCategories', options)
            .subscribe(function (data) {
            var response = data.json();
            _this.categoriesData = response.response;
            _this.categoriesData.forEach(function (e) {
                e.checked = false;
            });
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //CATEGORIES
    //SAVE PROFILE
    ProEditMyProfileComponent.prototype.onSubmit = function () {
        var _this = this;
        var isMobleNumberModified = this.prozInDetail.businessPhone !== this.serProzDetails.value.businessPhone;
        if (isMobleNumberModified && !this.isMNVerified) {
            this.toastr.warning('Please verify the updated mobile number');
            return;
        }
        this.submitted = true;
        // console.log("stateRegisteredInvalue")
        if (this.addTradeLicenseList.get('tradeLicense').value == 0) {
            this.toastr.info('Please add atleast one license to procees');
            return false;
        }
        this.disableCheck = false;
        this.addTradeLicenseList.get('tradeLicense').value.forEach(function (e, i) {
            if (e.stateRegisteredIn == "" || e.tradeLicense == "" || e.tradeLicenseExpiration == "" || e.tradeLicenseNumber == "") {
                // console.log('The empty')
                e.StatusCheck = true;
                _this.disableCheck = true;
                return false;
            }
            if (e.stateRegisteredIn == null || e.tradeLicense == null || e.tradeLicenseExpiration == null || e.tradeLicenseNumber == null) {
                e.StatusCheck = true;
                _this.disableCheck = true;
                // console.log('The empty' + this.disableCheck)
                return false;
            }
            else if (e.stateRegisteredIn !== "" && e.tradeLicense !== "" && e.tradeLicenseExpiration !== "" && e.tradeLicenseNumber !== "") {
                // console.log('The not empty')
                e.StatusCheck = false;
            }
            if (i == _this.addTradeLicenseList.get('tradeLicense').value.length - 1) {
                // console.log(this.disableCheck)
                if (_this.disableCheck == true || _this.serProzDetails.invalid) {
                    return false;
                }
                else {
                    _this.spinner.show();
                    var state = [];
                    var tradeLicense = [];
                    var tradeLicenseNumber = [];
                    var tradeLicenseExpiration = [];
                    var tradeLicenseCategoryNames = [];
                    _this.addTradeLicenseList.get('tradeLicense').value.forEach(function (e) {
                        state.push(e.stateRegisteredIn);
                        tradeLicense.push(e.tradeLicense);
                        tradeLicenseNumber.push(e.tradeLicenseNumber);
                        tradeLicenseExpiration.push(e.tradeLicenseExpiration);
                        tradeLicenseCategoryNames.push(e.tradeLicense);
                    });
                    if (_this.countyList.length == 0) {
                        _this.toastr.info('Select Counties Before Submission');
                        return false;
                    }
                    else {
                        _this.countyList.forEach(function (data, index) {
                            var validateSubmit = data.subCategoriesListPerLead.filter(function (val) { return val.checkedNewLead == true; });
                            if (validateSubmit.length > 0) {
                                _this.disableButton = false;
                            }
                            else {
                                _this.disableButton = true;
                            }
                            if (index == _this.countyList.length - 1) {
                                if (_this.disableButton == false) {
                                    _this.spinner.show();
                                    var obj = {
                                        "prozId": _this.activatedRoute.snapshot.params['prozId'],
                                        "companyName": _this.serProzDetails.value.companyName,
                                        "webMailId": _this.serProzDetails.value.webMailId,
                                        "firstName": _this.serProzDetails.value.firstName,
                                        "lastName": _this.serProzDetails.value.lastName,
                                        "businessPhone": _this.serProzDetails.value.businessPhone,
                                        "smsMobile": _this.serProzDetails.value.smsMobile,
                                        "businessEmail": _this.serProzDetails.value.businessEmail,
                                        "businessHours": _this.serProzDetails.value.businessHours,
                                        "businessDays": _this.serProzDetails.value.businessDays,
                                        "businessType": _this.serProzDetails.value.businessType,
                                        "businessAddressLine1": _this.serProzDetails.value.businessAddressLine1,
                                        "businessAddressLine2": _this.serProzDetails.value.businessAddressLine2,
                                        "suite": _this.serProzDetails.value.suite,
                                        "city": _this.serProzDetails.value.city,
                                        "state": _this.serProzDetails.value.state,
                                        "zipCode": _this.serProzDetails.value.zipCode,
                                        "image": _this.companyLogoToSave,
                                        "proProfileImage": _this.profileImageToSave,
                                        "companyProfileDescription": _this.serProzDetails.value.companyProfileDescription,
                                        "inBusinessSince": _this.serProzDetails.value.inBusinessSince,
                                        "areYouInsured": _this.serProzDetails.value.areYouInsured,
                                        "areYouBonded": _this.serProzDetails.value.areYouBonded,
                                        "numberOfEmployees": _this.serProzDetails.value.numberOfEmployees,
                                        "stateRegisteredIn": state,
                                        "tradeLicense": tradeLicense,
                                        "tradeLicenseNumber": tradeLicenseNumber,
                                        "tradeLicenseExpiration": tradeLicenseExpiration,
                                        "areaOfExpertise": _this.areaOfExpertiseTemp,
                                        "additionalInfo": _this.serProzDetails.value.additionalInfo,
                                        "warrantyOffered": _this.serProzDetails.value.warrantyOffered,
                                        "creditCardAccepted": _this.serProzDetails.value.creditCardAccepted,
                                        "freeEstimated": _this.serProzDetails.value.freeEstimated,
                                        "latitude": _this.coordinates.latitude,
                                        "longitude": _this.coordinates.longitude,
                                        "yelpBusinessId": '' + _this.yelpId,
                                        "googleBusinessId": '' + _this.googleRatingId,
                                        "yelpRating": '' + _this.yelpRatingNo,
                                        "googleRating": '' + _this.googleRating,
                                        "aggregateRating": '' + _this.aggregateRating,
                                        "creditCardType": _this.serProzDetails.value.creditCardType,
                                        "creditCardNumber": _this.serProzDetails.value.creditCardNumber,
                                        "ccvNumber": _this.serProzDetails.value.ccvNumber,
                                        "selectMonth": _this.serProzDetails.value.selectMonth,
                                        "selectYear": _this.serProzDetails.value.selectYear,
                                        "businessAddressLine3": _this.serProzDetails.value.cardBusinessAddressLine1,
                                        // "businessAddressLine2": this.serProzDetails.value.cardBusinessAddressLine1,
                                        "state3": _this.serProzDetails.value.cardState,
                                        "city3": _this.serProzDetails.value.cardCity,
                                        "zipCode3": _this.serProzDetails.value.cardZipCode,
                                    };
                                    // console.log(obj)
                                    _this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/editProfile', obj)
                                        .subscribe(function (data) {
                                        var response = data.json();
                                        if (response.status === 200) {
                                            _this.spinner.hide();
                                            _this.toastr.success("Pro Profile Saved Successfully");
                                            _this.router.navigate(['/prozProfile/myProzProfile', _this.activatedRoute.snapshot.params['prozId']]);
                                        }
                                    }, function (error) {
                                        _this.toastr.warning('Unable to connect to server');
                                    });
                                }
                                else {
                                    _this.toastr.info('Please Select atleast one service to proceed');
                                }
                            }
                        });
                    }
                }
            }
        });
    };
    //SAVE PROFILE
    //REMIND ME LATER
    ProEditMyProfileComponent.prototype.remindMeLater = function () {
        this.router.navigate(['/prozadmin-dashboard']);
    };
    //REMIND ME LATER
    //MASTER DATE TIME
    ProEditMyProfileComponent.prototype.getMasterDateTime = function (prozId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/masterDateTime/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.dateTimeData = response.response;
                // console.log("datetime", this.dateTimeData)
                for (var i = 0; i < _this.dateTimeData.length; i++) {
                    _this.dateTimeData[i].editButton = false;
                    _this.dateTimeData[i].saveButton = true;
                    if (_this.dateTimeData[i].status == "CLOSED") {
                        _this.dateTimeData[i].fromTime = "";
                        _this.dateTimeData[i].toTime = "";
                    }
                    //  Status Closed/Open
                    //  /Status Closed/Open
                }
            }
        }, function (error) {
            _this.toastr.warning('Master Date & Time ::: Unable to connect to server');
        });
    };
    //MASTER DATE TIME
    //EDIT DATE
    ProEditMyProfileComponent.prototype.editCalen = function (data) {
        data.editButton = true;
        data.saveButton = false;
    };
    //EDIT DATE
    ProEditMyProfileComponent.prototype.statusChange = function (data) {
        if (data.status == "CLOSED") {
            // this.dateTimeData[i].fromTime = false;
            // this.dateTimeData[i].toTime = false;
            data.fromTime = "";
            data.toTime = "";
        }
        else if (data.status == "OPEN") {
            // this.dateTimeData[i].fromTime = true;
            // this.dateTimeData[i].toTime = true;
            data.fromTime = "09:00 AM";
            data.toTime = "06:00 PM";
        }
    };
    //TASK #497
    //SAVE DATE
    ProEditMyProfileComponent.prototype.saveCalen = function (data) {
        var _this = this;
        data.editButton = false;
        data.saveButton = true;
        var obj = {
            id: data.id,
            prozId: data.prozId,
            status: data.status,
            fromTime: data.fromTime,
            toTime: data.toTime,
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/updateMasterDateTime', obj)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.getMasterDateTime(_this.activatedRoute.snapshot.params['prozId']);
            }
            else {
                return false;
            }
        }, function (error) {
            _this.toastr.warning('Save Business Hours::: Unable to connect to server');
        });
    };
    //TASK #497
    //SAVE DATE
    //VIEW PROZ DETAILS
    ProEditMyProfileComponent.prototype.viewProzDetails = function (prozCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getProzProfile/' + prozCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozProfileData = response.response[0];
                // console.log(this.prozProfileData)
                if (_this.prozProfileData.areaOfExpertise.length > 0) {
                    _this.subcatArray = _this.prozProfileData.areaOfExpertise.split(',');
                    if (_this.subcatArray.length > 0) {
                        _this.areaOfExpertiseTemp = _this.subcatArray;
                    }
                }
                _this.prozProfileData.tradeDetails = [];
                _this.prozProfileData.stateRegisteredIn.split(',').forEach(function (e, i) {
                    var tradeDetailsObj = {
                        stateRegisteredIn: _this.prozProfileData.stateRegisteredIn.split(',')[i],
                        tradeLicense: _this.prozProfileData.tradeLicense.split(',')[i],
                        tradeLicenseNumber: _this.prozProfileData.tradeLicenseNumber.split(',')[i],
                        tradeLicenseExpiration: _this.prozProfileData.tradeLicenseExpiration.split(',')[i],
                    };
                    _this.prozProfileData.tradeDetails.push(tradeDetailsObj);
                    if (i === _this.prozProfileData.stateRegisteredIn.split(',').length - 1) {
                        _this.prozProfileData.tradeDetails.forEach(function (e, i) {
                            _this.items = _this.addTradeLicenseList.get('tradeLicense');
                            _this.items.push(_this.createTradeLicense(e));
                            _this.getSubcat(i);
                        });
                    }
                });
                // console.log(this.proProfilePayment)
                _this.prozInDetail.businessPhone = _this.prozProfileData.businessPhone;
                _this.serProzDetails = _this.formBuilder.group({
                    companyName: [_this.prozProfileData.companyName, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    webMailId: [_this.prozProfileData.webMailId],
                    firstName: [_this.prozProfileData.firstName, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    lastName: [_this.prozProfileData.lastName, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    businessPhone: [_this.prozProfileData.businessPhone, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    smsMobile: [_this.prozProfileData.smsMobile, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    businessEmail: [_this.prozProfileData.businessEmail, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    businessType: [_this.prozProfileData.bussinessType, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    businessHours: [_this.prozProfileData.businessHours],
                    businessAddressLine1: [_this.prozProfileData.businessAddressLine1, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    businessAddressLine2: [_this.prozProfileData.businessAddressLine2],
                    suite: [_this.prozProfileData.suite],
                    city: [_this.prozProfileData.city, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    state: [_this.prozProfileData.state, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    zipCode: [_this.prozProfileData.zipCode, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    image: [''],
                    proProfileImage: [''],
                    companyProfileDescription: [_this.prozProfileData.companyProfileDescription, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    inBusinessSince: [_this.prozProfileData.inBusinessSince, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    areYouInsured: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"](_this.prozProfileData.areYouInsured),
                    areYouBonded: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"](_this.prozProfileData.areYouBonded),
                    numberOfEmployees: [_this.prozProfileData.numberOfEmployees, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    stateRegisteredIn: [_this.prozProfileData.stateRegisteredIn],
                    tradeLicense: [_this.prozProfileData.tradeLicense],
                    tradeLicenseNumber: [_this.prozProfileData.tradeLicenseNumber, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    tradeLicenseExpiration: [_this.prozProfileData.tradeLicenseExpiration],
                    areaOfExpertise: [_this.prozProfileData.areaOfExpertise],
                    additionalInfo: [_this.prozProfileData.additionalInfo],
                    warrantyOffered: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"](_this.prozProfileData.warrantyOffered),
                    creditCardAccepted: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"](_this.prozProfileData.creditCardAccepted),
                    freeEstimated: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"](_this.prozProfileData.freeEstimated),
                });
                _this.editProfile = true;
                // this.proPayment(this.activatedRoute.snapshot.params['prozId'])
                if (_this.prozProfileData.image != DEFAULT_COMPANY_LOGO) {
                    _this.imagePreview = _global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + _this.prozProfileData.image;
                    _this.companyLogoToSave = _this.prozProfileData.image;
                }
                if (_this.prozProfileData.proProfileImage != DEFAULT_PROFILE_IMG) {
                    _this.imagePreview1 = _global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + _this.prozProfileData.proProfileImage;
                    _this.profileImageToSave = _this.prozProfileData.proProfileImage;
                }
                if (_this.prozProfileData.areaOfExpertise === "") {
                    _this.categoriesData.forEach(function (f) {
                        f.checked = false;
                    });
                }
                else {
                    _this.prozProfileData.areaOfExpertise.split(',').forEach(function (e) {
                        _this.categoriesData.forEach(function (f) {
                            if (e == f.categoryName) {
                                f.checked = true;
                                _this.areaOfExpertiseTemp.push(e);
                            }
                        });
                    });
                }
            }
            else {
                _this.prozDetails(_this.activatedRoute.snapshot.params['prozId']);
                _this.addTradeLicenseList = _this.formBuilder.group({
                    tradeLicense: _this.formBuilder.array([_this.createTradeLicense('')])
                });
                _this.editProfile = false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //VIEW PROZ DETAILS
    ProEditMyProfileComponent.prototype.proPayment = function (prozId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getProzProfilePayment/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.proProfilePayment = response.response[0];
                _this.paymentStatus = true;
                ////// console.log("respone payment" + JSON.stringify(this.proProfilePayment))
                _this.serProzDetails = _this.formBuilder.group({
                // creditCardType: [this.proProfilePayment.creditCardType],
                // creditCardNumber: [this.proProfilePayment.creditCardNumber],
                // ccvNumber: [this.proProfilePayment.ccvNumber],
                // selectMonth: [this.proProfilePayment.expiryOn.split(' ')[0]],
                // selectYear: [this.proProfilePayment.expiryOn.split(' ')[1]],
                // cardBusinessAddressLine1: [this.proProfilePayment.businessAddressLine1],
                // cardState: [this.proProfilePayment.state],
                // cardCity: [this.proProfilePayment.city],
                // cardZipCode: [this.proProfilePayment.zipCode],
                });
            }
            else {
                _this.paymentStatus = false;
            }
        });
    };
    //TRADE LICENSE EXPIRATION
    ProEditMyProfileComponent.prototype.tradeLicenseExpiration = function () {
        var date = this.serProzDetails.controls.tradeLicenseExpiration.value;
        var changeDate = new Date(date);
    };
    //TRADE LICENSE EXPIRATION
    //BUSINESS API SOCIAL MEDIA
    ProEditMyProfileComponent.prototype.changeBusinessName = function () {
        var _this = this;
        //////// console.log('The business')
        if (this.serProzDetails.controls.companyName.value != '' && this.serProzDetails.controls.businessAddressLine1.value != '' && this.serProzDetails.controls.city.value != '' && this.serProzDetails.controls.state.value != '' && this.serProzDetails.controls.zipCode.value != '') {
            //COMMON OBJECT FOR FETCHING SOCIAL MEDIA RATING
            var businessObj = {
                name: this.serProzDetails.controls.companyName.value,
                address1: this.serProzDetails.controls.businessAddressLine1.value,
                city: this.serProzDetails.controls.city.value,
                country: 'US',
                state: this.serProzDetails.controls.state.value,
                zipcode: this.serProzDetails.controls.zipCode.value,
            };
            //////// console.log(businessObj)
            //COMMON OBJECT FOR FETCHING SOCIAL MEDIA RATING
            //YELP DETAILS FETCHER
            this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getYelpBusiness', businessObj)
                .subscribe(function (data) {
                var response = data.json();
                //////// console.log('THis is data ' + JSON.stringify(businessObj))
                if (response.businesses == "") {
                    //////// console.log('THe business is empty')
                    _this.yelpExists = true;
                    _this.yelpId = "NO YELP ID FOUND";
                    _this.yelpRatingNo = 'NA';
                    _this.googleRatingId = "NO GOOGLE ID FOUND";
                    _this.googleRating = 'NA';
                    _this.aggregateRating = 'NA';
                    return false;
                }
                if (response.businesses !== null) {
                    //////// console.log('THe business is not empty')
                    _this.yelpExists = false;
                    _this.yelpBusinesses = response.businesses;
                    //////// console.log('This is the yelp and google rating id ' + JSON.stringify(response))
                    _this.selectYelp(_this.yelpBusinesses[0]);
                    return false;
                }
                if (response['error']['code'] === "VALIDATION_ERROR") {
                    //////// console.log('THe business validation error')
                    return false;
                }
            }, function (error) {
                _this.toastr.warning('Unable to connect to server');
            });
            //YELP DETAILS FETCHER
            //GOOGLE BUSINESS FETCHER
            this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getGoogleBusiness', businessObj)
                .subscribe(function (data) {
                var response = data.json();
                if (response.results == "") {
                    _this.googleRatingId = 'NO GOOGLE ID FOUND';
                    _this.googleRating = 'NA';
                    return false;
                }
                else {
                    _this.coordinates.latitude = response.results[0].geometry.location.lat;
                    _this.coordinates.longitude = response.results[0].geometry.location.lng;
                    _this.googleRatingId = response.results[0].name;
                    _this.googleRating = response.results[0].rating;
                }
            }, function (error) {
                _this.toastr.warning('Unable to connect to server');
            });
            //GOOGLE BUSINESS FETCHER
        }
        else {
            //////// console.log('The empty')
            //COMMON OBJECT FOR FETCHING SOCIAL MEDIA RATING
            var businessObj = {
                name: this.serProzDetails.controls.companyName.value,
                address1: this.serProzDetails.controls.businessAddressLine1.value,
                city: this.serProzDetails.controls.city.value,
                country: 'US',
                state: this.serProzDetails.controls.state.value,
                zipcode: this.serProzDetails.controls.zipCode.value,
            };
            //COMMON OBJECT FOR FETCHING SOCIAL MEDIA RATING
            //////// console.log(businessObj)
            //YELP DETAILS FETCHER
            this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getYelpBusiness', businessObj)
                .subscribe(function (data) {
                var response = data.json();
                //////// console.log('THis is data ' + JSON.stringify(businessObj))
                if (response.businesses == "") {
                    //////// console.log('THe business is empty')
                    _this.yelpExists = true;
                    _this.yelpId = "NO YELP ID FOUND";
                    _this.yelpRatingNo = 'NA';
                    _this.googleRatingId = "NO GOOGLE ID FOUND";
                    _this.googleRating = 'NA';
                    _this.aggregateRating = 'NA';
                    return false;
                }
                if (response.businesses !== null) {
                    //////// console.log('THe business is not empty')
                    _this.yelpExists = false;
                    _this.yelpBusinesses = response.businesses;
                    //////// console.log('This is the yelp and google rating id ' + JSON.stringify(response))
                    _this.selectYelp(_this.yelpBusinesses[0]);
                    return false;
                }
                if (response['error']['code'] === "VALIDATION_ERROR") {
                    //////// console.log('THe business validation error')
                    return false;
                }
            }, function (error) {
                _this.toastr.warning('Unable to connect to server');
            });
            //YELP DETAILS FETCHER
            //GOOGLE BUSINESS FETCHER
            this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getGoogleBusiness', businessObj)
                .subscribe(function (data) {
                var response = data.json();
                if (response.results == "") {
                    _this.googleRatingId = 'NO GOOGLE ID FOUND';
                    _this.googleRating = '';
                    return false;
                }
                else {
                    _this.coordinates.latitude = response.results[0].geometry.location.lat;
                    _this.coordinates.longitude = response.results[0].geometry.location.lng;
                    _this.googleRatingId = response.results[0].name;
                    _this.googleRating = response.results[0].rating;
                }
            }, function (error) {
                _this.toastr.warning('Unable to connect to server');
            });
            //GOOGLE BUSINESS FETCHER
        }
    };
    //BUSINESS API SOCIAL MEDIA
    //YELP SELECTION
    ProEditMyProfileComponent.prototype.selectYelp = function (yelp) {
        var _this = this;
        this.coordinates.latitude = yelp.coordinates.latitude;
        this.coordinates.longitude = yelp.coordinates.longitude;
        this.yelpId = yelp.alias;
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getYelpBusinessRating/' + yelp.alias)
            .subscribe(function (data) {
            var response = data.json();
            _this.yelpRatingNo = response.rating;
            // console.log(this.googleRatingId)
            // console.log(this.googleRating)
            // console.log(this.yelpId)
            // console.log(this.yelpRatingNo)
            if (_this.yelpId != null && _this.googleRatingId != null) {
                if (_this.googleRating == "NA" || _this.yelpRatingNo == "NA") {
                    _this.aggregateRating = "NA";
                }
                else {
                    _this.aggregateRating = (parseFloat(_this.yelpRatingNo) + parseFloat(_this.googleRating)) / 2;
                }
                _this.yelpValidate = false;
            }
            else {
                _this.yelpValidate = true;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //YELP SELECTION
    ProEditMyProfileComponent.prototype.removeDuplicates = function (arr) {
        // console.log('called')
        var unique_array = [];
        for (var i = 0; i < arr.length; i++) {
            if (unique_array.indexOf(arr[i]) == -1) {
                unique_array.push(arr[i]);
            }
        }
        // console.log(unique_array)
        return unique_array;
    };
    //CHECK CATEGORY
    ProEditMyProfileComponent.prototype.checkCategory = function (data, category) {
        var _this = this;
        if (category.checked === true) {
            var subCategory = data.subCategories.filter(function (val) { return val.subcat_code == category.subcat_code; });
            // console.log(subCategory)
            if (subCategory.length > 0) {
                if (this.areaOfExpertiseTemp.length == 0) {
                    this.areaOfExpertiseTemp.push(category.subcat_code);
                    // console.log(this.areaOfExpertiseTemp)
                }
                else {
                    this.areaOfExpertiseTemp.forEach(function (f, i) {
                        if (f == category.subcat_code) {
                        }
                        else {
                            _this.areaOfExpertiseTemp.push(category.subcat_code);
                        }
                    });
                }
            }
            this.areaOfExpertiseTemp = this.removeDuplicates(this.areaOfExpertiseTemp);
        }
        else {
            for (var i = 0; i < this.areaOfExpertiseTemp.length; i++) {
                if (this.areaOfExpertiseTemp[i] == category.subcat_code) {
                    // console.log(this.areaOfExpertiseTemp[i] + '-' + category.subcat_code)
                    this.areaOfExpertiseTemp.splice(i, 1);
                }
            }
            this.areaOfExpertiseTemp = this.removeDuplicates(this.areaOfExpertiseTemp);
        }
    };
    //CHECK CATEGORY
    //CHECK TRADE VALIDATIONS
    ProEditMyProfileComponent.prototype.checkValidationTrade = function () {
        var _this = this;
        if (this.addTradeLicenseList.get('tradeLicense').value.length > 0) {
            this.tradeStatusCheck = true;
        }
        else {
            this.tradeStatusCheck = false;
        }
        this.tradeLicenseList.forEach(function (e) {
            //////// console.log(e)
            if (e.stateRegisteredIn == "" || e.tradeLicense == "" || e.tradeLicenseExpiration == "" || e.tradeLicenseNumber == "") {
                //////// console.log('The empty')
                _this.tradeStatusCheck = true;
                return false;
            }
            if (e.stateRegisteredIn == null || e.tradeLicense == null || e.tradeLicenseExpiration == null || e.tradeLicenseNumber == null) {
                //////// console.log('The empty')
                _this.tradeStatusCheck = true;
                return false;
            }
            else if (e.stateRegisteredIn !== "" && e.tradeLicense !== "" && e.tradeLicenseExpiration !== "" && e.tradeLicenseNumber !== "") {
                //////// console.log('The not empty')
                _this.tradeStatusCheck = false;
                return false;
            }
        });
    };
    //CHECK TRADE VALIDATIONS
    //FETCH PROZ LOCATION
    ProEditMyProfileComponent.prototype.prozLocation = function (prozId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getProzLocation/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozLocationFetch = response.response;
                var addressMixed = _this.prozLocationFetch[0].businessAddressLine1 + "," + _this.prozLocationFetch[0].city + "," + _this.prozLocationFetch[0].zipCode;
                // this.geocoding.getLatLongViaZipcode(addressMixed)
                //   .subscribe(address => {
                //     var coordObj = {
                //       lat: address.lat,
                //       lng: address.lng,
                //     }
                //     google.maps.event.addDomListener(window, 'load', this.initializeZipMap(coordObj));
                //   })
                _this.categoryProz(response.response[0].tradeLicense);
                return false;
            }
            else {
                _this.toastr.warning("No Records Found");
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //FETCH PROZ LOCATION
    //GOOGLE MAP INITIALISATION
    ProEditMyProfileComponent.prototype.initializeZipMap = function (coordinates) {
        var _this = this;
        //////// console.log(JSON.stringify(coordinates))
        //////// console.log(coordinates)
        this.infoWindowSet = new google.maps.InfoWindow();
        var isMobile = (navigator.userAgent.toLowerCase().indexOf('android') > -1) ||
            (navigator.userAgent.match(/(iPod|iPhone|iPad|BlackBerry|Windows Phone|iemobile)/));
        if (isMobile) {
            var viewport = document.querySelector("meta[name=viewport]");
            viewport.setAttribute('content', 'initial-scale=1.0, user-scalable=no');
        }
        var mapDiv = document.getElementById('google_map');
        mapDiv.style.width = isMobile ? '100%' : '100%';
        mapDiv.style.height = isMobile ? '100%' : '400px';
        this.mapSet = new google.maps.Map(mapDiv, {
            center: new google.maps.LatLng(parseFloat(coordinates.lat), parseFloat(coordinates.lng)),
            zoom: 8,
            mapTypeId: google.maps.MapTypeId['ROADMAP']
        });
        var marker = new google.maps.Marker({
            position: { lat: parseFloat(coordinates.lat), lng: parseFloat(coordinates.lng) },
            map: this.mapSet,
        });
        this.mapSet.controls[google.maps.ControlPosition['RIGHT_BOTTOM']].push(document.getElementById('googft-legend-open'));
        this.mapSet.controls[google.maps.ControlPosition['RIGHT_BOTTOM']].push(document.getElementById('googft-legend'));
        this.layerSet = new google.maps.FusionTablesLayer({
            map: this.mapSet,
            heatmap: { enabled: false },
            query: {
                select: "col13",
                from: "1I9tW-TTrYj-84uoRfdBcFwgcJOsmnguq1Y_Hevkd",
                where: ""
            },
            options: {
                styleId: 2,
                templateId: 2
            }
        });
        if (isMobile) {
            var legend = document.getElementById('googft-legend');
            var legendOpenButton = document.getElementById('googft-legend-open');
            var legendCloseButton = document.getElementById('googft-legend-close');
            legend.style.display = 'none';
            legendOpenButton.style.display = 'block';
            legendCloseButton.style.display = 'block';
            legendOpenButton.onclick = function () {
                legend.style.display = 'block';
                legendOpenButton.style.display = 'none';
            };
            legendCloseButton.onclick = function () {
                legend.style.display = 'none';
                legendOpenButton.style.display = 'block';
            };
        }
        this.layerSet.set("styles", [{
                where: "'name' IN('" + this.counties.join("','") + "')",
                polygonOptions: {
                    fillColor: "#00FF00"
                }
            }]);
        google.maps.event.addListener(this.layerSet, 'click', function (e) {
            //////// console.log(this.counties)
            //////// console.log(this.selected)
            var val = e.row['name'].value;
            _this.selected[val] = (!_this.selected[val]) ? true : false;
            //////// console.log('This is the selected ' + JSON.stringify(this.selected))
            for (var k in _this.selected) {
                if (_this.selected[k] == true) {
                    if (_this.counties.includes(k) == false) {
                        _this.counties.push(k);
                        // this.getHouseHoldsViaCounty(e, this.counties, k)
                        //////// console.log('This is the selected in for ' + JSON.stringify(this.counties) + ' ' + JSON.stringify(this.selected))
                        return false;
                    }
                }
                else {
                    //////// console.log('This is the selected in else 2 ' + JSON.stringify(k))
                    _this.ruinCountyLayer(k);
                }
            }
        });
        // //CLICK EVENT ON THE LAYER
    };
    //GOOGLE MAP INITIALISATION
    //API FOR HOUSEHOLDS VIA COUNTY
    ProEditMyProfileComponent.prototype.getHouseHoldsViaCounty = function (e, counties, county) {
        var _this = this;
        //this.spinner.show()
        //////// console.log(JSON.stringify(this.selected))
        //////// console.log(JSON.stringify(counties))
        //SET COUNTY LAYER
        this.layerSet.set("styles", [{
                where: "'name' IN('" + counties.join("','") + "')",
                polygonOptions: {
                    fillColor: "#00FF00"
                }
            }]);
        //SET COUNTY LAYER
        // this.getZipcodesFromCountyCounty(county)
        this.ngZone.run(function () {
            _this.infoWindowSet.setContent(e.infoWindowHtml = '<div><b>County</b><p>' + e.row['name'].value + '</p></div>');
            _this.infoWindowSet.setPosition(e.latLng);
            _this.infoWindowSet.open(_this.mapSet);
            _this.countyStatus = true;
            var categoryName = [];
            for (var i = 0; i < _this.prozLocationFetch[0].tradeLicense.split(',').length; i++) {
                //////// console.log(this.prozLocationFetch[0].tradeLicense.split(',')[i])
                var subCategoryListAlias = _this.subCategoriesList;
                var subCategoriesList = subCategoryListAlias.filter(function (value) { return value.cat_code === _this.prozLocationFetch[0].tradeLicense.split(',')[i]; });
                //////// console.log(subCategoriesList)
                var catObj = {
                    serviceName: subCategoriesList[0].serviceCategoryName,
                    serviceCode: subCategoriesList[0].cat_code,
                    serviceCategories: [],
                    checkedNewLead: false
                };
                subCategoriesList.forEach(function (e) {
                    catObj.serviceCategories.push({
                        baseHousehold: e.baseHousehold,
                        cat_code: e.cat_code,
                        categoryName: e.categoryName,
                        checked: e.checked,
                        checkedNew: e.checkedNew,
                        checkedNewLead: e.checkedNewLead,
                        createdBy: e.createdBy,
                        createdOn: e.createdOn,
                        estimatedCost: e.estimatedCost,
                        id: e.id,
                        modifiedBy: e.modifiedBy,
                        modifiedOn: e.modifiedOn,
                        monthlyFee: e.monthlyFee,
                        perLead: e.perLead,
                        perLeadCost: e.perLeadCost,
                        prozId: e.prozId,
                        qDiscount: e.qDiscount,
                        quaterlyFee: e.quaterlyFee,
                        serviceCategoryName: e.serviceCategoryName,
                        serviceSubCategoryName: e.serviceSubCategoryName,
                        status: e.status,
                        subcat_code: e.subcat_code,
                        subcategoryDescription: e.subcategoryDescription,
                        subcategoryName: e.subcategoryName,
                        subscriptionType: e.subscriptionType,
                        yDiscount: e.yDiscount,
                        yearlyFee: e.yearlyFee,
                    });
                });
                categoryName.push(catObj);
                //////// console.log(categoryName)
                if (i === _this.prozLocationFetch[0].tradeLicense.split(',').length - 1) {
                    _this.countyList.push({
                        proCode: _this.activatedRoute.snapshot.params['prozId'],
                        checked: false,
                        county: e.row['name'].value,
                        households: 0,
                        category: categoryName,
                        subCategoriesListMonthly: categoryName,
                        subCategoriesListPerLead: categoryName,
                        totalEstimatedCost: 0
                    });
                    var countyObj = {
                        county: e.row['name'].value
                    };
                    //this.getZipcodesFromCountyData(countyObj)
                    _this.applyChange('manual');
                    categoryName = [];
                }
            }
        });
    };
    //API FOR HOUSEHOLDS VIA COUNTY  
    //GET ZIPCODES FROM COUNTY
    ProEditMyProfileComponent.prototype.getZipcodesFromCountyCounty = function (data, stateCode) {
        var _this = this;
        var countyData = data;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getZipcodeFromCounty/' + data + '/' + stateCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                var displayZipcodes = response.response;
                displayZipcodes.forEach(function (e) {
                    e.proCode = _this.activatedRoute.snapshot.params['prozId'];
                    e.checked = true;
                });
                ////// console.log('call insert')
                _this.insertCountiesZipcodeBatchDirect(countyData, displayZipcodes);
                // return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET ZIPCODES FROM COUNTY
    //INSERT COUNTIES ZIPCODE BATCH
    ProEditMyProfileComponent.prototype.insertCountiesZipcodeBatch = function (county) {
        var _this = this;
        this.zipcodeValidation = false;
        var displayZipcodes = this.displayZipcodes.filter(function (value) { return value.checked == true; });
        if (displayZipcodes.length === 0) {
            this.zipcodeValidation = true;
            return false;
        }
        var countiesZipcodeObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            county: county,
            stateCode: displayZipcodes[0].stateCode,
            zipcodes: displayZipcodes
        };
        //////// console.log(countiesZipcodeObj)
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/countiesZipcodeBatchInsert', countiesZipcodeObj)
            .subscribe(function (data) {
            var response = data.json();
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //INSERT COUNTIES ZIPCODE BATCH
    //CLEAR ZIPS
    ProEditMyProfileComponent.prototype.clearZips = function () {
        this.displayZipcodes = [];
    };
    //CLEAR ZIPS
    //INSERT COUNTIES ZIPCODE BATCH DIRECT
    ProEditMyProfileComponent.prototype.insertCountiesZipcodeBatchDirect = function (county, zipcodesData) {
        var _this = this;
        //// console.log('insert1')
        var countiesZipcodeObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            county: county,
            zipcodes: zipcodesData
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/countiesZipcodeBatchInsertDirect', countiesZipcodeObj)
            .subscribe(function (data) {
            var response = data.json();
            //// console.log('succ'+response)
            _this.spinner.hide();
            _this.getCountiesList(countiesZipcodeObj.prozId);
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //INSERT COUNTIES ZIPCODE BATCH DIRECT
    //RUIN COUNTY LAYER
    ProEditMyProfileComponent.prototype.ruinCountyLayer = function (county) {
        var _this = this;
        //////// console.log(county)
        this.ngZone.run(function () {
            _this.counties = _this.counties.filter(function (value) { return value !== county; });
            _this.countyList = _this.countyList.filter(function (value) { return value.county !== county; });
            localStorage.setItem('proServiceAreas', JSON.stringify(_this.countyList));
            _this.countyList.forEach(function (e) {
                e.firstName = _this.prozInDetail.firstName;
                e.lastName = _this.prozInDetail.lastName;
                e.mobileNumber = _this.prozInDetail.mobileNumber;
                e.emailId = _this.prozInDetail.emailId;
                e.prozId = _this.activatedRoute.snapshot.params['prozId'];
                e.totalHouseHolds = e.households;
            });
            _this.countyList.length == 0 ? _this.countyStatus = false : _this.countyStatus = true;
            //////// console.log('This is the county ' + JSON.stringify(this.counties) + ' ' + county)
            _this.layerSet.set("styles", [{
                    where: "'name' IN('" + _this.counties.join("','") + "')",
                    polygonOptions: {
                        fillColor: "#00FF00"
                    }
                }]);
            _this.infoWindowSet.open(null);
            _this.deleteCountyAndPro({ county: county });
        });
    };
    //RUIN COUNTY LAYER
    //DELETE ZIPCODES
    ProEditMyProfileComponent.prototype.deleteZipcodes = function (county) {
        var _this = this;
        //this.spinner.show()
        this.showMap = false;
        var deleteCountyObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            county: county.county,
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/deleteZipcodesCounties', deleteCountyObj)
            .subscribe(function (data) {
            var response = data.json();
            _this.streetMaps = Object(leaflet__WEBPACK_IMPORTED_MODULE_12__["tileLayer"])('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                detectRetina: true,
            });
            _this.options = {
                layers: [_this.streetMaps],
                zoom: 7,
                center: Object(leaflet__WEBPACK_IMPORTED_MODULE_12__["latLng"])([46.879966, -121.726909])
            };
            _this.showMap = true;
            _this.spinner.hide();
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //DELETE ZIPCODES
    //DELETE COUNTY
    ProEditMyProfileComponent.prototype.deleteCounty = function (county) {
        var _this = this;
        this.spinner.show();
        var countyCheckboxValidator = this.countyList[0].subCategoriesListPerLead.filter(function (value) { return value.checkedNewLead === true; });
        if (countyCheckboxValidator.length === 0) {
            this.saveAndContinueStatus = true;
        }
        this.totalNumberOfHouses = 0;
        this.ngZone.run(function () {
            _this.countyList = _this.countyList.filter(function (value) { return value !== county; });
            localStorage.setItem('proServiceAreas', JSON.stringify(_this.countyList));
            _this.counties = _this.counties.filter(function (value) { return value !== county.county; });
            _this.countyStore = _this.countyStore.filter(function (value) { return value.county !== county.county; });
            _this.deleteZipcodes(county);
            _this.deleteCountyAndPro(county.county);
            _this.countyList.forEach(function (e) {
                e.firstName = _this.prozInDetail.firstName;
                e.lastName = _this.prozInDetail.lastName;
                e.mobileNumber = _this.prozInDetail.mobileNumber;
                e.emailId = _this.prozInDetail.emailId;
                e.prozId = _this.activatedRoute.snapshot.params['prozId'];
                e.totalHouseHolds = e.households;
                _this.totalNumberOfHouses = parseInt(_this.totalNumberOfHouses) + parseInt(e.households);
            });
            _this.countyList.length == 0 ? _this.countyStatus = false : _this.countyStatus = true;
            // this.layerSet.set("styles", [{
            //   where: "'name' IN('" + this.counties.join("','") + "')",
            //   polygonOptions: {
            //     fillColor: "#00FF00"
            //   }
            // }]);
        });
        // this.infoWindowSet.open(null);
        this.selected = {};
    };
    //DELETE COUNTY
    //DELETE PRO AND COUNTY
    ProEditMyProfileComponent.prototype.deleteCountyAndPro = function (county) {
        var _this = this;
        var deleteCountyObj = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
            county: county,
        };
        //////// console.log(deleteCountyObj)
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/deleteCountyPro', deleteCountyObj)
            .subscribe(function (data) {
            var response = data.json();
            //////// console.log(response)
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //DELETE PRO AND COUNTY
    //APPLY CHANGE
    ProEditMyProfileComponent.prototype.applyChange = function (mode) {
        var _this = this;
        if (this.countyList.length == 0) {
            this.toastr.info('Select Counties Before Submission');
            return false;
        }
        else {
            this.countyList.forEach(function (data, index) {
                var validateSubmit = data.subCategoriesListPerLead.filter(function (val) { return val.checkedNewLead == true; });
                if (validateSubmit.length > 0) {
                    _this.disableButton = false;
                }
                else {
                    _this.disableButton = true;
                }
                if (index == _this.countyList.length - 1) {
                    if (_this.disableButton == false) {
                        _this.spinner.show();
                        var applyChangeObj = {
                            "prozId": _this.activatedRoute.snapshot.params['prozId'],
                            "firstName": _this.prozInDetail.firstName,
                            "lastName": _this.prozInDetail.lastName,
                            "mobileNumber": _this.prozInDetail.mobileNumber,
                            "emailId": _this.prozInDetail.emailId,
                            "serviceArea": 'NA',
                            "serviceRadius": '0',
                            "serviceOffered": 'NA',
                            "subServices": 'NA',
                            "paymentType": 'NA',
                            "noOfHouseholds": 'NA',
                            "serviceCost": 'NA',
                            "totalServiceCost": 0,
                            "totalHouseHolds": 0,
                            "houseHolds": 0,
                            "zipcode": 'NA'
                        };
                        if (mode === "button") {
                            _this.spinner.show();
                        }
                        _this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/addServiceArea', applyChangeObj)
                            .subscribe(function (data) {
                            var response = data.json();
                            //////// console.log(response)
                            if (response.status === 200) {
                                // this.insertCountiesBatch(mode)
                                _this.spinner.hide();
                            }
                            else {
                                _this.toastr.warning('Unable to connect to server');
                            }
                        }, function (error) {
                            _this.toastr.warning('Unable to connect to server');
                        });
                    }
                    else {
                        _this.toastr.info('Please Select atleast one service to proceed');
                    }
                }
            });
        }
    };
    //APPLY CHANGE
    //INSERT COUNTIES BATCH
    ProEditMyProfileComponent.prototype.insertCountiesBatch = function (mode) {
        var _this = this;
        var countiesObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            counties: this.countyList,
            subscriptionType: this.typeOfSubscription
        };
        //////// console.log(countiesObj)
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/countiesBatchInsert', countiesObj)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                _this.spinner.hide();
            }
            //////// console.log(response)
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //INSERT COUNTIES BATCH
    //GET ZIPCODES FROM COUNTY NON INSERT
    ProEditMyProfileComponent.prototype.getZipcodesFromCountyData = function (data, stateCode, key) {
        var _this = this;
        if (key == 'view') {
            this.spinner.show();
            setTimeout(function () {
                /** spinner ends after 5 seconds */
                _this.spinner.hide();
            }, 2000);
        }
        this.displayZipcodes = [];
        var updateZipcodeHouses = false;
        this.showZipcode = false;
        var householdsZipcodes = 0;
        var county = data;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getZipcodeFromCounty/' + data.county + '/' + stateCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.zipcodeValidationEmpty = false;
                _this.displayZipcodes = response.response;
                _this.displayZipcodes.forEach(function (e) {
                    e.proCode = _this.activatedRoute.snapshot.params['prozId'];
                    e.zipcode = e.zipCode;
                    e.checked = false;
                    householdsZipcodes = householdsZipcodes + parseInt(e.households);
                });
                _this.countyList.forEach(function (e) {
                    if (e.county === county.county) {
                        e.households = householdsZipcodes;
                    }
                });
                //this.getZipcodesHouseholds(this.displayZipcodes)
                _this.getZipcodesFromCounty(county, stateCode);
                return false;
            }
            else {
                _this.displayZipcodes = [];
                _this.zipcodeValidationEmpty = true;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET ZIPCODES FROM COUNTY NON INSERT
    //GET HOUSEHOLDS FOR ZIPCODES
    ProEditMyProfileComponent.prototype.getZipcodesHouseholds = function (getHouseholdsZipcode) {
        var _this = this;
        getHouseholdsZipcode.forEach(function (e, i) {
            _this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getHouseHolds/' + e.zipcode)
                .subscribe(function (data) {
                var response = data.json();
                if (response.status === 200) {
                    e.households = response.response[1][0];
                }
                else {
                    e.households = 0;
                }
            }, function (error) {
                _this.toastr.warning('Unable to connect to server');
            });
        });
    };
    //GET HOUSEHOLDS FOR ZIPCODES
    //GET ZIPCODES FROM COUNTY
    ProEditMyProfileComponent.prototype.getZipcodesFromCounty = function (data, stateCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getZipcodeFromCountyTable/' + data.county + '/' + stateCode + '/' + this.activatedRoute.snapshot.params['prozId'], options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                var displayZipcodes = response.response;
                // console.log(displayZipcodes)
                for (var i = 0; i < displayZipcodes.length; i++) {
                    for (var j = 0; j < _this.displayZipcodes.length; j++) {
                        if (displayZipcodes[i].zipcode === _this.displayZipcodes[j].zipcode) {
                            _this.displayZipcodes[j].checked = true;
                            // console.log('true')
                        }
                        if (i == displayZipcodes.length - 1) {
                            _this.showZipcode = true;
                        }
                    }
                }
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET ZIPCODES FROM COUNTY
    //CATEGORIES PROZ
    ProEditMyProfileComponent.prototype.categoryProz = function (categoryCode) {
        var _this = this;
        //// console.log('cat')
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        var catCodeObj = {
            catCodes: categoryCode
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/subCategoryFromCategoryCounty', catCodeObj, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.subCategoriesList = response.response;
                // console.log(response.response)
                _this.subCategoriesList.forEach(function (e, i) {
                    e.prozId = _this.activatedRoute.snapshot.params['prozId'];
                    e.categoryName = categoryCode;
                    e.checked = false;
                    e.checkedNew = false;
                    e.checkedNewLead = false;
                    e.allowCheck = true;
                    e.estimatedCost = 0;
                    e.perLeadCost = 'NA';
                    e.subscriptionType = 'PerLead';
                    e.allowCatCheck = true;
                    if (i == _this.subCategoriesList.length - 1) {
                        // console.log(this.subCategoriesList)
                        _this.getFee(categoryCode);
                    }
                });
            }
            else {
                _this.noSubCategory = true;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //CATEGORIES PROZ
    ProEditMyProfileComponent.prototype.getFee = function (catCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        var catCodeObj = {
            catCodes: catCode
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/subCategoryFromPerLeadFee', catCodeObj, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.Feedata = response.response;
                _this.subCategoriesList.forEach(function (e, i) {
                    _this.Feedata.forEach(function (f) {
                        // console.log(f)
                        // console.log(e)
                        if (e.cat_code == f.cat_code) {
                            if (e.subcat_code == f.subcat_code) {
                                e.allowCatCheck = false;
                                e.allowCheck = false;
                                e.perLeadCost = 0;
                                e.perLead = f.perLead;
                                e.baseHousehold = 0;
                            }
                        }
                    });
                    if (i == _this.subCategoriesList.length - 1) {
                        // console.log(this.subCategoriesList)
                        _this.getCountiesList(_this.activatedRoute.snapshot.params['prozId']);
                    }
                });
            }
            else {
                // console.log('no data')
                _this.noSubCategory = true;
                _this.subCategoriesList.forEach(function (e) {
                    e.perLeadCost = 'NA';
                    e.allowCheck = true;
                    e.allowCatCheck = true;
                    e.baseHousehold = 0;
                });
                // console.log(this.subCategoriesList)
                _this.getCountiesList(_this.activatedRoute.snapshot.params['prozId']);
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES LIST
    ProEditMyProfileComponent.prototype.getCountiesList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.countyList = [];
        this.ngZone.run(function () {
            _this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getUniqueCounty/' + proCode, options)
                .subscribe(function (data) {
                var response = data.json();
                var categoryName = [];
                if (response.status == 200) {
                    _this.spinner.hide();
                    _this.countyStatus = true;
                    _this.countyStore = response.response;
                    //// console.log(this.countyStore)
                    _this.showMap = true;
                    _this.countyStore.forEach(function (e) {
                        _this.selected[e.county] = (!_this.selected[e.county]) ? true : false;
                        _this.counties.push(e.county);
                    });
                    _this.countyStore.forEach(function (f, j) {
                        var data = _this.prozLocationFetch[0].tradeLicense.split(',');
                        data.forEach(function (g, k) {
                            var subCategoryListAlias = _this.subCategoriesList;
                            var subCategoriesList = subCategoryListAlias.filter(function (value) { return value.cat_code === g; });
                            if (subCategoriesList.length > 0) {
                                // console.log(subCategoriesList)
                                if (subCategoriesList.length == 1 && subCategoriesList[0].perLead == 'NA') {
                                    var catObj = {
                                        serviceName: subCategoriesList[0].serviceCategoryName,
                                        allowCatCheck: subCategoriesList[0].allowCatCheck,
                                        serviceCode: subCategoriesList[0].cat_code,
                                        serviceCategories: [],
                                        checkedNewLead: false
                                    };
                                }
                                else {
                                    var catObj = {
                                        serviceName: subCategoriesList[0].serviceCategoryName,
                                        allowCatCheck: subCategoriesList[0].allowCatCheck,
                                        serviceCode: subCategoriesList[0].cat_code,
                                        serviceCategories: [],
                                        checkedNewLead: false
                                    };
                                }
                            }
                            subCategoriesList.forEach(function (e) {
                                catObj.serviceCategories.push({
                                    baseHousehold: e.baseHousehold,
                                    cat_code: e.cat_code,
                                    categoryName: e.categoryName,
                                    checked: e.checked,
                                    checkedNew: e.checkedNew,
                                    checkedNewLead: e.checkedNewLead,
                                    createdBy: e.createdBy,
                                    createdOn: e.createdOn,
                                    estimatedCost: e.estimatedCost,
                                    id: e.id,
                                    modifiedBy: e.modifiedBy,
                                    modifiedOn: e.modifiedOn,
                                    monthlyFee: e.monthlyFee,
                                    perLead: e.perLead,
                                    allowCheck: e.allowCheck,
                                    perLeadCost: e.perLeadCost,
                                    prozId: e.prozId,
                                    qDiscount: e.qDiscount,
                                    quaterlyFee: e.quaterlyFee,
                                    serviceCategoryName: e.serviceCategoryName,
                                    serviceSubCategoryName: e.serviceSubCategoryName,
                                    status: e.status,
                                    subcat_code: e.subcat_code,
                                    subcategoryDescription: e.subcategoryDescription,
                                    subcategoryName: e.subcategoryName,
                                    subscriptionType: e.subscriptionType,
                                    yDiscount: e.yDiscount,
                                    yearlyFee: e.yearlyFee,
                                });
                            });
                            categoryName.push(catObj);
                            if (k == data.length - 1) {
                                _this.countyList.push({
                                    proCode: _this.activatedRoute.snapshot.params['prozId'],
                                    county: f.county,
                                    state: f.state,
                                    stateCode: f.stateCode,
                                    households: 0,
                                    subCategoriesListPerLead: categoryName,
                                });
                                _this.ref.detectChanges();
                                // console.log(this.countyList)
                                categoryName = [];
                                _this.getCountiesCategoryList(proCode);
                            }
                            //
                        });
                        if (j == _this.countyStore.length - 1) {
                            _this.spinner.hide();
                        }
                    });
                    //LOAD LAYER
                    // this.loadSelected(this.countyStore)
                    //LOAD LAYER
                }
                else {
                    _this.countyStatus = false;
                    _this.spinner.hide();
                }
            }, function (error) {
                _this.toastr.warning("Unable to connect to server");
            });
        });
    };
    //GET COUNTIES LIST
    //GET COUNTIES CATEGORY LIST
    ProEditMyProfileComponent.prototype.getCountiesCategoryList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getCountiesCategoryList/' + proCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.countyCategory = response.response;
                _this.saveAndContinueStatus = false;
                //////// console.log(this.countyCategory)
                _this.getCountiesSubCategoryList(proCode);
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES CATEGORY LIST
    //GET COUNTIES SUB CATEGORY LIST
    ProEditMyProfileComponent.prototype.getCountiesSubCategoryList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getCountiesSubCategoryList/' + proCode, options)
            .subscribe(function (data) {
            var response = data.json();
            //////// console.log(response.response)
            if (response.status == 200) {
                _this.countySubCategory = response.response;
                // console.log(this.countySubCategory)
                // console.log(this.countyList)
                for (var i = 0; i < _this.countyList.length; i++) {
                    for (var k = 0; k < _this.countyList[i].subCategoriesListPerLead.length; k++) {
                        for (var j = 0; j < _this.countyCategory.length; j++) {
                            if (_this.countyList[i].proCode === _this.countyCategory[j].proCode && _this.countyList[i].county === _this.countyCategory[j].county && _this.countyList[i].subCategoriesListPerLead[k].serviceCode === _this.countyCategory[j].categoryCode && _this.countyList[i].stateCode === _this.countyCategory[j].stateCode) {
                                _this.countyList[i].subCategoriesListPerLead[k].checkedNewLead = true;
                                //////// console.log(this.countyList[i].subCategoriesListPerLead[k].checkedNewLead)
                                //////// console.log(this.countyList[i].subCategoriesListPerLead[k])
                            }
                        }
                    }
                }
                for (var i = 0; i < _this.countyList.length; i++) {
                    for (var k = 0; k < _this.countyList[i].subCategoriesListPerLead.length; k++) {
                        for (var l = 0; l < _this.countyList[i].subCategoriesListPerLead[k].serviceCategories.length; l++) {
                            for (var m = 0; m < _this.countySubCategory.length; m++) {
                                if (_this.countyList[i].proCode === _this.countySubCategory[m].proCode && _this.countyList[i].county === _this.countySubCategory[m].county && _this.countyList[i].subCategoriesListPerLead[k].serviceCode === _this.countySubCategory[m].categoryCode && _this.countyList[i].subCategoriesListPerLead[k].serviceCategories[l].subcat_code === _this.countySubCategory[m].subcategoryCode && _this.countyList[i].stateCode === _this.countySubCategory[m].stateCode) {
                                    _this.countyList[i].subCategoriesListPerLead[k].serviceCategories[l].checkedNewLead = true;
                                    _this.countyList[i].subCategoriesListPerLead[k].serviceCategories[l].perLeadCost = _this.countySubCategory[m].perLead;
                                    //////// console.log(this.countyList[i].subCategoriesListPerLead[k])
                                }
                            }
                        }
                    }
                }
                setTimeout(function () { _this.spinner.hide(); }, 500);
            }
            else {
                setTimeout(function () { _this.spinner.hide(); }, 500);
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES SUB CATEGORY LIST
    //SUB CATEGORY LEVEL INSERTION
    ProEditMyProfileComponent.prototype.subCategoryServiceLevelInsertion = function (countyData, categoryData) {
        var _this = this;
        //////// console.log('The level insertion 1' + JSON.stringify(countyData))
        //////// console.log('The level insertion 2' + JSON.stringify(categoryData))
        var subCatLevelInsertion = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
            county: countyData,
            households: countyData.households,
            categoryCode: categoryData.cat_code,
            subCategoryCode: categoryData.subcat_code,
            subcategoryName: categoryData.subcategoryName,
            categoryName: categoryData.serviceCategoryName,
            perLead: categoryData.estimatedCost,
            subscriptionType: this.typeOfSubscription
        };
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/serviceSubCategoryLevelInsertion', subCatLevelInsertion, options)
            .subscribe(function (data) {
            var response = data.json();
            //////// console.log(response)
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //SUB CATEGORY LEVEL INSERTION
    //SUB CATEGORY LEVEL DELETION
    ProEditMyProfileComponent.prototype.categorySubServiceLevelDeletion = function (countyData, categoryData) {
        var _this = this;
        //////// console.log('The level deletion 1' + JSON.stringify(countyData))
        //////// console.log('The level deletion 2' + JSON.stringify(categoryData))
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var subCatLevelDeletion = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
            countyData: countyData,
            categoryCode: categoryData.cat_code,
            subCategoryCode: categoryData.subcat_code,
        };
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/serviceSubCategoryLevelDeletion', subCatLevelDeletion, options)
            .subscribe(function (data) {
            var response = data.json();
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //SUB CATEGORY LEVEL DELETION
    //CLEAR MAP
    ProEditMyProfileComponent.prototype.clearMap = function () {
        this.countyList = [];
        this.counties = [];
        this.selected = {};
        this.totalNumberOfHouses = 0;
        this.clearMapAPI();
        this.countyStore = [];
        this.showMap = false;
        this.saveAndContinueStatus = true;
        localStorage.setItem('proServiceAreas', null);
    };
    //CLEAR MAP
    //CLEAR MAP API
    ProEditMyProfileComponent.prototype.clearMapAPI = function () {
        var _this = this;
        var clearMapObj = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
        };
        this.spinner.show();
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/clearMapAPI', clearMapObj)
            .subscribe(function (data) {
            var response = data.json();
            //// console.log(response)
            if (response.status === 200) {
                _this.streetMaps = Object(leaflet__WEBPACK_IMPORTED_MODULE_12__["tileLayer"])('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    detectRetina: true,
                });
                _this.options = {
                    layers: [_this.streetMaps],
                    zoom: 7,
                    center: Object(leaflet__WEBPACK_IMPORTED_MODULE_12__["latLng"])([46.879966, -121.726909])
                };
                _this.showMap = true;
                window.location.reload();
                _this.spinner.hide();
                _this.prozLocation(_this.activatedRoute.snapshot.params['prozId']);
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //CLEAR MAP API
    //CHANGE CATEGORY SUB LEAD
    ProEditMyProfileComponent.prototype.changeSubCategoryServiceLead = function (countyData, categoryData) {
        var _this = this;
        // console.log(categoryData)
        var countyPerLead = countyData.subCategoriesListPerLead.filter(function (value) { return value.checkedNewLead === true && value.serviceCode === categoryData.cat_code; });
        //////// console.log(countyPerLead)
        if (countyPerLead.length === 0) {
            countyData.subCategoriesListPerLead.forEach(function (e) {
                if (e.serviceCode === categoryData.cat_code) {
                    //////// console.log('called at true in zero')
                    _this.paymentType(categoryData, 'PerLead', countyData);
                    _this.categoryServiceLevelInsertionForZero(countyData, e);
                    _this.subCategoryServiceLevelInsertion(countyData, categoryData);
                    e.checkedNewLead = true;
                    _this.saveAndContinueStatus = false;
                }
            });
        }
        else {
            countyData.subCategoriesListPerLead.forEach(function (e) {
                if (e.serviceCode === categoryData.cat_code) {
                    // console.log(categoryData)
                    var countyPerLeadInsideForButton = e.serviceCategories.filter(function (value) { return value.checkedNewLead === true; });
                    //////// console.log(countyPerLeadInsideForButton)
                    if (countyPerLeadInsideForButton.length === 0) {
                        //////// console.log('called at true in zero countyPerLeadInsideForButton')
                        // console.log(categoryData)
                        categoryData.perLeadCost = 0;
                        _this.categoryServiceLevelDeletion(countyData, e);
                        e.checkedNewLead = false;
                        _this.saveAndContinueStatus = true;
                    }
                    else {
                        e.checkedNewLead = true;
                        if (categoryData.checkedNewLead === true && _this.typeOfSubscription == 'perLead') {
                            _this.paymentType(categoryData, 'PerLead', countyData);
                            _this.subCategoryServiceLevelInsertion(countyData, categoryData);
                        }
                        else {
                            // console.log(categoryData)
                            countyData.totalEstimatedCost = countyData.totalEstimatedCost - categoryData.estimatedCost;
                            categoryData.perLeadCost = 0;
                            _this.categorySubServiceLevelDeletion(countyData, categoryData);
                        }
                    }
                    // var countyPerLeadInside = e.serviceCategories.filter(value => value.checkedNewLead === true)
                    // //////// console.log(countyPerLeadInside)
                    // if (countyPerLeadInside.length === 0) {
                    //   //////// console.log('called at true in zero countyPerLeadInside')
                    //   categoryData.perLeadCost = 0
                    //   this.categoryServiceLevelDeletion(countyData, e)
                    //   e.checkedNewLead = false
                    // } else {
                    //   if (categoryData.checkedNewLead === true && this.typeOfSubscription == 'perLead') {
                    //     this.paymentType(categoryData, 'PerLead', countyData)
                    //     this.subCategoryServiceLevelInsertion(countyData, categoryData)
                    //   } else {
                    //     countyData.totalEstimatedCost = countyData.totalEstimatedCost - categoryData.estimatedCost
                    //     categoryData.perLeadCost = 0
                    //     this.categorySubServiceLevelDeletion(countyData, categoryData)
                    //   }
                    // }
                }
            });
        }
    };
    //CHANGE CATEGORY SUB LEAD
    //CHANGE CATEGORY SERVICE LEAD
    ProEditMyProfileComponent.prototype.changeCategoryServiceLead = function (countyData, categoryData) {
        var _this = this;
        // console.log(countyData)
        // console.log(categoryData)
        var countyCheckboxValidator = countyData.subCategoriesListPerLead.filter(function (value) { return value.checkedNewLead === true && value.serviceCode === categoryData.cat_code; });
        //////// console.log(countyCheckboxValidator)
        if (countyCheckboxValidator.length === 0) {
            this.saveAndContinueStatus = true;
            if (categoryData.checkedNewLead === true && this.typeOfSubscription == 'perLead') {
                categoryData.serviceCategories.forEach(function (e, i) {
                    if (e.allowCheck == false) {
                        // console.log(e)
                        e.checkedNewLead = categoryData.checkedNewLead;
                        _this.paymentType(e, 'PerLead', countyData);
                    }
                    if (i === categoryData.serviceCategories.length - 1) {
                        //////// console.log('if exit loop ' + JSON.stringify(categoryData))//API CALL INSERTION
                        _this.categoryServiceLevelInsertion(countyData, categoryData);
                    }
                });
            }
            else {
                // console.log('else')
                categoryData.serviceCategories.forEach(function (e, i) {
                    //////// console.log('The perLead fee ' + JSON.stringify(e))
                    if (e.allowCheck == false) {
                        e.perLeadCost = 0;
                        e.checkedNewLead = categoryData.checkedNewLead;
                    }
                    if (i === categoryData.serviceCategories.length - 1) {
                        //////// console.log('else exit loop')//API CALL DELETION
                        _this.categoryServiceLevelDeletion(countyData, categoryData);
                    }
                });
            }
        }
        else {
            this.saveAndContinueStatus = false;
            if (categoryData.checkedNewLead === true && this.typeOfSubscription == 'perLead') {
                categoryData.serviceCategories.forEach(function (e, i) {
                    if (e.allowCheck == false) {
                        // console.log(e)
                        e.checkedNewLead = categoryData.checkedNewLead;
                        _this.paymentType(e, 'PerLead', countyData);
                    }
                    if (i === categoryData.serviceCategories.length - 1) {
                        //////// console.log('if exit loop ' + JSON.stringify(categoryData))//API CALL INSERTION
                        _this.categoryServiceLevelInsertion(countyData, categoryData);
                    }
                });
            }
            else {
                // console.log('else2')
                categoryData.serviceCategories.forEach(function (e, i) {
                    //////// console.log('The perLead fee ' + JSON.stringify(e))
                    if (e.allowCheck == false) {
                        e.perLeadCost = 0;
                        e.checkedNewLead = categoryData.checkedNewLead;
                    }
                    if (i === categoryData.serviceCategories.length - 1) {
                        //////// console.log('else exit loop')//API CALL DELETION
                        _this.categoryServiceLevelDeletion(countyData, categoryData);
                    }
                });
            }
        }
    };
    //CHANGE CATEGORY SERVICE LEAD
    //CATEGORY SERVICE LEVEL INSERTION
    ProEditMyProfileComponent.prototype.categoryServiceLevelInsertionForZero = function (countyData, categoryData) {
        var _this = this;
        // console.log(categoryData)
        var categoryDataService = categoryData.serviceCategories.filter(function (value) { return value.checkedNewLead === true && value.serviceCode === categoryData.cat_code; });
        // console.log(categoryDataService)
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var catLevelInsertion = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
            countyData: countyData,
            subscriptionType: this.typeOfSubscription,
            categoryName: categoryData.serviceName,
            categoryCode: categoryData.serviceCode,
            serviceCategories: categoryDataService
        };
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/serviceCategoryLevelInsertionForZero', catLevelInsertion, options)
            .subscribe(function (data) {
            var response = data.json();
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //CATEGORY SERVICE LEVEL INSERTION
    //CATEGORY SERVICE LEVEL INSERTION
    ProEditMyProfileComponent.prototype.categoryServiceLevelInsertion = function (countyData, categoryData) {
        var _this = this;
        //////// console.log(categoryData.serviceCategories.length)
        var categoryDataService = categoryData.serviceCategories.filter(function (value) { return value.checkedNewLead === true; });
        // console.log(categoryData.serviceCategories)
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var catLevelInsertion = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
            countyData: countyData,
            subscriptionType: this.typeOfSubscription,
            categoryName: categoryData.serviceName,
            categoryCode: categoryData.serviceCode,
            serviceCategories: categoryDataService
        };
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/serviceCategoryLevelInsertion', catLevelInsertion, options)
            .subscribe(function (data) {
            var response = data.json();
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //CATEGORY SERVICE LEVEL INSERTION
    //CATEGORY SERVICE LEVEL DELETION
    ProEditMyProfileComponent.prototype.categoryServiceLevelDeletion = function (countyData, categoryData) {
        var _this = this;
        //////// console.log('The level deletion')
        var categoryDataService = categoryData.serviceCategories.filter(function (value) { return value.checkedNewLead === true; });
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var catLevelInsertion = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
            countyData: countyData,
            categoryCode: categoryData.serviceCode,
        };
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/serviceCategoryLevelDeletion', catLevelInsertion, options)
            .subscribe(function (data) {
            var response = data.json();
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //CATEGORY SERVICE LEVEL DELETION
    //ZIPCODE SELECTION
    ProEditMyProfileComponent.prototype.zipcodesSelection = function (data) {
        var _this = this;
        var displayZipcodes = this.displayZipcodes.filter(function (value) { return value.checked === true; });
        if (displayZipcodes.length === 0) {
            this.zipcodeValidation = true;
            this.selectAllZipcodesVar = false;
        }
        else {
            this.zipcodeValidation = false;
            this.displayZipcodes.map(function (e, i) {
                if (e.checked == true) {
                    _this.selectAllZipcodesVar = true;
                }
                else {
                    _this.selectAllZipcodesVar = false;
                    return false;
                }
            });
        }
    };
    //ZIPCODE SELECTION
    //CALCULATIONS FOR COST
    ProEditMyProfileComponent.prototype.paymentType = function (subscriptionType, type, countyData) {
        //////// console.log(subscriptionType)
        subscriptionType.totalNumberOfHouses = this.totalNumberOfHouses;
        if (type == 'Monthly') {
            //////// console.log('Called payment type ' + type)
            //////// console.log(subscriptionType)
            this.houseHolds(subscriptionType.totalNumberOfHouses, type, subscriptionType, countyData);
        }
        else if (type == 'Quarterly') {
            ////////// console.log('Called payment type ' + this.totalNumberOfHouses)
            this.houseHolds(subscriptionType.totalNumberOfHouses, type, subscriptionType, countyData);
        }
        else if (type == 'Yearly') {
            ////////// console.log('Called payment type ' + this.totalNumberOfHouses)
            this.houseHolds(subscriptionType.totalNumberOfHouses, type, subscriptionType, countyData);
        }
        else if (type == 'PerLead') {
            ////////// console.log('Called payment type ' + this.totalNumberOfHouses)
            this.houseHolds(subscriptionType.totalNumberOfHouses, type, subscriptionType, countyData);
        }
    };
    ProEditMyProfileComponent.prototype.houseHolds = function (totalNumberOfHouses, type, item, countyData) {
        //countyData.totalEstimatedCost = 0
        this.totalServiceCost = 0;
        var householdCount = this.totalNumberOfHouses / item.baseHousehold;
        if (type == "Monthly") {
            this.monthlyFee = item.monthlyFee * householdCount;
            item.estimatedCost = Math.round(this.monthlyFee);
            //////// console.log(item)
            countyData.totalEstimatedCost = countyData.totalEstimatedCost + item.estimatedCost;
            //////// console.log(item)
        }
        else if (type == "Quarterly") {
            item.estimatedCost = Math.round(item.quaterlyFee * householdCount);
        }
        else if (type == "Yearly") {
            item.estimatedCost = Math.round(item.yearlyFee * householdCount);
        }
        else if (type == "PerLead") {
            item.perLeadCost = Math.round(item.perLead);
            item.estimatedCost = item.perLeadCost;
            //////// console.log(item)
        }
    };
    ProEditMyProfileComponent.prototype.quaterlyCalculations = function (monthly, type, item) {
        this.quaterlyDiscountRate = 5 / 100;
        this.yearlyDiscountRate = 10 / 100;
        this.percentage = 100 / 100;
        this.quaterlyDiscount = 3;
        this.yearlyDiscount = 12;
        this.quaterly = monthly * this.quaterlyDiscount * (this.percentage - this.quaterlyDiscountRate);
        this.yearly = monthly * (this.percentage - this.yearlyDiscountRate) * this.yearlyDiscount;
        if (type == "Quarterly") {
            item.estimatedCost = Math.round(this.quaterly);
        }
        else if (type == "Yearly") {
            item.estimatedCost = Math.round(this.yearly);
        }
    };
    //CALCULATIONS FOR COST
    //SELECT ALL ZIPCODES
    ProEditMyProfileComponent.prototype.selectAllZipcodes = function (selectAllZipcodesVar) {
        var _this = this;
        this.displayZipcodes.forEach(function (e, i) {
            e.checked = selectAllZipcodesVar;
            if (i === _this.displayZipcodes.length - 1) {
                var displayZipcodes = _this.displayZipcodes.filter(function (value) { return value.checked === true; });
                if (displayZipcodes.length === 0) {
                    _this.zipcodeValidation = true;
                }
                else {
                    _this.zipcodeValidation = false;
                }
            }
        });
    };
    //SELECT ALL ZIPCODES
    //ADD TRADE LICENSE
    ProEditMyProfileComponent.prototype.addTradeLicense = function () {
        var _this = this;
        var state = [];
        var tradeLicense = [];
        var tradeLicenseNumber = [];
        var tradeLicenseExpiration = [];
        var tradeLicenseCategoryNames = [];
        this.addTradeLicenseList.get('tradeLicense').value.forEach(function (e, i) {
            state.push(e.stateRegisteredIn);
            tradeLicense.push(e.tradeLicense);
            tradeLicenseNumber.push(e.tradeLicenseNumber);
            tradeLicenseExpiration.push(e.tradeLicenseExpiration);
            tradeLicenseCategoryNames.push(e.tradeLicense);
        });
        var tradeDetailsObj = {
            "prozId": this.activatedRoute.snapshot.params['prozId'],
            "stateRegisteredIn": state,
            "tradeLicense": tradeLicense,
            "tradeLicenseNumber": tradeLicenseNumber,
            "tradeLicenseExpiration": tradeLicenseExpiration,
        };
        ////// console.log(tradeDetailsObj)
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/bulkTradeLicenseDetailsInsert', tradeDetailsObj)
            .subscribe(function (data) {
            var response = data.json();
            ////// console.log(response)
            if (response.status === 200) {
                if (_this.tradeLicenseDeleteObj.categoryCode === '') {
                    _this.toastr.success("Trade License Updated Successfully");
                    window.location.reload();
                    return false;
                }
                else {
                    _this.deleteLicenses();
                }
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //ADD TRADE LICENSE
    //ADD TRADE LICENSE NEW
    ProEditMyProfileComponent.prototype.addTradeLicenseNew = function () {
        var _this = this;
        var state = [];
        var tradeLicense = [];
        var tradeLicenseNumber = [];
        var tradeLicenseExpiration = [];
        var tradeLicenseCategoryNames = [];
        this.addTradeLicenseList.get('tradeLicense').value.forEach(function (e) {
            var tempCategory = _this.subCategoriesList.filter(function (value) { return value.cat_code = e.tradeLicense; });
            ////// console.log(tempCategory)
            state.push(e.stateRegisteredIn);
            tradeLicense.push(e.tradeLicense);
            tradeLicenseNumber.push(e.tradeLicenseNumber);
            tradeLicenseExpiration.push(e.tradeLicenseExpiration);
            tradeLicenseCategoryNames = tempCategory;
        });
        this.tradeLicenseList.forEach(function (e) {
            state.push(e.stateRegisteredIn);
            tradeLicense.push(e.tradeLicense);
            tradeLicenseNumber.push(e.tradeLicenseNumber);
            tradeLicenseExpiration.push(e.tradeLicenseExpiration);
            tradeLicenseCategoryNames.push(e.tradeLicense);
        });
        var tradeDetailsObj = {
            "prozId": this.activatedRoute.snapshot.params['prozId'],
            "stateRegisteredIn": state,
            "tradeLicense": tradeLicense,
            "tradeLicenseNumber": tradeLicenseNumber,
            "tradeLicenseExpiration": tradeLicenseExpiration,
        };
        //////// console.log(tradeDetailsObj)
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/bulkTradeLicenseDetailsInsert', tradeDetailsObj)
            .subscribe(function (data) {
            var response = data.json();
            //////// console.log(response)
            if (response.status === 200) {
                _this.toastr.success("Trade License Updated Successfully");
                window.location.reload();
                return false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //ADD TRADE LICENSE
    ProEditMyProfileComponent.prototype.cancel = function () {
        this.router.navigate(['/prozProfile/myProzProfile', this.activatedRoute.snapshot.params['prozId']]);
    };
    // Loads Geojson data on map function
    ProEditMyProfileComponent.prototype.onMapReady = function (map, key) {
        var _this = this;
        this.spinner.show();
        this.mapReg = map;
        this.HttP.get("assets/geolocations.json").subscribe(function (json) {
            //// console.log(json)
            json.features.map(function (val) {
                val.checked = false;
            });
            _this.json = json;
            var myStyle = {
                "color": "blue",
                "fillColor": ' rgb(242,239,233)',
                "weight": 0.5,
                "fillOpacity": 0.05,
                "opacity": 1,
            };
            // this.countyStore.forEach((a)=>{
            leaflet__WEBPACK_IMPORTED_MODULE_12__["geoJSON"](_this.json, {
                style: myStyle,
                onEachFeature: function (feature, layer) {
                    // popup content
                    var popupContent = '<p>' + feature.properties.NAME + '</p>';
                    // pop content ends here
                    //Open data in Popup on Map
                    layer.bindPopup(popupContent);
                    // Open data in Popoup on map ends
                    // Click event on Map
                    //// console.log(this.countyStore.length)
                    var name = feature.properties.NAME.toUpperCase();
                    _this.countyStore.forEach(function (a) {
                        //// console.log(a.stateCode+'-'+feature.properties.STATE)
                        if (a.county == name && a.stateCode == feature.properties.STATE) {
                            //// console.log(a)
                            feature['checked'] = true;
                            var style = {
                                fillColor: 'yellow',
                                fillOpacity: 0.5,
                                weight: 0.2,
                                opacity: 1,
                            };
                            var highlight = {
                                'fillColor': 'green',
                                'weight': 0.2,
                                'opacity': 1
                            };
                            layer['setStyle'](style);
                            layer['setStyle'](highlight);
                        }
                    });
                    layer.on('mouseover', function () {
                        if (feature['checked'] == true) {
                        }
                        else {
                            var style = {
                                fillColor: 'orange',
                                fillOpacity: 0.5,
                                weight: 0.2,
                                opacity: 0.8,
                            };
                            layer['setStyle'](style);
                        }
                        layer.openPopup();
                    });
                    layer.on('mouseout', function () {
                        if (feature['checked'] == true) {
                        }
                        else {
                            var style = {
                                "color": "blue",
                                "fillColor": ' rgb(242,239,233)',
                                "weight": 0.5,
                                "fillOpacity": 0.05,
                                "opacity": 1,
                            };
                            layer['setStyle'](style);
                        }
                    });
                    layer.on({
                        'click': function (e) {
                            var name = feature.properties.NAME.toUpperCase();
                            _this.featuresSelected = feature.properties.NAME;
                            //// console.log(feature)
                            if (feature['checked'] == true) {
                                e.target.closePopup();
                                feature['checked'] = false;
                                var style = {
                                    fillColor: ' rgb(242,239,233)',
                                    fillOpacity: 0.05,
                                    weight: 0.2,
                                    opacity: 1,
                                };
                                layer.bindPopup['true'];
                                var val = _this.featuresSelected.toUpperCase();
                                _this.delteCountyOnMap(_this.featuresSelected.toUpperCase());
                                layer['setStyle'](style);
                                layer['setStyle'](highlight);
                            }
                            else if (feature['checked'] == false) {
                                //// console.log(layer)
                                //// console.log(feature)
                                feature['checked'] = true;
                                var style = {
                                    fillColor: 'green',
                                    fillOpacity: 0.5,
                                    weight: 0.2,
                                    opacity: 1,
                                };
                                var highlight = {
                                    'fillColor': 'green',
                                    'weight': 0.2,
                                    'opacity': 1
                                };
                                _this.featuresSelected = feature.properties.NAME;
                                layer['setStyle'](style);
                                layer['setStyle'](highlight);
                                _this.getCountyManualy(_this.featureSelected, feature.properties.STATE);
                                // console.log(feature.properties.STATE)
                                _this.getZipcodesFromCountyCounty(_this.featuresSelected, feature.properties.STATE);
                                // this.getZipcodesFromCountyCounty(this.featuresSelected)
                            }
                        }
                    });
                    // Click event on Map ends here
                },
            }).addTo(map);
            if (_this.prozLocationFetch[0].longitude == 0 || _this.prozLocationFetch[0].latitude == 0) {
            }
            else {
                leaflet__WEBPACK_IMPORTED_MODULE_12__["marker"]([_this.prozLocationFetch[0].latitude, _this.prozLocationFetch[0].longitude]).addTo(map);
                map.setView([_this.prozLocationFetch[0].latitude, _this.prozLocationFetch[0].longitude], 7);
            }
            // })
            _this.spinner.hide();
        });
    };
    // MANUAL ENTERY OF COUNTY
    ProEditMyProfileComponent.prototype.getCountyManualy = function (featuresSelected, stateCode) {
        var _this = this;
        this.spinner.show();
        this.ngZone.run(function () {
            var categoryName = [];
            for (var i = 0; i < _this.prozLocationFetch[0].tradeLicense.split(',').length; i++) {
                var subCategoryListAlias = _this.subCategoriesList;
                // console.log(subCategoriesList)
                var subCategoriesList = subCategoryListAlias.filter(function (value) { return value.cat_code === _this.prozLocationFetch[0].tradeLicense.split(',')[i]; });
                var catObj = {
                    serviceName: subCategoriesList[0].serviceCategoryName,
                    serviceCode: subCategoriesList[0].cat_code,
                    serviceCategories: [],
                    checkedNewLead: false
                };
                subCategoriesList.forEach(function (e) {
                    catObj.serviceCategories.push({
                        baseHousehold: e.baseHousehold,
                        cat_code: e.cat_code,
                        categoryName: e.categoryName,
                        checked: e.checked,
                        checkedNew: e.checkedNew,
                        checkedNewLead: e.checkedNewLead,
                        createdBy: e.createdBy,
                        createdOn: e.createdOn,
                        estimatedCost: e.estimatedCost,
                        id: e.id,
                        modifiedBy: e.modifiedBy,
                        modifiedOn: e.modifiedOn,
                        monthlyFee: e.monthlyFee,
                        perLead: e.perLead,
                        perLeadCost: e.perLeadCost,
                        prozId: e.prozId,
                        qDiscount: e.qDiscount,
                        quaterlyFee: e.quaterlyFee,
                        serviceCategoryName: e.serviceCategoryName,
                        serviceSubCategoryName: e.serviceSubCategoryName,
                        status: e.status,
                        subcat_code: e.subcat_code,
                        subcategoryDescription: e.subcategoryDescription,
                        subcategoryName: e.subcategoryName,
                        subscriptionType: e.subscriptionType,
                        yDiscount: e.yDiscount,
                        yearlyFee: e.yearlyFee,
                    });
                });
                categoryName.push(catObj);
                if (i === _this.prozLocationFetch[0].tradeLicense.split(',').length - 1) {
                    // this.countyList.push({
                    //   proCode: this.activatedRoute.snapshot.params['prozId'],
                    //   checked: false,
                    //   county: this.featuresSelected,
                    //   households: 0,
                    //   category: categoryName,
                    //   subCategoriesListMonthly: categoryName,
                    //   subCategoriesListPerLead: categoryName,
                    //   totalEstimatedCost: 0
                    // })
                    var countyObj = {
                        county: _this.featuresSelected
                    };
                    _this.getZipcodesFromCountyData(countyObj, stateCode, 'ts');
                    //this.applyChange('manual')
                    categoryName = [];
                }
            }
            //localStorage.setItem('proServiceAreas', JSON.stringify(this.countyList));
            //this.totalNumberOfHouses = parseInt(this.totalNumberOfHouses) + parseInt(response.response[response.response.length - 1][2])
        });
    };
    // MANUAL ENTERY OF COUNTY
    // foreach feature for  map events
    //DELETE TOTAL COUNTY ON CLICK ON MAP
    ProEditMyProfileComponent.prototype.delteCountyOnMap = function (county) {
        var _this = this;
        this.ngZone.run(function () {
            _this.countyList = _this.countyList.filter(function (value) { return value.county !== county; });
            localStorage.setItem('proServiceAreas', JSON.stringify(_this.countyList));
            _this.counties = _this.counties.filter(function (value) { return value !== county.county; });
            _this.countyStore = _this.countyStore.filter(function (value) { return value.county !== county; });
            _this.deleteCountyAndPro(county);
            //  this.spinner.show()
            _this.countyList.length == 0 ? _this.countyStatus = false : _this.countyStatus = true;
            // this.layerSet.set("styles", [{
            //   where: "'name' IN('" + this.counties.join("','") + "')",
            //   polygonOptions: {
            //     fillColor: "#00FF00"
            //   }
            // }]);
        });
        //DELETE TOTAL COUNTY ON CLICK ON MAP
    };
    //CATEGORIES
    ProEditMyProfileComponent.prototype.getSubcat = function (i) {
        var trade = this.addTradeLicenseList.get('tradeLicense').value[i];
        // console.log("index" + i)
        this.getListOfSubCategories(trade['tradeLicense'], i);
    };
    //SUB CATEGORIES
    ProEditMyProfileComponent.prototype.getListOfSubCategories = function (tradeLicense, index) {
        var _this = this;
        // console.log("categorys" + JSON.stringify(tradeLicense))
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/subcategories/' + tradeLicense, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                _this.subCategoriesData = _this.subCategoriesData.filter(function (val) { return val.unique != index; });
                // console.log(response)
                //this.subCategoriesData=response.response
                // console.log(this.subCategoriesData)
                response.response.forEach(function (e) {
                    // console.log(this.addTradeLicenseList.get('tradeLicense').value)
                    _this.subCategoriesData.push({
                        unique: index,
                        subCategories: [e]
                    });
                    // console.log("subcatdata1" + JSON.stringify(this.subCategoriesData))
                });
                _this.subCategoriesData.forEach(function (e, i) {
                    e.checked = false;
                    if (i == _this.subCategoriesData.length - 1) {
                        _this.subCategoriesData.forEach(function (g, i) {
                            g.subCategories.forEach(function (h) {
                                _this.subcatArray.forEach(function (f) {
                                    if (f == h.subcat_code) {
                                        h.checked = true;
                                    }
                                });
                            });
                        });
                    }
                });
                // this.addTradeLicenseList.get('tradeLicense').value.forEach((e) => {
                //   // console.log(e)
                //   // console.log(this.subCategoriesData)
                //   this.subCategoriesData.forEach((f)=>{
                //     if(f.cat_code == e.tradeLicense){
                //     }else{
                //       this.subCategoriesData.splice(f)
                //     }
                //   })
                //   //this.subCategoriesData = this.subCategoriesData.filter(val => val.cat_code == e.tradeLicense)
                // })
                // console.log("subcatdata2" + JSON.stringify(this.subCategoriesData))
            }
            // this.subCategoriesData.forEach((e) => {
            //   e.checked = false;
            // })
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //SUB CATEGORIES
    ProEditMyProfileComponent.prototype.gotoTerms = function () {
        this.router.navigate(['/proz/terms', this.activatedRoute.snapshot.params['prozId']]);
    };
    // verifyotp() {
    // var headers = new Headers();
    // headers.append("Accept", 'application/json');
    // headers.append('Content-Type', 'application/json');
    // let options = new RequestOptions({ headers: headers });
    // let topObj = {
    //   "prozId": this.activatedRoute.snapshot.params['prozId'],
    //   businessPhone:this.serProzDetails.value.businessPhone
    // }
    // // console.log("otp.."+topObj)
    // this.http.post(Global.url + '/updatePhonenumber', topObj,options)
    //   .subscribe(data => {
    //     var response = data.json();
    //     if (response.status == 200) {
    //     }
    //   })
    // }
    ProEditMyProfileComponent.prototype.home = function () {
        this.router.navigate(['/proz-dashboard/prozDashboard/', this.loginData.loginCode]);
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('imageUpload'),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ProEditMyProfileComponent.prototype, "imageUploadVariable", void 0);
    ProEditMyProfileComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            providers: [_utilities_beyond__WEBPACK_IMPORTED_MODULE_8__["Beyond"], _utilities_imageupload__WEBPACK_IMPORTED_MODULE_3__["ImageUpload"], _utilities_geocode_service__WEBPACK_IMPORTED_MODULE_9__["GeocodingService"]],
            selector: 'app-pro-edit-my-profile',
            template: __webpack_require__(/*! ./pro-edit-my-profile.component.html */ "./src/app/proz-profile/pro-edit-my-profile/pro-edit-my-profile.component.html"),
            styles: [__webpack_require__(/*! ./pro-edit-my-profile.component.scss */ "./src/app/proz-profile/pro-edit-my-profile/pro-edit-my-profile.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_utilities_beyond__WEBPACK_IMPORTED_MODULE_8__["Beyond"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_http__WEBPACK_IMPORTED_MODULE_5__["Http"],
            _angular_common_http__WEBPACK_IMPORTED_MODULE_11__["HttpClient"],
            ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"],
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"],
            _utilities_geocode_service__WEBPACK_IMPORTED_MODULE_9__["GeocodingService"],
            _utilities_geocode_service__WEBPACK_IMPORTED_MODULE_9__["GeocodingService"],
            ngx_spinner__WEBPACK_IMPORTED_MODULE_10__["NgxSpinnerService"],
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
    ], ProEditMyProfileComponent);
    return ProEditMyProfileComponent;
}());



/***/ }),

/***/ "./src/app/proz-profile/proz-profile-confirmation/proz-profile-confirmation.component.css":
/*!************************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-confirmation/proz-profile-confirmation.component.css ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".login-container {\r\n    position: relative;\r\n    margin: 3% auto;\r\n    max-width: 100%;\r\n}\r\n\r\n.login-container .loginbox {\r\n    position: relative;\r\n    width: 100% !important;\r\n    height: auto !important;\r\n    padding: 0 0 0px 0;\r\n    box-shadow: 0 0 14px rgba(0,0,0,.1);\r\n}\r\n\r\n.login-container .loginbox .loginbox-title {\r\n    height: auto !important;\r\n    font-family: 'Arial', 'Helvetica', 'sans-serif' !important;\r\n}\r\n\r\n.login-container .loginbox .loginbox-social .social-buttons .button-facebook {\r\n    float: left;\r\n    border: 2px solid #3b5998;\r\n    color: #3b5998;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-right: 40%;\r\n    background-color: #fff;\r\n}\r\n\r\n.login-container .loginbox .loginbox-social .social-buttons .button-twitter {\r\n    float: left;\r\n    border: 2px solid #29c1f6;\r\n    color: #29c1f6;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-right: 35%;\r\n    background-color: #fff;\r\n}\r\n\r\n.login-container .loginbox .loginbox-social .social-buttons .button-google {\r\n    float: right;\r\n    border: 2px solid #ef4f1d;\r\n    color: #ef4f1d;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    background-color: #fff;\r\n}\r\n\r\n.loginbox-social {\r\n    padding: 0 0 0 0 !important; \r\n}\r\n\r\n.loginbox-title{\r\n    font-weight: bold !important;\r\n    font-size: 25px !important;\r\n}\r\n\r\nlabel{\r\n    font-weight:bold !important;\r\n}\r\n\r\nlabel .mandatory{\r\n    color:red;\r\n    font-size: 16px !important;\r\n    font-weight: bold !important;\r\n}\r\n\r\n.hr-blue-title{    \r\n    border-top: 3px solid #5DB2FF !important;\r\n}\r\n\r\n.hr-blue{    \r\n    border-top: 1px solid #5DB2FF !important;\r\n}\r\n\r\n.logoImage{\r\n    width:100px; \r\n    height:100px;\r\n    margin-top:5px; \r\n    border-width: 1px;   \r\n    border-color: #5DB2FF;   \r\n    border-style: solid; \r\n}\r\n\r\n.btn {\r\n    font-size: 20px !important;\r\n    font-weight: bold !important;\r\n    font-family: 'Arial', 'Helvetica', 'sans-serif' !important;\r\n}\r\n\r\n.form-title {\r\n    display: block;\r\n    padding: 8px 0;\r\n    border-bottom: 1px dashed #5DB2FF;\r\n    font-size: 15px;\r\n    font-weight: bold;\r\n    color: #5DB2FF;\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.green-text{\r\n    color: green;\r\n    font-family: 'Arial', 'Helvetica', 'sans-serif' !important;\r\n    text-align: center;\r\n}\r\n\r\n.green-text span{\r\n    font-weight: bold;\r\n}\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcHJvei1wcm9maWxlL3Byb3otcHJvZmlsZS1jb25maXJtYXRpb24vcHJvei1wcm9maWxlLWNvbmZpcm1hdGlvbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksbUJBQW1CO0lBQ25CLGdCQUFnQjtJQUNoQixnQkFBZ0I7Q0FDbkI7O0FBRUQ7SUFDSSxtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLHdCQUF3QjtJQUN4QixtQkFBbUI7SUFHbkIsb0NBQW9DO0NBQ3ZDOztBQUVEO0lBQ0ksd0JBQXdCO0lBQ3hCLDJEQUEyRDtDQUM5RDs7QUFHRDtJQUNJLFlBQVk7SUFDWiwwQkFBMEI7SUFDMUIsZUFBZTtJQUNmLG1CQUFtQjtJQUNuQixZQUFZO0lBQ1osYUFBYTtJQUNiLGtCQUFrQjtJQUNsQix1QkFBdUI7Q0FDMUI7O0FBRUQ7SUFDSSxZQUFZO0lBQ1osMEJBQTBCO0lBQzFCLGVBQWU7SUFDZixtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsdUJBQXVCO0NBQzFCOztBQUVEO0lBQ0ksYUFBYTtJQUNiLDBCQUEwQjtJQUMxQixlQUFlO0lBQ2YsbUJBQW1CO0lBQ25CLFlBQVk7SUFDWixhQUFhO0lBQ2IsdUJBQXVCO0NBQzFCOztBQUdBO0lBQ0csNEJBQTRCO0NBQy9COztBQUVEO0lBQ0ksNkJBQTZCO0lBQzdCLDJCQUEyQjtDQUM5Qjs7QUFFRDtJQUNJLDRCQUE0QjtDQUMvQjs7QUFFRDtJQUNJLFVBQVU7SUFDViwyQkFBMkI7SUFDM0IsNkJBQTZCO0NBQ2hDOztBQUVEO0lBQ0kseUNBQXlDO0NBQzVDOztBQUVEO0lBQ0kseUNBQXlDO0NBQzVDOztBQUVEO0lBQ0ksWUFBWTtJQUNaLGFBQWE7SUFDYixlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0QixvQkFBb0I7Q0FDdkI7O0FBR0Q7SUFDSSwyQkFBMkI7SUFDM0IsNkJBQTZCO0lBQzdCLDJEQUEyRDtDQUM5RDs7QUFFRDtJQUNJLGVBQWU7SUFDZixlQUFlO0lBQ2Ysa0NBQWtDO0lBQ2xDLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLG9CQUFvQjtDQUN2Qjs7QUFFRDtJQUNJLGFBQWE7SUFDYiwyREFBMkQ7SUFDM0QsbUJBQW1CO0NBQ3RCOztBQUVEO0lBQ0ksa0JBQWtCO0NBQ3JCIiwiZmlsZSI6InNyYy9hcHAvcHJvei1wcm9maWxlL3Byb3otcHJvZmlsZS1jb25maXJtYXRpb24vcHJvei1wcm9maWxlLWNvbmZpcm1hdGlvbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmxvZ2luLWNvbnRhaW5lciB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBtYXJnaW46IDMlIGF1dG87XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5sb2dpbi1jb250YWluZXIgLmxvZ2luYm94IHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XHJcbiAgICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcclxuICAgIHBhZGRpbmc6IDAgMCAwcHggMDtcclxuICAgIC13ZWJraXQtYm94LXNoYWRvdzogMCAwIDE0cHggcmdiYSgwLDAsMCwuMSk7XHJcbiAgICAtbW96LWJveC1zaGFkb3c6IDAgMCAxNHB4IHJnYmEoMCwwLDAsLjEpO1xyXG4gICAgYm94LXNoYWRvdzogMCAwIDE0cHggcmdiYSgwLDAsMCwuMSk7XHJcbn1cclxuXHJcbi5sb2dpbi1jb250YWluZXIgLmxvZ2luYm94IC5sb2dpbmJveC10aXRsZSB7XHJcbiAgICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcclxuICAgIGZvbnQtZmFtaWx5OiAnQXJpYWwnLCAnSGVsdmV0aWNhJywgJ3NhbnMtc2VyaWYnICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcblxyXG4ubG9naW4tY29udGFpbmVyIC5sb2dpbmJveCAubG9naW5ib3gtc29jaWFsIC5zb2NpYWwtYnV0dG9ucyAuYnV0dG9uLWZhY2Vib29rIHtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgIzNiNTk5ODtcclxuICAgIGNvbG9yOiAjM2I1OTk4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgd2lkdGg6IDUwcHg7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDQwJTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbn1cclxuXHJcbi5sb2dpbi1jb250YWluZXIgLmxvZ2luYm94IC5sb2dpbmJveC1zb2NpYWwgLnNvY2lhbC1idXR0b25zIC5idXR0b24tdHdpdHRlciB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkICMyOWMxZjY7XHJcbiAgICBjb2xvcjogIzI5YzFmNjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIHdpZHRoOiA1MHB4O1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAzNSU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG59XHJcblxyXG4ubG9naW4tY29udGFpbmVyIC5sb2dpbmJveCAubG9naW5ib3gtc29jaWFsIC5zb2NpYWwtYnV0dG9ucyAuYnV0dG9uLWdvb2dsZSB7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjZWY0ZjFkO1xyXG4gICAgY29sb3I6ICNlZjRmMWQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICB3aWR0aDogNTBweDtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbn1cclxuXHJcblxyXG4gLmxvZ2luYm94LXNvY2lhbCB7XHJcbiAgICBwYWRkaW5nOiAwIDAgMCAwICFpbXBvcnRhbnQ7IFxyXG59XHJcblxyXG4ubG9naW5ib3gtdGl0bGV7XHJcbiAgICBmb250LXdlaWdodDogYm9sZCAhaW1wb3J0YW50O1xyXG4gICAgZm9udC1zaXplOiAyNXB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbmxhYmVse1xyXG4gICAgZm9udC13ZWlnaHQ6Ym9sZCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5sYWJlbCAubWFuZGF0b3J5e1xyXG4gICAgY29sb3I6cmVkO1xyXG4gICAgZm9udC1zaXplOiAxNnB4ICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXdlaWdodDogYm9sZCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4uaHItYmx1ZS10aXRsZXsgICAgXHJcbiAgICBib3JkZXItdG9wOiAzcHggc29saWQgIzVEQjJGRiAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4uaHItYmx1ZXsgICAgXHJcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgIzVEQjJGRiAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ubG9nb0ltYWdle1xyXG4gICAgd2lkdGg6MTAwcHg7IFxyXG4gICAgaGVpZ2h0OjEwMHB4O1xyXG4gICAgbWFyZ2luLXRvcDo1cHg7IFxyXG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7ICAgXHJcbiAgICBib3JkZXItY29sb3I6ICM1REIyRkY7ICAgXHJcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkOyBcclxufVxyXG5cclxuXHJcbi5idG4ge1xyXG4gICAgZm9udC1zaXplOiAyMHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXdlaWdodDogYm9sZCAhaW1wb3J0YW50O1xyXG4gICAgZm9udC1mYW1pbHk6ICdBcmlhbCcsICdIZWx2ZXRpY2EnLCAnc2Fucy1zZXJpZicgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmZvcm0tdGl0bGUge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBwYWRkaW5nOiA4cHggMDtcclxuICAgIGJvcmRlci1ib3R0b206IDFweCBkYXNoZWQgIzVEQjJGRjtcclxuICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgY29sb3I6ICM1REIyRkY7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG59XHJcblxyXG4uZ3JlZW4tdGV4dHtcclxuICAgIGNvbG9yOiBncmVlbjtcclxuICAgIGZvbnQtZmFtaWx5OiAnQXJpYWwnLCAnSGVsdmV0aWNhJywgJ3NhbnMtc2VyaWYnICFpbXBvcnRhbnQ7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5ncmVlbi10ZXh0IHNwYW57XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4iXX0= */"

/***/ }),

/***/ "./src/app/proz-profile/proz-profile-confirmation/proz-profile-confirmation.component.html":
/*!*************************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-confirmation/proz-profile-confirmation.component.html ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<app-commontopprozblueheader></app-commontopprozblueheader>\r\n<div class=\"container\">\r\n  <div class=\"body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12 col-sm-12 col-xs-12\">\r\n        <!-- PROZ PROFILE - STARTS HERE -->\r\n        <div class=\"login-container animated fadeInDown\">\r\n          <div class=\"loginbox bg-white\">\r\n            <div class=\"widget-body\">\r\n              <div id=\"registration-form\">\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <div class=\"loginbox-title\">PRO PROFILE CONFIRMATION</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <hr class=\"hr-blue-title\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <h3 class=\"green-text\">Congratulations {{typeOfBusiness}} &nbsp;!!!</h3>\r\n                        <h3 class=\"green-text\">Your Profile details has been updated successfully</h3>\r\n                        <h3 class=\"green-text\">Your Registered Reference Number is <span>#{{prozCode}}</span></h3>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <h3 class=\"green-text\"></h3>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-2\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-4\">\r\n                      <div class=\"form-group\">\r\n                        <input type=\"button\" class=\"btn btn-azure shiny btn-block\" value=\"Home\" (click)=\"home()\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-4\">\r\n                      <div class=\"form-group\">\r\n                          <input type=\"button\" class=\"btn btn-azure shiny btn-block\" value=\"Continue\" (click)=\"signInBtn()\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-2\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./src/app/proz-profile/proz-profile-confirmation/proz-profile-confirmation.component.ts":
/*!***********************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-confirmation/proz-profile-confirmation.component.ts ***!
  \***********************************************************************************************/
/*! exports provided: ProzProfileConfirmationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProzProfileConfirmationComponent", function() { return ProzProfileConfirmationComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var _utilities_beyond__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utilities/beyond */ "./src/utilities/beyond.ts");
/* harmony import */ var _global_global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../global/global */ "./src/global/global.ts");
/* harmony import */ var ngx_spinner__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-spinner */ "./node_modules/ngx-spinner/fesm5/ngx-spinner.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm5/ngx-toastr.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");










var ProzProfileConfirmationComponent = /** @class */ (function () {
    function ProzProfileConfirmationComponent(beyond, router, activatedRoute, http, HttP, toastr, ngZone, spinner, ref) {
        this.beyond = beyond;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.http = http;
        this.HttP = HttP;
        this.toastr = toastr;
        this.ngZone = ngZone;
        this.spinner = spinner;
        this.ref = ref;
    }
    ProzProfileConfirmationComponent.prototype.ngOnInit = function () {
        this.spinner.show();
        this.beyond.beyondAdmin();
        this.prozCode = this.activatedRoute.snapshot.params['prozId'];
        console.log("prozCode" + this.prozCode);
        this.prozDetails();
        this.spinner.hide();
    };
    ProzProfileConfirmationComponent.prototype.signInBtn = function () {
        localStorage.setItem('proServiceAreas', null);
        this.router.navigate(['/proz-dashboard/prozDashboard', this.prozCode]);
    };
    ProzProfileConfirmationComponent.prototype.home = function () {
        localStorage.setItem('proServiceAreas', null);
        this.router.navigate(['/']);
    };
    //PROZ DETAILS
    ProzProfileConfirmationComponent.prototype.prozDetails = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_5__["Global"].url + '/getProzDetails/' + this.prozCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozDetailsData = response.response;
                console.log(_this.prozDetailsData);
                _this.typeOfBusiness = _this.prozDetailsData[0].typeOfBusiness;
                return false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    ProzProfileConfirmationComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            providers: [_utilities_beyond__WEBPACK_IMPORTED_MODULE_4__["Beyond"]],
            selector: 'app-proz-profile-confirmation',
            template: __webpack_require__(/*! ./proz-profile-confirmation.component.html */ "./src/app/proz-profile/proz-profile-confirmation/proz-profile-confirmation.component.html"),
            styles: [__webpack_require__(/*! ./proz-profile-confirmation.component.css */ "./src/app/proz-profile/proz-profile-confirmation/proz-profile-confirmation.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_utilities_beyond__WEBPACK_IMPORTED_MODULE_4__["Beyond"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_http__WEBPACK_IMPORTED_MODULE_3__["Http"],
            _angular_common_http__WEBPACK_IMPORTED_MODULE_8__["HttpClient"],
            ngx_toastr__WEBPACK_IMPORTED_MODULE_7__["ToastrService"],
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"],
            ngx_spinner__WEBPACK_IMPORTED_MODULE_6__["NgxSpinnerService"],
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
    ], ProzProfileConfirmationComponent);
    return ProzProfileConfirmationComponent;
}());



/***/ }),

/***/ "./src/app/proz-profile/proz-profile-layout/proz-profile-layout.component.html":
/*!*************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-layout/proz-profile-layout.component.html ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<router-outlet></router-outlet>"

/***/ }),

/***/ "./src/app/proz-profile/proz-profile-layout/proz-profile-layout.component.scss":
/*!*************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-layout/proz-profile-layout.component.scss ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb3otcHJvZmlsZS9wcm96LXByb2ZpbGUtbGF5b3V0L3Byb3otcHJvZmlsZS1sYXlvdXQuY29tcG9uZW50LnNjc3MifQ== */"

/***/ }),

/***/ "./src/app/proz-profile/proz-profile-layout/proz-profile-layout.component.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-layout/proz-profile-layout.component.ts ***!
  \***********************************************************************************/
/*! exports provided: ProzProfileLayoutComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProzProfileLayoutComponent", function() { return ProzProfileLayoutComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var ProzProfileLayoutComponent = /** @class */ (function () {
    function ProzProfileLayoutComponent() {
    }
    ProzProfileLayoutComponent.prototype.ngOnInit = function () {
    };
    ProzProfileLayoutComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-proz-profile-layout',
            template: __webpack_require__(/*! ./proz-profile-layout.component.html */ "./src/app/proz-profile/proz-profile-layout/proz-profile-layout.component.html"),
            styles: [__webpack_require__(/*! ./proz-profile-layout.component.scss */ "./src/app/proz-profile/proz-profile-layout/proz-profile-layout.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], ProzProfileLayoutComponent);
    return ProzProfileLayoutComponent;
}());



/***/ }),

/***/ "./src/app/proz-profile/proz-profile-payment/proz-profile-payment.component.css":
/*!**************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-payment/proz-profile-payment.component.css ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".login-container {\r\n    position: relative;\r\n    margin: 3% auto;\r\n    max-width: 100%;\r\n}\r\n\r\n.login-container .loginbox {\r\n    position: relative;\r\n    width: 100% !important;\r\n    height: auto !important;\r\n    padding: 0 0 0px 0;\r\n    box-shadow: 0 0 14px rgba(0,0,0,.1);\r\n}\r\n\r\n.login-container .loginbox .loginbox-social .social-buttons .button-facebook {\r\n    float: left;\r\n    border: 2px solid #3b5998;\r\n    color: #3b5998;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-right: 40%;\r\n    background-color: #fff;\r\n}\r\n\r\n.login-container .loginbox .loginbox-social .social-buttons .button-twitter {\r\n    float: left;\r\n    border: 2px solid #29c1f6;\r\n    color: #29c1f6;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-right: 35%;\r\n    background-color: #fff;\r\n}\r\n\r\n.login-container .loginbox .loginbox-social .social-buttons .button-google {\r\n    float: right;\r\n    border: 2px solid #ef4f1d;\r\n    color: #ef4f1d;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    background-color: #fff;\r\n}\r\n\r\n.loginbox-social {\r\n    padding: 0 0 0 0 !important; \r\n}\r\n\r\n.loginbox-title{\r\n    font-weight: bold !important;\r\n    font-size: 25px !important;\r\n}\r\n\r\nlabel{\r\n    font-weight:bold !important;\r\n}\r\n\r\nlabel .mandatory{\r\n    color:red;\r\n    font-size: 16px !important;\r\n    font-weight: bold !important;\r\n}\r\n\r\n.hr-blue-title{    \r\n    border-top: 3px solid #5DB2FF !important;\r\n}\r\n\r\n.hr-blue{    \r\n    border-top: 1px solid #5DB2FF !important;\r\n}\r\n\r\n.btn {\r\n    font-size: 14px !important;\r\n    font-weight: bold !important;\r\n}\r\n\r\nform.checkout {\r\n    max-width: 500px;\r\n    margin: 2rem auto;\r\n    text-align: center;\r\n    border: 2px solid #eee;\r\n    border-radius: 8px;\r\n    padding: 1rem 2rem;\r\n    background: white;\r\n    font-family: monospace;\r\n    color: #525252;\r\n    font-size: 1.1rem;\r\n  }\r\n\r\nform.checkout button {\r\n    padding: 0.5rem 1rem;\r\n    color: white;\r\n    background: coral;\r\n    border: none;\r\n    border-radius: 4px;\r\n    margin-top: 1rem;\r\n  }\r\n\r\nform.checkout button:active {\r\n    background: rgb(165, 76, 43);\r\n  }\r\n\r\n.StripeElement {\r\n    margin: 1rem 0 1rem;\r\n    background-color: white;\r\n    padding: 8px 12px;\r\n    border-radius: 4px;\r\n    border: 1px solid transparent;\r\n    box-shadow: 0 1px 3px 0 #e6ebf1;\r\n    transition: box-shadow 150ms ease;\r\n  }\r\n\r\n.StripeElement--focus {\r\n    box-shadow: 0 1px 3px 0 #cfd7df;\r\n  }\r\n\r\n.StripeElement--invalid {\r\n    border-color: #fa755a;\r\n  }\r\n\r\n.StripeElement--webkit-autofill {\r\n    background-color: #fefde5 !important;\r\n  }\r\n\r\n.modal-header {\r\n    padding: 0px 0px 0px 0px !important;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcHJvei1wcm9maWxlL3Byb3otcHJvZmlsZS1wYXltZW50L3Byb3otcHJvZmlsZS1wYXltZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtDQUNuQjs7QUFFRDtJQUNJLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkIsd0JBQXdCO0lBQ3hCLG1CQUFtQjtJQUduQixvQ0FBb0M7Q0FDdkM7O0FBRUQ7SUFDSSxZQUFZO0lBQ1osMEJBQTBCO0lBQzFCLGVBQWU7SUFDZixtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsdUJBQXVCO0NBQzFCOztBQUVEO0lBQ0ksWUFBWTtJQUNaLDBCQUEwQjtJQUMxQixlQUFlO0lBQ2YsbUJBQW1CO0lBQ25CLFlBQVk7SUFDWixhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLHVCQUF1QjtDQUMxQjs7QUFFRDtJQUNJLGFBQWE7SUFDYiwwQkFBMEI7SUFDMUIsZUFBZTtJQUNmLG1CQUFtQjtJQUNuQixZQUFZO0lBQ1osYUFBYTtJQUNiLHVCQUF1QjtDQUMxQjs7QUFHQTtJQUNHLDRCQUE0QjtDQUMvQjs7QUFFRDtJQUNJLDZCQUE2QjtJQUM3QiwyQkFBMkI7Q0FDOUI7O0FBRUQ7SUFDSSw0QkFBNEI7Q0FDL0I7O0FBRUQ7SUFDSSxVQUFVO0lBQ1YsMkJBQTJCO0lBQzNCLDZCQUE2QjtDQUNoQzs7QUFFRDtJQUNJLHlDQUF5QztDQUM1Qzs7QUFFRDtJQUNJLHlDQUF5QztDQUM1Qzs7QUFFRDtJQUNJLDJCQUEyQjtJQUMzQiw2QkFBNkI7Q0FDaEM7O0FBRUQ7SUFDSSxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsdUJBQXVCO0lBQ3ZCLGVBQWU7SUFDZixrQkFBa0I7R0FDbkI7O0FBRUQ7SUFDRSxxQkFBcUI7SUFDckIsYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLGlCQUFpQjtHQUNsQjs7QUFFRDtJQUNFLDZCQUE2QjtHQUM5Qjs7QUFFRDtJQUNFLG9CQUFvQjtJQUNwQix3QkFBd0I7SUFDeEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQiw4QkFBOEI7SUFDOUIsZ0NBQWdDO0lBRWhDLGtDQUFrQztHQUNuQzs7QUFFRDtJQUNFLGdDQUFnQztHQUNqQzs7QUFFRDtJQUNFLHNCQUFzQjtHQUN2Qjs7QUFFRDtJQUNFLHFDQUFxQztHQUN0Qzs7QUFFRDtJQUNFLG9DQUFvQztDQUN2QyIsImZpbGUiOiJzcmMvYXBwL3Byb3otcHJvZmlsZS9wcm96LXByb2ZpbGUtcGF5bWVudC9wcm96LXByb2ZpbGUtcGF5bWVudC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmxvZ2luLWNvbnRhaW5lciB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBtYXJnaW46IDMlIGF1dG87XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5sb2dpbi1jb250YWluZXIgLmxvZ2luYm94IHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XHJcbiAgICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcclxuICAgIHBhZGRpbmc6IDAgMCAwcHggMDtcclxuICAgIC13ZWJraXQtYm94LXNoYWRvdzogMCAwIDE0cHggcmdiYSgwLDAsMCwuMSk7XHJcbiAgICAtbW96LWJveC1zaGFkb3c6IDAgMCAxNHB4IHJnYmEoMCwwLDAsLjEpO1xyXG4gICAgYm94LXNoYWRvdzogMCAwIDE0cHggcmdiYSgwLDAsMCwuMSk7XHJcbn1cclxuXHJcbi5sb2dpbi1jb250YWluZXIgLmxvZ2luYm94IC5sb2dpbmJveC1zb2NpYWwgLnNvY2lhbC1idXR0b25zIC5idXR0b24tZmFjZWJvb2sge1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjM2I1OTk4O1xyXG4gICAgY29sb3I6ICMzYjU5OTg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICB3aWR0aDogNTBweDtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIG1hcmdpbi1yaWdodDogNDAlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxufVxyXG5cclxuLmxvZ2luLWNvbnRhaW5lciAubG9naW5ib3ggLmxvZ2luYm94LXNvY2lhbCAuc29jaWFsLWJ1dHRvbnMgLmJ1dHRvbi10d2l0dGVyIHtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgIzI5YzFmNjtcclxuICAgIGNvbG9yOiAjMjljMWY2O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgd2lkdGg6IDUwcHg7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDM1JTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbn1cclxuXHJcbi5sb2dpbi1jb250YWluZXIgLmxvZ2luYm94IC5sb2dpbmJveC1zb2NpYWwgLnNvY2lhbC1idXR0b25zIC5idXR0b24tZ29vZ2xlIHtcclxuICAgIGZsb2F0OiByaWdodDtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkICNlZjRmMWQ7XHJcbiAgICBjb2xvcjogI2VmNGYxZDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIHdpZHRoOiA1MHB4O1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxufVxyXG5cclxuXHJcbiAubG9naW5ib3gtc29jaWFsIHtcclxuICAgIHBhZGRpbmc6IDAgMCAwIDAgIWltcG9ydGFudDsgXHJcbn1cclxuXHJcbi5sb2dpbmJveC10aXRsZXtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXNpemU6IDI1cHggIWltcG9ydGFudDtcclxufVxyXG5cclxubGFiZWx7XHJcbiAgICBmb250LXdlaWdodDpib2xkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbmxhYmVsIC5tYW5kYXRvcnl7XHJcbiAgICBjb2xvcjpyZWQ7XHJcbiAgICBmb250LXNpemU6IDE2cHggIWltcG9ydGFudDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5oci1ibHVlLXRpdGxleyAgICBcclxuICAgIGJvcmRlci10b3A6IDNweCBzb2xpZCAjNURCMkZGICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5oci1ibHVleyAgICBcclxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjNURCMkZGICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5idG4ge1xyXG4gICAgZm9udC1zaXplOiAxNHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXdlaWdodDogYm9sZCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5mb3JtLmNoZWNrb3V0IHtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBtYXJnaW46IDJyZW0gYXV0bztcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkICNlZWU7XHJcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDJyZW07XHJcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XHJcbiAgICBjb2xvcjogIzUyNTI1MjtcclxuICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xyXG4gIH1cclxuICBcclxuICBmb3JtLmNoZWNrb3V0IGJ1dHRvbiB7XHJcbiAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIGJhY2tncm91bmQ6IGNvcmFsO1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMXJlbTtcclxuICB9XHJcbiAgXHJcbiAgZm9ybS5jaGVja291dCBidXR0b246YWN0aXZlIHtcclxuICAgIGJhY2tncm91bmQ6IHJnYigxNjUsIDc2LCA0Myk7XHJcbiAgfVxyXG5cclxuICAuU3RyaXBlRWxlbWVudCB7XHJcbiAgICBtYXJnaW46IDFyZW0gMCAxcmVtO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICBwYWRkaW5nOiA4cHggMTJweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gICAgYm94LXNoYWRvdzogMCAxcHggM3B4IDAgI2U2ZWJmMTtcclxuICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYm94LXNoYWRvdyAxNTBtcyBlYXNlO1xyXG4gICAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAxNTBtcyBlYXNlO1xyXG4gIH1cclxuICBcclxuICAuU3RyaXBlRWxlbWVudC0tZm9jdXMge1xyXG4gICAgYm94LXNoYWRvdzogMCAxcHggM3B4IDAgI2NmZDdkZjtcclxuICB9XHJcbiAgXHJcbiAgLlN0cmlwZUVsZW1lbnQtLWludmFsaWQge1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjZmE3NTVhO1xyXG4gIH1cclxuICBcclxuICAuU3RyaXBlRWxlbWVudC0td2Via2l0LWF1dG9maWxsIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZWZkZTUgIWltcG9ydGFudDtcclxuICB9XHJcblxyXG4gIC5tb2RhbC1oZWFkZXIge1xyXG4gICAgcGFkZGluZzogMHB4IDBweCAwcHggMHB4ICFpbXBvcnRhbnQ7XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/proz-profile/proz-profile-payment/proz-profile-payment.component.html":
/*!***************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-payment/proz-profile-payment.component.html ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<app-commontopprozblueheader></app-commontopprozblueheader>\r\n<div class=\"container\">\r\n  <div class=\"body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12 col-sm-12 col-xs-12\">\r\n        <!-- PROZ PROFILE - STARTS HERE -->\r\n        <div class=\"login-container animated fadeInDown\">\r\n          <div class=\"loginbox bg-white\">\r\n            <div class=\"widget-body\">\r\n              <div id=\"registration-form\">\r\n                <form [formGroup]=\"serProzPaymentInfoDetails\" *ngIf=\"showForm\">\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <div class=\"loginbox-title\"> PRO - PAYMENT INFO</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <hr class=\"hr-blue-title\">\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- DYNAMIC NGX STRIPE[NOMADS] PLUGIN -->\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-2\"></div>\r\n                    <div class=\"col-sm-8\"><b style=\"color: rgb(56, 57, 58);\">TopProz Credit card validation and\r\n                        processing is provided by Stripe(www.stripe.com)</b></div>\r\n                    <div class=\"col-sm-2\"></div>\r\n                  </div><br />\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"name\">Name<span class=\"mandatory\"></span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" placeholder=\"Enter Your Name\" formControlName=\"name\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.name.errors }\" required disabled>\r\n                          <i class=\"fa fa-envelope\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.name.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.name.errors.required\">\r\n                            <p style=\"color: red;  font-size: 11px\">* Required Name</p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <ngx-stripe-card [options]=\"cardOptions\" [elementsOptions]=\"elementsOptions\"\r\n                        (change)=\"cardUpdated($event)\" (error)=\"error = $event\"></ngx-stripe-card>\r\n                      <div class=\"invalid-feedback\">\r\n                        {{error?.message}}\r\n                      </div>\r\n                    </div>\r\n                  </div><br />\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-2\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-3\">\r\n                      <div class=\"form-group\">\r\n                        <input type=\"button\" class=\"btn btn-primary shiny btn-block\" value=\"<&nbsp;&nbsp;Back\"\r\n                          (click)=\"prozServiceBack()\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-3\">\r\n                      <div class=\"form-group\">\r\n                        <input type=\"button\" class=\"btn btn-success shiny btn-block\" value=\"Continue\"\r\n                          (click)=\"validate()\" [disabled]=\"!complete\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-3\">\r\n                      <div class=\"form-group\">\r\n                        <input type=\"button\" class=\"btn btn-danger shiny btn-block\" value=\"Skip&nbsp;&nbsp;>\"\r\n                          data-toggle=\"modal\" data-target=\"#modal-info\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-1\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <!-- DYNAMIC NGX STRIPE[NOMADS] PLUGIN -->\r\n\r\n                  <!-- OLD STRIPE MANUAL CARD DETAILS ENTRY -->\r\n                  <!-- <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"companyProfileDesc\">Credit Card Type <span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <select class=\"form-control\" id=\"creditCardType\" name=\"status\" data-bv-field=\"row-title\"\r\n                            formControlName=\"creditCardType\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.creditCardType.errors }\" required>\r\n                            <option value=\"\">--Select Credit Card Type--</option>\r\n                            <option value=\"Master\">Master</option>\r\n                            <option value=\"Visa\">Visa</option>\r\n                            <option value=\"Amercian Express\">Amercian Express</option>\r\n                            <option value=\"Discover Network\">Discover Network</option>\r\n                          </select>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.creditCardType.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.creditCardType.errors.required\">\r\n                            <p style=\"color: red;  font-size: 11px\">* Select Credit Card Type</p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"companyProfileDesc\">Credit Card Number<span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"creditCardNumber\"\r\n                            placeholder=\"Enter Credit Card Number\" formControlName=\"creditCardNumber\"\r\n                            [dropSpecialCharacters]=\"false\" mask=\"0000-0000-0000-0000\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.creditCardNumber.errors }\" required\r\n                            data-bv-notempty-message=\"Card Number is required\">\r\n                          <i class=\"fa fa-file\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.creditCardNumber.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.creditCardNumber.errors.required\">\r\n                            <p style=\"color: red;  font-size: 11px\">* Required Credit Card Number</p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"companyProfileDesc\">CVV Number <span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"ccvNumber\" placeholder=\"Enter CVV Number\"\r\n                            formControlName=\"ccvNumber\" [dropSpecialCharacters]=\"false\" mask=\"000\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.ccvNumber.errors }\" required>\r\n                          <i class=\"fa fa-file\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.ccvNumber.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.ccvNumber.errors.required\">\r\n                            <p style=\"color: red;  font-size: 11px\">* Required Cvv Number</p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <div class=\"col-sm-12\">\r\n                          <label for=\"companyProfileDesc\">Expires On<span class=\"mandatory\">*</span></label>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                          <select class=\"form-control\" id=\"selectMonth\" name=\"status\" data-bv-field=\"row-title\"\r\n                            formControlName=\"selectMonth\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.selectMonth.errors }\" required>\r\n                            <option value=\"\">--Select Month--</option>\r\n                            <option value=\"JAN\">JAN</option>\r\n                            <option value=\"FEB\">FEB</option>\r\n                            <option value=\"MAR\">MAR</option>\r\n                            <option value=\"APR\">APR</option>\r\n                            <option value=\"MAY\">MAY</option>\r\n                            <option value=\"JUN\">JUN</option>\r\n                            <option value=\"JUL\">JUL</option>\r\n                            <option value=\"AUG\">AUG</option>\r\n                            <option value=\"SEP\">SEP</option>\r\n                            <option value=\"OCT\">OCT</option>\r\n                            <option value=\"NOV\">NOV</option>\r\n                            <option value=\"DEC\">DEC</option>\r\n                          </select>\r\n                          <div *ngIf=\"submitted && f.selectMonth.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.selectMonth.errors.required\">\r\n                              <p style=\"color: red;  font-size: 11px\">* Select Month</p>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                          <select class=\"form-control\" id=\"selectYear\" name=\"status\" data-bv-field=\"row-title\"\r\n                            formControlName=\"selectYear\" [ngClass]=\"{ 'is-invalid': submitted && f.selectYear.errors }\"\r\n                            required>\r\n                            <option value=\"\">--Select Year--</option>\r\n                            <option value=\"2030\">2030</option>\r\n                            <option value=\"2029\">2029</option>\r\n                            <option value=\"2028\">2028</option>\r\n                            <option value=\"2027\">2027</option>\r\n                            <option value=\"2026\">2026</option>\r\n                            <option value=\"2025\">2025</option>\r\n                            <option value=\"2024\">2024</option>\r\n                            <option value=\"2023\">2023</option>\r\n                            <option value=\"2022\">2022</option>\r\n                            <option value=\"2021\">2021</option>\r\n                            <option value=\"2020\">2020</option>\r\n                            <option value=\"2019\">2019</option>\r\n                          </select>\r\n                          <div *ngIf=\"submitted && f.selectYear.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.selectYear.errors.required\">\r\n                              <p style=\"color: red;  font-size: 11px\">* Select Year</p>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"businessAddressLine1\">Address<span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" placeholder=\"Enter Business Address\"\r\n                            formControlName=\"businessAddressLine1\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.businessAddressLine1.errors }\" required>\r\n                          <i class=\"fa fa-envelope\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.businessAddressLine1.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.businessAddressLine1.errors.required\">\r\n                            <p style=\"color: red;  font-size: 11px\">* Required Address</p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"state\">State<span class=\"mandatory\">*</span></label>\r\n                        <select class=\"form-control\" id=\"state\" name=\"status\" data-bv-field=\"row-title\"\r\n                          formControlName=\"state\" [ngClass]=\"{ 'is-invalid': submitted && f.state.errors }\" required>\r\n                          <option value=\"\">Select</option>\r\n                          <option *ngFor=\"let data of statesData\" value={{data.stateCode}}>\r\n                            {{data.stateName}}\r\n                          </option>\r\n                        </select>\r\n                        <div *ngIf=\"submitted && f.state.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.state.errors.required\">\r\n                            <p style=\"color: red;  font-size: 11px\">* Select State</p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"city\">City<span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"city\" placeholder=\"Enter City\"\r\n                            formControlName=\"city\" [ngClass]=\"{ 'is-invalid': submitted && f.city.errors }\" required>\r\n                          <i class=\"fa fa-envelope\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.city.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.city.errors.required\">\r\n                            <p style=\"color: red;  font-size: 11px\">* Required City</p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"zipCode\">Zipcode<span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"zipCode\" placeholder=\"Enter Zipcode\" minlength=\"5\" maxlength=\"6\"\r\n                            formControlName=\"zipCode\" [ngClass]=\"{ 'is-invalid': submitted && f.zipCode.errors }\"\r\n                            required>\r\n                          <i class=\"fa fa-map-marker\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.zipCode.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.zipCode.errors.required\">\r\n                            <p style=\"color: red;  font-size: 11px\">* Required ZipCode</p>\r\n                          </div>\r\n                          <div *ngIf=\"f.zipCode.errors.minlength\" style=\"color:red;font-size: 11px\">Invalid Zip Code\r\n                            (5-6 digits)\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-4\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div class=\"col-sm-2\">\r\n                      <div class=\"form-group\">\r\n                        <input type=\"button\" class=\"btn btn-primary shiny btn-block\" value=\"<&nbsp;&nbsp;Back\"\r\n                          (click)=\"prozServiceBack()\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-2\">\r\n                      <div class=\"form-group\">\r\n                        <input type=\"submit\" class=\"btn btn-success shiny btn-block\"\r\n                          value=\"Save & Continue &nbsp;&nbsp;>\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-4\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n\r\n                  </div> -->\r\n                  <!-- OLD STRIPE MANUAL CARD DETAILS ENTRY -->\r\n\r\n                  <!-- <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"paymentType\">Payment Type <span class=\"mandatory\">*</span></label>\r\n                        <select [(ngModel)]=\"selectedPaymentType\" (ngModelChange)=\"paymentTypeSelection(selectedPaymentType)\"\r\n                          class=\"form-control\" id=\"paymentType\" name=\"status\" data-bv-field=\"row-title\" formControlName=\"paymentType\">\r\n                          <option value=\"\">--Select Payment Type--</option>\r\n                          <option value=\"Credit Card\">Credit Card</option>\r\n                          <option value=\"PayPal\">PayPal</option>\r\n                          <option value=\"Debit Card\">Debit Card</option>\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n                  </div> -->\r\n\r\n\r\n\r\n                  <!-- For Debit Card/Credit Card - Starts Here -->\r\n                  <!-- <div class=\"row\" *ngIf=\"cardDetails\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <hr class=\"hr-blue\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\" *ngIf=\"cardDetails\">\r\n                    <div class=\"row\">\r\n                      <div class=\"col-sm-1\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-6\">\r\n                        <div class=\"form-group\">\r\n                          <h3 style=\"color: blue;\">Your Service Amount: ${{estimatedCost}}</h3>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div class=\"col-sm-5\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <div class=\"col-sm-1\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-4\">\r\n                        <div class=\"form-group\">\r\n                          <label>\r\n                            <a href=\"\">Terms & Conditions</a>\r\n                          </label>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-5\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-2\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <div class=\"col-sm-1\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-4\">\r\n                        <div class=\"form-group\">\r\n                          <div class=\"checkbox\">\r\n                            <input name=\"form-field-checkbox\" type=\"checkbox\" [checked]=\"false\" class=\"colored-success\"\r\n                              (change)=\"checkChange()\">\r\n                            <span class=\"text\">Yes, I Accept Terms & Conditions</span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-5\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-2\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <div class=\"col-sm-1\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div class=\"col-sm-2\">\r\n                        <div class=\"form-group\">\r\n                          <input type=\"button\" class=\"btn btn-primary shiny btn-block\" value=\"<&nbsp;&nbsp;Back\"\r\n                            (click)=\"prozServiceBack()\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-2\">\r\n                        <div class=\"form-group\">\r\n                          <input type=\"button\" class=\"btn btn-success shiny btn-block \" value=\"Stripe&nbsp;&nbsp;>\"\r\n                            (click)=\"stripePayment()\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-7\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n\r\n                    </div>\r\n\r\n\r\n                  </div> -->\r\n\r\n                  <!-- <div class=\"row\" *ngIf=\"paypalDetails\">\r\n\r\n                  </div> -->\r\n                  <!-- <div class=\"row\" *ngIf=\"paypalDetails\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <hr class=\"hr-blue\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <div class=\"col-sm-1\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-4\">\r\n                        <div class=\"form-group\">\r\n                          <h3 style=\"color: blue;\">Your Service Amount: ${{estimatedCost}}</h3>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-7\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-1\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-4\">\r\n                        <div class=\"form-group\">\r\n                          <div id=\"paypal-checkout-btn\" style=\"display: block;margin-left: auto;margin-right: auto; width: 50%;\"></div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-5\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-2\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <div class=\"col-sm-1\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-4\">\r\n                        <div class=\"form-group\">\r\n                          <label>\r\n                            <a href=\"\">Terms & Conditions</a>\r\n                          </label>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-5\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-2\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <div class=\"col-sm-1\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-4\">\r\n                        <div class=\"form-group\">\r\n                          <div class=\"checkbox\">\r\n                            <input name=\"form-field-checkbox\" type=\"checkbox\" [checked]=\"false\" class=\"colored-success\"\r\n                              (change)=\"checkChange()\">\r\n                            <span class=\"text\">Yes, I Accept Terms & Conditions</span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-5\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-2\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <div class=\"col-sm-1\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div class=\"col-sm-2\">\r\n                        <div class=\"form-group\">\r\n                          <input type=\"button\" class=\"btn btn-primary shiny btn-block\" value=\"<&nbsp;&nbsp;Back\"\r\n                            (click)=\"prozServiceBack()\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-2\">\r\n                        <div class=\"form-group\">\r\n                          <input type=\"button\" class=\"btn btn-success shiny btn-block\" value=\"Pay&nbsp;&nbsp;>\">\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-sm-7\">\r\n                        <div class=\"form-group\">\r\n                        </div>\r\n                      </div>\r\n\r\n                    </div>\r\n\r\n                  </div> -->\r\n\r\n                  <!-- For Checking Account/Saving Account - Starts Here -->\r\n                  <!-- <div class=\"row\" *ngIf=\"accountDetails\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <hr class=\"hr-blue\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\" *ngIf=\"accountDetails\">\r\n                    <div class=\"col-sm-3\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"accountNumber\">Enter Account Number</label>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-9\">\r\n                      <div class=\"form-group\">\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"accountNumber\" placeholder=\"Enter Account Number\"\r\n                            formControlName=\"accountNumber\">\r\n                          <i class=\"fa fa-credit-card\"></i>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"row\" *ngIf=\"accountDetails\">\r\n                    <div class=\"col-sm-3\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"accountNumber\">Confirm Account Number</label>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-9\">\r\n                      <div class=\"form-group\">\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"password\" class=\"form-control\" id=\"accountNumber\" placeholder=\"Enter Account Number\"\r\n                            formControlName=\"accountNumber\">\r\n                          <i class=\"fa fa-credit-card\"></i>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\" *ngIf=\"accountDetails\">\r\n                    <div class=\"col-sm-3\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"routingNumber\">Enter Routing Number</label>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-9\">\r\n                      <div class=\"form-group\">\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"routingNumber\" placeholder=\"Enter Routing Number\"\r\n                            formControlName=\"routingNumber\">\r\n                          <i class=\"fa fa-sort-numeric-asc\"></i>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\" *ngIf=\"accountDetails\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <hr class=\"hr-blue\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\" *ngIf=\"accountDetails\">\r\n                    <div class=\"col-sm-1\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-4\">\r\n                      <div class=\"form-group\">\r\n                        <label>\r\n                          <a href=\"\" data-toggle=\"modal\" data-target=\"#modal-info\">Terms & Conditions</a>\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-5\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-2\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\" *ngIf=\"accountDetails\">\r\n                    <div class=\"col-sm-1\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-4\">\r\n                      <div class=\"form-group\">\r\n                        <div class=\"checkbox\">\r\n                          <input name=\"form-field-checkbox\" type=\"checkbox\" [checked]=\"false\" class=\"colored-success\">\r\n                          <span class=\"text\">Yes, I Accept Terms & Conditions</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-5\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-2\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\" *ngIf=\"accountDetails\">\r\n                    <div class=\"col-sm-1\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div class=\"col-sm-2\">\r\n                      <div class=\"form-group\">\r\n                        <input type=\"button\" class=\"btn btn-primary shiny btn-block\" value=\"<&nbsp;&nbsp;Back\" (click)=\"prozServiceBack()\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-2\">\r\n                      <div class=\"form-group\">\r\n                        <input type=\"button\" class=\"btn btn-success shiny btn-block\" value=\"Pay&nbsp;&nbsp;>\" (click)=\"prozPaymentSave()\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-7\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n                  </div> -->\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <!-- /PROZ PROFILE - STARTS HERE -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!--Info Modal Templates-->\r\n<div id=\"modal-info\" class=\"modal modal-message modal-info fade\" style=\"display: none;\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h3><b>SKIP CREDIT CARD REGISTRATION</b></h3>\r\n      </div>\r\n      <!-- <div class=\"modal-title\">Alert</div> -->\r\n      <div class=\"modal-body\">\r\n        <div class=\"row\">\r\n          <label><b></b></label>\r\n        </div>\r\n        <div class=\"row\">\r\n          <label><b>Are you sure you want to skip Credit Card Registration?</b></label>\r\n          <label>\r\n            <p style=\"font-size: 12px;\">For receiving leads , you must complete your credit card information later.</p>\r\n          </label>\r\n        </div>\r\n      </div>\r\n      <br>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-danger\" data-dismiss=\"modal\">No</button>\r\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"skip()\">Yes</button>\r\n      </div>\r\n    </div> <!-- / .modal-content -->\r\n  </div> <!-- / .modal-dialog -->\r\n</div>\r\n<!--End Info Modal Templates-->\r\n\r\n<!-- CARD EXCEPTION MODAL -->\r\n<div id=\"cardException\" class=\"modal fade\" style=\"display: none;\" role=\"dialog\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <div class=\"widget-header blue\">\r\n          <span class=\"widget-caption\"><b>{{stripeCardModalMessage.header}}</b></span>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <form>\r\n            <br />\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-12\">\r\n                <div class=\"form-group\">\r\n                  <img src=\"../../../../assets/img/error.png\" height=\"50px\" width=\"50px\" />\r\n                  {{stripeCardModalMessage.content}}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n              <div class=\"col-lg-4\">\r\n              </div>\r\n              <div class=\"col-lg-4 button-center\">\r\n                <button type=\"button\" class=\"btn btn-gray\" data-dismiss=\"modal\"><i class=\"fa fa-times\"></i>\r\n                  CLOSE</button>\r\n              </div>\r\n              <div class=\"col-lg-4\">\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <br>\r\n</div>\r\n<!-- CARD EXCEPTION MODAL -->"

/***/ }),

/***/ "./src/app/proz-profile/proz-profile-payment/proz-profile-payment.component.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-payment/proz-profile-payment.component.ts ***!
  \*************************************************************************************/
/*! exports provided: ProzProfilePaymentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProzProfilePaymentComponent", function() { return ProzProfilePaymentComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _global_global__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/global */ "./src/global/global.ts");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm5/ngx-toastr.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _utilities_beyond__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../utilities/beyond */ "./src/utilities/beyond.ts");
/* harmony import */ var ngx_spinner__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ngx-spinner */ "./node_modules/ngx-spinner/fesm5/ngx-spinner.js");
/* harmony import */ var _nomadreservations_ngx_stripe__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @nomadreservations/ngx-stripe */ "./node_modules/@nomadreservations/ngx-stripe/fesm5/nomadreservations-ngx-stripe.js");










var ProzProfilePaymentComponent = /** @class */ (function () {
    function ProzProfilePaymentComponent(beyond, router, formBuilder, activatedRoute, http, spinner, toastr, stripeService) {
        var _this = this;
        this.beyond = beyond;
        this.router = router;
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.http = http;
        this.spinner = spinner;
        this.toastr = toastr;
        this.stripeService = stripeService;
        this.dataProzDetails = false;
        this.stripeActions = false;
        this.showForm = false;
        this.amount = 500;
        this.addScript = false;
        this.finalAmount = 1;
        this.submitted = false;
        this.paypalConfig = {
            env: 'sandbox',
            client: {
                sandbox: 'AclRBQkjJnhtuOndcXfrkSFBVggnO8loIskrypTfCfQ8L--nUt5xFX5IDyp-A0OsSebMUZJvEcH__etM',
                production: '<insert Production client Id>'
            },
            commit: true,
            payment: function (data, actions) {
                return actions.payment.create({
                    payment: {
                        transactions: [
                            {
                                amount: { total: _this.serviceAreaData.serviceCost, currency: 'USD' }
                            }
                        ]
                    }
                });
            },
            onAuthorize: function (data, actions) {
                return actions.payment.execute().then(function (payment) {
                    _this.toastr.success("Payment has been Successfull...!");
                });
            }
        };
        this.stripeKey = '';
        this.complete = false;
        this.cardOptions = {
            style: {
                base: {
                    iconColor: '#276fd3',
                    color: '#31325F',
                    lineHeight: '40px',
                    fontWeight: 300,
                    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                    fontSize: '18px',
                    '::placeholder': {
                        color: 'grey'
                    },
                }
            }
        };
        this.elementsOptions = {
            locale: 'en'
        };
        this.stripeCardModalMessage = {
            header: null,
            content: null
        };
    }
    ProzProfilePaymentComponent.prototype.ngOnInit = function () {
        this.spinner.show();
        this.beyond.beyondAdmin();
        this.loginData = JSON.parse(localStorage.getItem("login"));
        this.serProzPaymentInfoDetails = this.formBuilder.group({
            name: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required],
        });
        this.prozDetails(this.activatedRoute.snapshot.params['prozId']);
        this.estimatedCost = JSON.parse(localStorage.getItem('serviceCost'));
        this.stripeService.retrievePaymentIntent('pi_1GxXdMC0mkeCkdjxV36xnpAi_secret_CpHyO3s6fWST2igxpM8ZeAHtD')
            .subscribe(function (result) {
            console.log(result);
        });
    };
    //------------------NGX STRIPE PLUGIN----------------------------------------------
    ProzProfilePaymentComponent.prototype.prozDetails = function (mobileNumber) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getProzDetails/' + mobileNumber, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozDetailsData = response.response;
                _this.firstName = _this.prozDetailsData[0].firstName;
                _this.lastName = _this.prozDetailsData[0].lastName;
                _this.mobileNumber = _this.prozDetailsData[0].mobileNumber;
                _this.emailId = _this.prozDetailsData[0].emailId;
                _this.serProzPaymentInfoDetails.get('name').setValue(_this.prozDetailsData[0].firstName + ' ' + _this.prozDetailsData[0].lastName);
                _this.showForm = true;
                _this.spinner.hide();
                return false;
            }
        }, function (error) {
            console.log('The execution is failed ' + JSON.stringify(error));
        });
    };
    ProzProfilePaymentComponent.prototype.cardUpdated = function (result) {
        console.log(result);
        this.element = result.element;
        this.complete = result.card.complete;
        if (this.complete) {
            this.stripeService;
        }
        this.error = undefined;
    };
    ProzProfilePaymentComponent.prototype.keyUpdated = function () {
        this.stripeService.changeKey(this.stripeKey);
    };
    ProzProfilePaymentComponent.prototype.validate = function () {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var response;
            var _this = this;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.spinner.show();
                        this.submitted = true;
                        // console.log("first checking submit function")
                        // stop here if form is invalid
                        if (this.serProzPaymentInfoDetails.invalid) {
                            // console.log("in IF checking submit function")
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.cardSetup('/cardSetup', {
                                name: this.serProzPaymentInfoDetails.value.name,
                                email: this.loginData.emailId,
                                phone: this.loginData.mobileNumber
                            })];
                    case 1:
                        response = _a.sent();
                        this.stripeService.handleCardSetup(response['client_secret'], this.element, {
                            payment_method_data: {
                                billing_details: {
                                    name: this.serProzPaymentInfoDetails.value.name,
                                    email: this.loginData.emailId,
                                    phone: this.loginData.mobileNumber
                                },
                            }
                        }).subscribe(function (result) { return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                            var verifyCard, cardSaved;
                            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        console.log(result);
                                        this.spinner.hide();
                                        if (result.error && result.error.code == "incorrect_cvc") {
                                            this.stripeCardModalMessage.header = 'INCORRECT CVC';
                                            this.stripeCardModalMessage.content = 'Incorrect CVC. Please enter valid CVC.';
                                            $("#cardException").modal("show");
                                            return [2 /*return*/, false];
                                        }
                                        if (result.error && result.error.code == "expired_card") {
                                            this.stripeCardModalMessage.header = 'CARD EXPIRED';
                                            this.stripeCardModalMessage.content = 'Card Expired. Please update your billing details to continue.';
                                            $("#cardException").modal("show");
                                            return [2 /*return*/, false];
                                        }
                                        if (result.error && result.error.code == "card_declined" && result.error.decline_code == "generic_decline") {
                                            this.stripeCardModalMessage.header = 'CARD DECLINED';
                                            this.stripeCardModalMessage.content = 'Card Declined. Please update your billing details to continue.';
                                            $("#cardException").modal("show");
                                            return [2 /*return*/, false];
                                        }
                                        if (!(result.error && result.error.code == "card_declined" && result.error.decline_code == "insufficient_funds")) return [3 /*break*/, 1];
                                        this.stripeCardModalMessage.header = 'CARD DECLINED';
                                        this.stripeCardModalMessage.content = 'Card is Declined due to insufficient funds. Please update your billing details to continue.';
                                        $("#cardException").modal("show");
                                        return [2 /*return*/, false];
                                    case 1: return [4 /*yield*/, this.creditCardSaver('/verifyProAddedCard', {
                                            prozId: this.activatedRoute.snapshot.params['prozId']
                                        })];
                                    case 2:
                                        verifyCard = _a.sent();
                                        return [4 /*yield*/, this.creditCardSaver('/saveStripeCard', {
                                                loginCode: this.activatedRoute.snapshot.params['prozId'],
                                                emailId: this.loginData.emailId,
                                                mobileNumber: this.loginData.mobileNumber,
                                                stripeCustomerId: response['stripeCustomerId'],
                                                paymentMethodString: result['setupIntent']['payment_method'],
                                                createdBy: this.activatedRoute.snapshot.params['prozId'],
                                                modifiedBy: this.activatedRoute.snapshot.params['prozId'],
                                                isDefaultCard: "YES",
                                                status: "ACTIVE",
                                            })];
                                    case 3:
                                        cardSaved = _a.sent();
                                        if (cardSaved['status'] === 200) {
                                            this.spinner.hide();
                                            this.toastr.success('Card Added Successfully');
                                            this.router.navigate(['/prozProfile/prozProfileConfirmation', this.activatedRoute.snapshot.params['prozId']]);
                                        }
                                        else {
                                            this.spinner.hide();
                                            this.toastr.warning('Card Registration Unsuccessful');
                                        }
                                        _a.label = 4;
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); }, function (error) {
                            _this.spinner.hide();
                            _this.toastr.warning('Unable to connect to server');
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    ProzProfilePaymentComponent.prototype.cardSetup = function (apiUrl, object) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + apiUrl, object)
                .subscribe(function (data) {
                resolve(data.json());
            }, function (error) {
                resolve(error);
            });
        });
    };
    ProzProfilePaymentComponent.prototype.creditCardSaver = function (apiUrl, object) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + apiUrl, object)
                .subscribe(function (data) {
                resolve(data.json());
            }, function (error) {
                resolve(error);
            });
        });
    };
    ProzProfilePaymentComponent.prototype.skip = function () {
        this.router.navigate(['/prozProfile/prozProfileConfirmation', this.activatedRoute.snapshot.params['prozId']]);
    };
    Object.defineProperty(ProzProfilePaymentComponent.prototype, "f", {
        get: function () { return this.serProzPaymentInfoDetails.controls; },
        enumerable: true,
        configurable: true
    });
    //------------------NGX STRIPE PLUGIN----------------------------------------------
    //-------------------OLD ADD CREDIT CARD DETAILS CODE------------------------------
    ProzProfilePaymentComponent.prototype.addPaypalScript = function () {
        return new Promise(function (resolve, reject) {
            var scriptTagElement = document.createElement('script');
            scriptTagElement.src = "https://www.paypalobjects.com/api/checkout.js";
            scriptTagElement.onload = resolve;
            document.body.appendChild(scriptTagElement);
        });
    };
    ProzProfilePaymentComponent.prototype.onSubmit = function () {
        this.submitted = true;
        // console.log("first checking submit function")
        // stop here if form is invalid
        if (this.serProzPaymentInfoDetails.invalid) {
            // console.log("in IF checking submit function")
            return;
        }
        // console.log(" outside checking submit function")
        this.prozPaymentSave();
    };
    // For showing card details and account details starts here....
    ProzProfilePaymentComponent.prototype.paymentTypeSelection = function (x) {
        this.paymentType = x;
        if (x == "PayPal") {
            this.cardDetails = false;
            this.accountDetails = false;
            this.paypalDetails = true;
            this.addPaypalScript().then(function () {
                // paypal.Button.render(this.paypalConfig, '');
            });
        }
    };
    ProzProfilePaymentComponent.prototype.cardDetailsRadio = function (x) {
        if (x == "Debit Card" || x == 'Credit Card') {
            this.cardDetails = true;
            this.accountDetails = false;
            this.paypalDetails = false;
            // this.addPaypalScript().then(() => {
            //   // paypal.Button.render(this.paypalConfig, '');
            // })
        }
    };
    ProzProfilePaymentComponent.prototype.netBankingRadio = function (x) {
        if (x == "Checking Account" || x == 'Savings Account') {
            this.cardDetails = false;
            this.accountDetails = true;
            this.paypalDetails = false;
            // this.addPaypalScript().then(() => {
            //   // paypal.Button.render(this.paypalConfig, '');
            // })
        }
    };
    // For showing card details and account details ends here....
    ProzProfilePaymentComponent.prototype.handlePayment = function () {
        this.handler.open({
            name: 'FireStarter',
            excerpt: 'Deposit Funds to Account',
            amount: this.serviceAreaData.serviceCost
        });
    };
    ProzProfilePaymentComponent.prototype.onPopstate = function () {
        this.handler.close();
    };
    ProzProfilePaymentComponent.prototype.stripePayment = function (token, amount) {
        var _this = this;
        this.handler.open({});
        var obj = {
            amount: this.amount,
            token: token
        };
        this.http.post('http://localhost:5000/charge', obj)
            .subscribe(function (data) {
            var response = data.json();
            console.log("This is Response: " + JSON.stringify(response));
            if (response.status === 200) {
                _this.toastr.success("Payment Data Saved Successfully...!");
                _this.stripeActions = true;
                _this.router.navigate(['/login']);
            }
            else {
                _this.toastr.warning('Payment Creation Failed...');
            }
            (function (error) {
                console.log('The execution is failed ' + JSON.stringify(error));
            });
        });
    };
    ProzProfilePaymentComponent.prototype.prozPaymentSave = function () {
        var _this = this;
        var obj = {
            "prozId": this.activatedRoute.snapshot.params['prozId'],
            "firstName": this.firstName,
            "lastName": this.lastName,
            "mobileNumber": this.mobileNumber,
            "emailId": this.emailId,
            "creditCardNumber": this.serProzPaymentInfoDetails.value.creditCardNumber,
            "creditCardType": this.serProzPaymentInfoDetails.value.creditCardType,
            "ccvNumber": this.serProzPaymentInfoDetails.value.ccvNumber,
            "selectMonth": this.serProzPaymentInfoDetails.value.selectMonth,
            "selectYear": this.serProzPaymentInfoDetails.value.selectYear,
            "businessAddressLine1": this.serProzPaymentInfoDetails.value.businessAddressLine1,
            "state": this.serProzPaymentInfoDetails.value.state,
            "city": this.serProzPaymentInfoDetails.value.city,
            "zipCode": this.serProzPaymentInfoDetails.value.zipCode,
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/addPaymentInfo', obj)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                _this.toastr.success("Payment Data Saved Successfully...!");
                _this.router.navigate(['/prozProfile/prozProfileConfirmation', _this.activatedRoute.snapshot.params['prozId']]);
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    ProzProfilePaymentComponent.prototype.prozServiceBack = function () {
        this.router.navigate(['/prozProfile/prozSubscriptionConfirmation', this.activatedRoute.snapshot.params['prozId']]);
    };
    //STATES
    ProzProfilePaymentComponent.prototype.getListOfStates = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getListOfStates', options)
            .subscribe(function (data) {
            var response = data.json();
            _this.statesData = response.response;
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //STATES
    //VIEW PROZ DETAILS
    ProzProfilePaymentComponent.prototype.viewProzDetails = function (prozId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getProDetails/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            _this.spinner.hide();
            if (response.status == 200) {
                var profile = response.profile[0];
            }
        }, function (error) {
            _this.toastr.warning('Unable to Connect to Server');
        });
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('window:popstate'),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", []),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
    ], ProzProfilePaymentComponent.prototype, "onPopstate", null);
    ProzProfilePaymentComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            providers: [_utilities_beyond__WEBPACK_IMPORTED_MODULE_7__["Beyond"]],
            selector: 'app-proz-profile-payment',
            template: __webpack_require__(/*! ./proz-profile-payment.component.html */ "./src/app/proz-profile/proz-profile-payment/proz-profile-payment.component.html"),
            styles: [__webpack_require__(/*! ./proz-profile-payment.component.css */ "./src/app/proz-profile/proz-profile-payment/proz-profile-payment.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_utilities_beyond__WEBPACK_IMPORTED_MODULE_7__["Beyond"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_http__WEBPACK_IMPORTED_MODULE_4__["Http"],
            ngx_spinner__WEBPACK_IMPORTED_MODULE_8__["NgxSpinnerService"],
            ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"],
            _nomadreservations_ngx_stripe__WEBPACK_IMPORTED_MODULE_9__["StripeService"]])
    ], ProzProfilePaymentComponent);
    return ProzProfilePaymentComponent;
}());



/***/ }),

/***/ "./src/app/proz-profile/proz-profile-routing.module.ts":
/*!*************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-routing.module.ts ***!
  \*************************************************************/
/*! exports provided: ProzProfileRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProzProfileRoutingModule", function() { return ProzProfileRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _proz_profile_layout_proz_profile_layout_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./proz-profile-layout/proz-profile-layout.component */ "./src/app/proz-profile/proz-profile-layout/proz-profile-layout.component.ts");
/* harmony import */ var _proz_profile_proz_profile_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./proz-profile/proz-profile.component */ "./src/app/proz-profile/proz-profile/proz-profile.component.ts");
/* harmony import */ var _proz_profile_confirmation_proz_profile_confirmation_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./proz-profile-confirmation/proz-profile-confirmation.component */ "./src/app/proz-profile/proz-profile-confirmation/proz-profile-confirmation.component.ts");
/* harmony import */ var _proz_profile_payment_proz_profile_payment_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./proz-profile-payment/proz-profile-payment.component */ "./src/app/proz-profile/proz-profile-payment/proz-profile-payment.component.ts");
/* harmony import */ var _proz_profile_service_areas_proz_profile_service_areas_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./proz-profile-service-areas/proz-profile-service-areas.component */ "./src/app/proz-profile/proz-profile-service-areas/proz-profile-service-areas.component.ts");
/* harmony import */ var _my_proz_profile_my_proz_profile_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./my-proz-profile/my-proz-profile.component */ "./src/app/proz-profile/my-proz-profile/my-proz-profile.component.ts");
/* harmony import */ var _proz_public_profile_proz_public_profile_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./proz-public-profile/proz-public-profile.component */ "./src/app/proz-profile/proz-public-profile/proz-public-profile.component.ts");
/* harmony import */ var _pro_edit_my_profile_pro_edit_my_profile_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./pro-edit-my-profile/pro-edit-my-profile.component */ "./src/app/proz-profile/pro-edit-my-profile/pro-edit-my-profile.component.ts");
/* harmony import */ var _proz_subscription_confirmation_proz_subscription_confirmation_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./proz-subscription-confirmation/proz-subscription-confirmation.component */ "./src/app/proz-profile/proz-subscription-confirmation/proz-subscription-confirmation.component.ts");












var routes = [
    {
        path: '', component: _proz_profile_layout_proz_profile_layout_component__WEBPACK_IMPORTED_MODULE_3__["ProzProfileLayoutComponent"],
        children: [
            {
                path: 'prozProfile/:prozId',
                component: _proz_profile_proz_profile_component__WEBPACK_IMPORTED_MODULE_4__["ProzProfileComponent"]
            },
            {
                path: 'prozProfileConfirmation/:prozId',
                component: _proz_profile_confirmation_proz_profile_confirmation_component__WEBPACK_IMPORTED_MODULE_5__["ProzProfileConfirmationComponent"]
            },
            {
                path: 'prozProfilePayment/:prozId',
                component: _proz_profile_payment_proz_profile_payment_component__WEBPACK_IMPORTED_MODULE_6__["ProzProfilePaymentComponent"]
            },
            {
                path: 'prozProfileServiceAreas/:prozId',
                component: _proz_profile_service_areas_proz_profile_service_areas_component__WEBPACK_IMPORTED_MODULE_7__["ProzProfileServiceAreasComponent"]
            },
            {
                path: 'proEditMyProfile/:prozId',
                component: _pro_edit_my_profile_pro_edit_my_profile_component__WEBPACK_IMPORTED_MODULE_10__["ProEditMyProfileComponent"]
            },
            {
                path: 'proPublicProfile',
                component: _proz_public_profile_proz_public_profile_component__WEBPACK_IMPORTED_MODULE_9__["ProzPublicProfileComponent"]
            },
            {
                path: 'myProzProfile/:prozId',
                component: _my_proz_profile_my_proz_profile_component__WEBPACK_IMPORTED_MODULE_8__["MyProzProfileComponent"]
            },
            {
                path: 'prozSubscriptionConfirmation/:prozId',
                component: _proz_subscription_confirmation_proz_subscription_confirmation_component__WEBPACK_IMPORTED_MODULE_11__["ProzSubscriptionConfirmationComponent"]
            },
        ]
    },
];
var ProzProfileRoutingModule = /** @class */ (function () {
    function ProzProfileRoutingModule() {
    }
    ProzProfileRoutingModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
            exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
        })
    ], ProzProfileRoutingModule);
    return ProzProfileRoutingModule;
}());



/***/ }),

/***/ "./src/app/proz-profile/proz-profile-service-areas/proz-profile-service-area.pipe.ts":
/*!*******************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-service-areas/proz-profile-service-area.pipe.ts ***!
  \*******************************************************************************************/
/*! exports provided: ProzProfileServiceAreaPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProzProfileServiceAreaPipe", function() { return ProzProfileServiceAreaPipe; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);



var ProzProfileServiceAreaPipe = /** @class */ (function () {
    function ProzProfileServiceAreaPipe() {
    }
    ProzProfileServiceAreaPipe.prototype.transform = function (value, args) {
        if (value !== undefined && value !== null) {
            return lodash__WEBPACK_IMPORTED_MODULE_2__["uniqBy"](value, 'zipcode');
        }
        return value;
    };
    ProzProfileServiceAreaPipe = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
            name: 'prozProfileServiceArea'
        })
    ], ProzProfileServiceAreaPipe);
    return ProzProfileServiceAreaPipe;
}());



/***/ }),

/***/ "./src/app/proz-profile/proz-profile-service-areas/proz-profile-service-areas.component.css":
/*!**************************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-service-areas/proz-profile-service-areas.component.css ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n.static{\r\n    color:red;\r\n    font-weight: bold;\r\n}\r\n.login-container {\r\n    position: relative;\r\n    margin: 3% auto;\r\n    max-width: 100%;\r\n}\r\n.login-container .loginbox {\r\n    position: relative;\r\n    width: 100% !important;\r\n    height: auto !important;\r\n    padding: 0 0 0px 0;\r\n    box-shadow: 0 0 14px rgba(0,0,0,.1);\r\n}\r\n.login-container .loginbox .loginbox-social .social-buttons .button-facebook {\r\n    float: left;\r\n    border: 2px solid #3b5998;\r\n    color: #3b5998;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-right: 40%;\r\n    background-color: #fff;\r\n}\r\n.login-container .loginbox .loginbox-social .social-buttons .button-twitter {\r\n    float: left;\r\n    border: 2px solid #29c1f6;\r\n    color: #29c1f6;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-right: 35%;\r\n    background-color: #fff;\r\n}\r\n.login-container .loginbox .loginbox-social .social-buttons .button-google {\r\n    float: right;\r\n    border: 2px solid #ef4f1d;\r\n    color: #ef4f1d;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    background-color: #fff;\r\n}\r\n.loginbox-social {\r\n    padding: 0 0 0 0 !important; \r\n}\r\n.loginbox-title{\r\n    font-weight: bold !important;\r\n    font-size: 25px !important;\r\n}\r\nlabel{\r\n    font-weight:bold !important;\r\n}\r\nlabel .mandatory{\r\n    color:red;\r\n    font-size: 16px !important;\r\n    font-weight: bold !important;\r\n}\r\n.mandatory{\r\n    color:red;\r\n    font-size: 16px !important;\r\n    font-weight: bold !important;\r\n}\r\n.hr-blue-title{    \r\n    border-top: 3px solid #5DB2FF !important;\r\n}\r\n.hr-blue{    \r\n    border-top: 1px solid #5DB2FF !important;\r\n}\r\n.logoImage{\r\n    width:100px; \r\n    height:100px;\r\n    margin-top:5px; \r\n    border-width: 1px;   \r\n    border-color: #bc5679;   \r\n    border-style: solid; \r\n}\r\n.aggregateRating{\r\n    color:#bc5679; \r\n    font-size: 14px !important;\r\n    font-weight: bold !important;\r\n}\r\n.aggregateRating span{\r\n    color: green;\r\n    font-size: 14px !important;\r\n    font-weight: bold !important;\r\n}\r\n.totalcost{\r\n    color:#bc5679; \r\n    font-size: 14px !important;\r\n    font-weight: bold !important; \r\n    margin-right: auto !important;\r\n    margin-left: auto !important;\r\n}\r\n.totalcost span{\r\n    color: green;\r\n    font-size: 14px !important;\r\n    font-weight: bold !important;\r\n}\r\n.well{\r\n    margin-bottom: 0 !important;\r\n    padding: 0 10px !important;\r\n}\r\n.well.with-footer {\r\n    padding-bottom: 10px !important;\r\n}\r\n.well.with-header {\r\n    padding-top: 10px !important;\r\n}\r\n.btn {\r\n    font-size: 14px !important;\r\n    font-weight: bold !important;\r\n}\r\n.form-title {\r\n    display: block;\r\n    padding: 8px 0;\r\n    border-bottom: 1px dashed #5DB2FF;\r\n    font-size: 15px;\r\n    font-weight: bold;\r\n    color: #5DB2FF;\r\n    margin-bottom: 15px;\r\n}\r\n.esri-view {\r\n    height: 500px;\r\n  }\r\nagm-map {\r\n    height: 60vh;\r\n    width:100%;\r\n}\r\n.map { width: 100%; height: 400px; }\r\n#google_map img[src*='kml'] {\r\n    opacity: .15;\r\n}\r\n.form-group{\r\n    margin-top: 0px !important;\r\n    margin-bottom: 0px !important;\r\n}\r\n.input .form-control{\r\n    width: 100px !important;\r\n    vertical-align: middle;\r\n\r\n}\r\n.form-control{\r\n    padding:4px 3px !important;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcHJvei1wcm9maWxlL3Byb3otcHJvZmlsZS1zZXJ2aWNlLWFyZWFzL3Byb3otcHJvZmlsZS1zZXJ2aWNlLWFyZWFzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQTtJQUNJLFVBQVU7SUFDVixrQkFBa0I7Q0FDckI7QUFDRDtJQUNJLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsZ0JBQWdCO0NBQ25CO0FBRUQ7SUFDSSxtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLHdCQUF3QjtJQUN4QixtQkFBbUI7SUFHbkIsb0NBQW9DO0NBQ3ZDO0FBRUQ7SUFDSSxZQUFZO0lBQ1osMEJBQTBCO0lBQzFCLGVBQWU7SUFDZixtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsdUJBQXVCO0NBQzFCO0FBRUQ7SUFDSSxZQUFZO0lBQ1osMEJBQTBCO0lBQzFCLGVBQWU7SUFDZixtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsdUJBQXVCO0NBQzFCO0FBRUQ7SUFDSSxhQUFhO0lBQ2IsMEJBQTBCO0lBQzFCLGVBQWU7SUFDZixtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLGFBQWE7SUFDYix1QkFBdUI7Q0FDMUI7QUFHQTtJQUNHLDRCQUE0QjtDQUMvQjtBQUVEO0lBQ0ksNkJBQTZCO0lBQzdCLDJCQUEyQjtDQUM5QjtBQUVEO0lBQ0ksNEJBQTRCO0NBQy9CO0FBRUQ7SUFDSSxVQUFVO0lBQ1YsMkJBQTJCO0lBQzNCLDZCQUE2QjtDQUNoQztBQUVEO0lBQ0ksVUFBVTtJQUNWLDJCQUEyQjtJQUMzQiw2QkFBNkI7Q0FDaEM7QUFFRDtJQUNJLHlDQUF5QztDQUM1QztBQUVEO0lBQ0kseUNBQXlDO0NBQzVDO0FBRUQ7SUFDSSxZQUFZO0lBQ1osYUFBYTtJQUNiLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLG9CQUFvQjtDQUN2QjtBQUVEO0lBQ0ksY0FBYztJQUNkLDJCQUEyQjtJQUMzQiw2QkFBNkI7Q0FDaEM7QUFFRDtJQUNJLGFBQWE7SUFDYiwyQkFBMkI7SUFDM0IsNkJBQTZCO0NBQ2hDO0FBRUQ7SUFDSSxjQUFjO0lBQ2QsMkJBQTJCO0lBQzNCLDZCQUE2QjtJQUM3Qiw4QkFBOEI7SUFDOUIsNkJBQTZCO0NBQ2hDO0FBRUQ7SUFDSSxhQUFhO0lBQ2IsMkJBQTJCO0lBQzNCLDZCQUE2QjtDQUNoQztBQUVEO0lBQ0ksNEJBQTRCO0lBQzVCLDJCQUEyQjtDQUM5QjtBQUVEO0lBQ0ksZ0NBQWdDO0NBQ25DO0FBRUQ7SUFDSSw2QkFBNkI7Q0FDaEM7QUFFRDtJQUNJLDJCQUEyQjtJQUMzQiw2QkFBNkI7Q0FDaEM7QUFFRDtJQUNJLGVBQWU7SUFDZixlQUFlO0lBQ2Ysa0NBQWtDO0lBQ2xDLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLG9CQUFvQjtDQUN2QjtBQUVEO0lBQ0ksY0FBYztHQUNmO0FBRUQ7SUFDRSxhQUFhO0lBQ2IsV0FBVztDQUNkO0FBRUQsT0FBTyxZQUFZLENBQUMsY0FBYyxFQUFFO0FBRXBDO0lBQ0ksYUFBYTtDQUNoQjtBQUVEO0lBQ0ksMkJBQTJCO0lBQzNCLDhCQUE4QjtDQUNqQztBQUVEO0lBQ0ksd0JBQXdCO0lBQ3hCLHVCQUF1Qjs7Q0FFMUI7QUFHRDtJQUNJLDJCQUEyQjtDQUM5QiIsImZpbGUiOiJzcmMvYXBwL3Byb3otcHJvZmlsZS9wcm96LXByb2ZpbGUtc2VydmljZS1hcmVhcy9wcm96LXByb2ZpbGUtc2VydmljZS1hcmVhcy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG4uc3RhdGlje1xyXG4gICAgY29sb3I6cmVkO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuLmxvZ2luLWNvbnRhaW5lciB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBtYXJnaW46IDMlIGF1dG87XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5sb2dpbi1jb250YWluZXIgLmxvZ2luYm94IHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XHJcbiAgICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcclxuICAgIHBhZGRpbmc6IDAgMCAwcHggMDtcclxuICAgIC13ZWJraXQtYm94LXNoYWRvdzogMCAwIDE0cHggcmdiYSgwLDAsMCwuMSk7XHJcbiAgICAtbW96LWJveC1zaGFkb3c6IDAgMCAxNHB4IHJnYmEoMCwwLDAsLjEpO1xyXG4gICAgYm94LXNoYWRvdzogMCAwIDE0cHggcmdiYSgwLDAsMCwuMSk7XHJcbn1cclxuXHJcbi5sb2dpbi1jb250YWluZXIgLmxvZ2luYm94IC5sb2dpbmJveC1zb2NpYWwgLnNvY2lhbC1idXR0b25zIC5idXR0b24tZmFjZWJvb2sge1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjM2I1OTk4O1xyXG4gICAgY29sb3I6ICMzYjU5OTg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICB3aWR0aDogNTBweDtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIG1hcmdpbi1yaWdodDogNDAlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxufVxyXG5cclxuLmxvZ2luLWNvbnRhaW5lciAubG9naW5ib3ggLmxvZ2luYm94LXNvY2lhbCAuc29jaWFsLWJ1dHRvbnMgLmJ1dHRvbi10d2l0dGVyIHtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgIzI5YzFmNjtcclxuICAgIGNvbG9yOiAjMjljMWY2O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgd2lkdGg6IDUwcHg7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDM1JTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbn1cclxuXHJcbi5sb2dpbi1jb250YWluZXIgLmxvZ2luYm94IC5sb2dpbmJveC1zb2NpYWwgLnNvY2lhbC1idXR0b25zIC5idXR0b24tZ29vZ2xlIHtcclxuICAgIGZsb2F0OiByaWdodDtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkICNlZjRmMWQ7XHJcbiAgICBjb2xvcjogI2VmNGYxZDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIHdpZHRoOiA1MHB4O1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxufVxyXG5cclxuXHJcbiAubG9naW5ib3gtc29jaWFsIHtcclxuICAgIHBhZGRpbmc6IDAgMCAwIDAgIWltcG9ydGFudDsgXHJcbn1cclxuXHJcbi5sb2dpbmJveC10aXRsZXtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXNpemU6IDI1cHggIWltcG9ydGFudDtcclxufVxyXG5cclxubGFiZWx7XHJcbiAgICBmb250LXdlaWdodDpib2xkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbmxhYmVsIC5tYW5kYXRvcnl7XHJcbiAgICBjb2xvcjpyZWQ7XHJcbiAgICBmb250LXNpemU6IDE2cHggIWltcG9ydGFudDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5tYW5kYXRvcnl7XHJcbiAgICBjb2xvcjpyZWQ7XHJcbiAgICBmb250LXNpemU6IDE2cHggIWltcG9ydGFudDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5oci1ibHVlLXRpdGxleyAgICBcclxuICAgIGJvcmRlci10b3A6IDNweCBzb2xpZCAjNURCMkZGICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5oci1ibHVleyAgICBcclxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjNURCMkZGICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5sb2dvSW1hZ2V7XHJcbiAgICB3aWR0aDoxMDBweDsgXHJcbiAgICBoZWlnaHQ6MTAwcHg7XHJcbiAgICBtYXJnaW4tdG9wOjVweDsgXHJcbiAgICBib3JkZXItd2lkdGg6IDFweDsgICBcclxuICAgIGJvcmRlci1jb2xvcjogI2JjNTY3OTsgICBcclxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7IFxyXG59XHJcblxyXG4uYWdncmVnYXRlUmF0aW5ne1xyXG4gICAgY29sb3I6I2JjNTY3OTsgXHJcbiAgICBmb250LXNpemU6IDE0cHggIWltcG9ydGFudDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5hZ2dyZWdhdGVSYXRpbmcgc3BhbntcclxuICAgIGNvbG9yOiBncmVlbjtcclxuICAgIGZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQgIWltcG9ydGFudDtcclxufVxyXG5cclxuLnRvdGFsY29zdHtcclxuICAgIGNvbG9yOiNiYzU2Nzk7IFxyXG4gICAgZm9udC1zaXplOiAxNHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXdlaWdodDogYm9sZCAhaW1wb3J0YW50OyBcclxuICAgIG1hcmdpbi1yaWdodDogYXV0byAhaW1wb3J0YW50O1xyXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG8gIWltcG9ydGFudDtcclxufVxyXG5cclxuLnRvdGFsY29zdCBzcGFue1xyXG4gICAgY29sb3I6IGdyZWVuO1xyXG4gICAgZm9udC1zaXplOiAxNHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXdlaWdodDogYm9sZCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ud2VsbHtcclxuICAgIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDtcclxuICAgIHBhZGRpbmc6IDAgMTBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ud2VsbC53aXRoLWZvb3RlciB7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ud2VsbC53aXRoLWhlYWRlciB7XHJcbiAgICBwYWRkaW5nLXRvcDogMTBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4uYnRuIHtcclxuICAgIGZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmZvcm0tdGl0bGUge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBwYWRkaW5nOiA4cHggMDtcclxuICAgIGJvcmRlci1ib3R0b206IDFweCBkYXNoZWQgIzVEQjJGRjtcclxuICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgY29sb3I6ICM1REIyRkY7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG59XHJcblxyXG4uZXNyaS12aWV3IHtcclxuICAgIGhlaWdodDogNTAwcHg7XHJcbiAgfVxyXG5cclxuICBhZ20tbWFwIHtcclxuICAgIGhlaWdodDogNjB2aDtcclxuICAgIHdpZHRoOjEwMCU7XHJcbn1cclxuXHJcbi5tYXAgeyB3aWR0aDogMTAwJTsgaGVpZ2h0OiA0MDBweDsgfVxyXG5cclxuI2dvb2dsZV9tYXAgaW1nW3NyYyo9J2ttbCddIHtcclxuICAgIG9wYWNpdHk6IC4xNTtcclxufVxyXG5cclxuLmZvcm0tZ3JvdXB7XHJcbiAgICBtYXJnaW4tdG9wOiAwcHggIWltcG9ydGFudDtcclxuICAgIG1hcmdpbi1ib3R0b206IDBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4uaW5wdXQgLmZvcm0tY29udHJvbHtcclxuICAgIHdpZHRoOiAxMDBweCAhaW1wb3J0YW50O1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuXHJcbn1cclxuXHJcblxyXG4uZm9ybS1jb250cm9se1xyXG4gICAgcGFkZGluZzo0cHggM3B4ICFpbXBvcnRhbnQ7XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/proz-profile/proz-profile-service-areas/proz-profile-service-areas.component.html":
/*!***************************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-service-areas/proz-profile-service-areas.component.html ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n<app-commontopprozblueheader></app-commontopprozblueheader>\r\n<div class=\"container\">\r\n  <div class=\"body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12 col-sm-12 col-xs-12\">\r\n        <!-- PROZ PROFILE - STARTS HERE -->\r\n        <div class=\"login-container animated fadeInDown\">\r\n          <div class=\"loginbox bg-white\">\r\n            <div class=\"widget-body\">\r\n              <div id=\"registration-form\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-12\">\r\n                    <div class=\"form-group\">\r\n                      <div class=\"loginbox-title\"> PRO PROFILE - SERVICE AREAS</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <!-- <div class=\"row\">\r\n                  <div class=\"col-sm-12\">\r\n                    <div class=\"loginbox-title\" style=\"color:red\">WORK IN PROGRESS</div>\r\n                    <hr class=\"hr-blue-title\">\r\n                  </div>\r\n                </div> -->\r\n                <div class=\"form-title\">\r\n                  Service Area Details\r\n                </div>\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-12\">\r\n                    <div class=\"form-group\">\r\n                      <h5><span class=\"mandatory\">*</span> <b>Please click on the map to select county</b></h5>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-12\" *ngIf=\"showMap\">\r\n                    <!-- <div id=\"google_map\"></div> -->\r\n                    <div class=\"map\" id=\"leafletmap\" leaflet (leafletMapReady)=\"onMapReady($event,'na')\"\r\n                      [leafletOptions]=\"options\" [leafletLayersControl]=\"layersControl\"></div>\r\n                </div>\r\n                <br />\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-2\">\r\n\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <a class=\"btn btn-danger btn-sm shiny\" (click)=\"clearMap()\">\r\n                      Clear Map\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n                <br />\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-8\">\r\n                    <div class=\"form-group\">\r\n                        <!---TASK#469,470-Fixed-->\r\n                      <label for=\"nameofbusiness\" style=\"color:blue;font-size:18px;\">Click on Map to Select Additional\r\n                        Counties</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-4\">\r\n                  </div>\r\n                </div>   \r\n                <br>\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-8\">\r\n                    <!---TASK#469-Fixed-->\r\n                    <div class=\"form-group\">\r\n                      <label for=\"nameofbusiness\" style=\"color:blue;font-size:18px;\">Click on the County Name to Select Service Zipcodes\r\n                        </label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-4\">\r\n                  </div>\r\n                </div>\r\n                <br>\r\n                <div class=\"page-header position-relative\">\r\n                  <div class=\"header-title\">\r\n                    <h1>\r\n                      <b>List of Selected Service Area Households</b>\r\n                    </h1>\r\n                  </div>\r\n                </div>\r\n                <br>\r\n                <div class=\"row\">\r\n                  <div class=\"col-xs-12 col-md-12\">\r\n                    <div class=\"widget-body\">\r\n                      <div class=\"flip-scroll\">\r\n                        <table class=\"table table-bordered table-striped table-condensed flip-content\">\r\n                          <thead class=\"flip-content bordered-palegreen\">\r\n                            <tr>\r\n                              <th style=\"width: 8%;\">\r\n                                County\r\n                              </th>\r\n                              <th style=\"width: 4%;\">\r\n                                State\r\n                              </th>\r\n                              <th *ngIf=\"typeOfSubscription=='monthly'\">\r\n                                Households\r\n                              </th>\r\n                              <th style=\"width: 15%;\">\r\n                                Category\r\n                              </th>\r\n                              <th style=\"width: 35%;\">\r\n                                Sub Category\r\n                              </th>\r\n                              <th *ngIf=\"typeOfSubscription=='monthly'\" style=\"width: 15%;\">\r\n                                Monthly Subscription Fee\r\n                              </th>\r\n                              <th *ngIf=\"typeOfSubscription=='perLead'\" style=\"width: 8%;\">\r\n                                Per Lead Fees\r\n                              </th>\r\n                              <th *ngIf=\"typeOfSubscription=='monthly'\">\r\n                                Total\r\n                              </th>\r\n                              <th style=\"width: 5%;\">\r\n                                Delete\r\n                              </th>\r\n                              <!-- <th>\r\n                                Add Category\r\n                              </th> -->\r\n                            </tr>\r\n                          </thead>\r\n\r\n                          <ng-container *ngIf=\"countyStatus\">\r\n                              <tbody>\r\n                                <ng-container *ngFor=\"let data of countyList\">\r\n                                  <tr>\r\n                                    <td style=\"width:18%\"><a data-toggle=\"modal\" data-target=\".bs-example-modal-lg\"\r\n                                        (click)=\"getZipcodesFromCountyData(data,data.stateCode,'view')\">{{data.county}}</a></td>\r\n                                    <td >{{data.state}}</td>\r\n                                    <td *ngIf=\"typeOfSubscription=='monthly'\">{{data.households}}</td>\r\n                                    <td style=\"width:20%\">\r\n                                      <table>\r\n                                        <ng-container *ngIf=\"typeOfSubscription=='monthly'\">\r\n                                          <tr *ngFor=\"let categoryData of data.category\">\r\n                                            <td>\r\n                                              <div style=\"overflow:auto;width:100%;height:100px\">\r\n                                                <div>\r\n                                                  <div style=\"float:left;width:60%;\">\r\n                                                    <label>\r\n                                                      <input type=\"checkbox\" [(ngModel)]=\"categoryData.checkedNew\"\r\n                                                        (ngModelChange)=\"changeCategoryService(data,categoryData)\">\r\n                                                      <span class=\"text\">{{categoryData.serviceName}}</span>\r\n                                                    </label>\r\n                                                  </div>\r\n                                                  <div style=\"float:right;width:40%;\">\r\n                                                    <span>&nbsp;</span>\r\n                                                  </div>\r\n                                                </div>\r\n                                              </div>\r\n                                            </td>\r\n                                          </tr>\r\n                                        </ng-container>\r\n                                        <ng-container *ngIf=\"typeOfSubscription=='perLead'\">\r\n                                          <tr *ngFor=\"let categoryData of data.subCategoriesListPerLead\">\r\n                                            <td>\r\n                                              <div style=\"overflow:auto;width:100%;height:100px;border-bottom: 1px solid black;\">\r\n                                                <div>\r\n                                                  <div style=\"float:left;width:60%;\">\r\n                                                    <label>\r\n                                                      <input type=\"checkbox\" [ngModelOptions]=\"{standalone: true}\" \r\n                                                        [(ngModel)]=\"categoryData.checkedNewLead\" [disabled]=\"categoryData.allowCatCheck\"\r\n                                                        (ngModelChange)=\"changeCategoryServiceLead(data,categoryData)\">\r\n                                                      <span class=\"text\">{{categoryData.serviceName}}</span>\r\n                                                    </label>\r\n                                                  </div>\r\n                                                  <div style=\"float:right;width:40%;\">\r\n                                                    <span>&nbsp;</span>\r\n                                                  </div>\r\n                                                </div>\r\n                                              </div>\r\n                                            </td>\r\n                                          </tr>\r\n                                        </ng-container>\r\n        \r\n                                      </table>\r\n                                    </td>\r\n                                    <td colspan=\"2\" *ngIf=\"typeOfSubscription=='monthly'\">\r\n                                      <table>\r\n                                        <ng-container *ngFor=\"let categoryData of data.category\">\r\n                                          <ng-container>\r\n                                            <tr>\r\n                                              <td>\r\n                                                <div style=\"overflow:auto;width:100%;height:100px; border-bottom: 1px solid black;\">\r\n                                                  <div>\r\n                                                    <ng-container\r\n                                                      *ngFor=\"let categoryDataSub of categoryData.serviceCategories\">\r\n                                                      <div style=\"float:left;width:60%;\">\r\n                                                        <label>\r\n                                                          <input type=\"checkbox\" [(ngModel)]=\"categoryDataSub.checkedNew\"\r\n                                                            (ngModelChange)=\"changeSubCategoryService(data,categoryDataSub)\">\r\n                                                          <span class=\"text\">{{categoryDataSub.subcategoryName}}</span>\r\n                                                        </label>\r\n                                                      </div>\r\n                                                      <div style=\"float:right;width:40%;\">\r\n                                                        <span>$&nbsp;{{categoryDataSub.estimatedCost}}</span>\r\n                                                      </div>\r\n                                                    </ng-container>\r\n                                                  </div>\r\n                                                </div>\r\n                                              </td>\r\n                                            </tr>\r\n                                          </ng-container>\r\n                                        </ng-container>\r\n                                      </table>\r\n                                    </td>\r\n                                    <td *ngIf=\"typeOfSubscription=='monthly'\">\r\n                                      $ {{data.totalEstimatedCost}}\r\n                                    </td>\r\n                                    <td colspan=\"2\" *ngIf=\"typeOfSubscription=='perLead'\">\r\n                                      <table>\r\n                                        <ng-container *ngFor=\"let categoryData of data.subCategoriesListPerLead\">\r\n                                          <ng-container>\r\n                                            <tr>\r\n                                              <td>\r\n                                                <div style=\"overflow:auto;width:100%;height:100px; border-bottom: 1px solid black;\">\r\n                                                  <div>\r\n                                                    <ng-container\r\n                                                      *ngFor=\"let categoryDataSub of categoryData.serviceCategories\">\r\n                                                      <div style=\"float:left;width:60%;\">\r\n                                                        <label>\r\n                                                          <input type=\"checkbox\" [ngModelOptions]=\"{standalone: true}\" [disabled]=\"categoryDataSub.allowCheck\"\r\n                                                            [(ngModel)]=\"categoryDataSub.checkedNewLead\"\r\n                                                            (ngModelChange)=\"changeSubCategoryServiceLead(data,categoryDataSub)\">\r\n                                                          <span class=\"text\">{{categoryDataSub.subcategoryName}}</span>\r\n                                                        </label>\r\n                                                      </div>\r\n                                                      <div style=\"float:right;width:15%;\">\r\n                                                        <span *ngIf=\"!categoryDataSub.allowCheck\">$&nbsp;{{categoryDataSub.perLeadCost}}</span>\r\n                                                        <span *ngIf=\"categoryDataSub.allowCheck\">&nbsp;{{categoryDataSub.perLeadCost}}</span>\r\n                                                      </div>\r\n                                                    </ng-container>\r\n                                                  </div>\r\n                                                </div>\r\n                                              </td>\r\n                                            </tr>\r\n                                          </ng-container>\r\n                                        </ng-container>\r\n                                      </table>\r\n                                    </td>\r\n                                    <!-- <td colspan=\"2\" *ngIf=\"typeOfSubscription=='perLead'\">\r\n                                      <table>\r\n                                        <ng-container *ngFor=\"let categoryData of data.subCategoriesListPerLead\">\r\n                                          <ng-container>\r\n                                            <tr>\r\n                                              <td>\r\n                                                <div style=\"overflow:auto;width:100%;height:100px; border-bottom: 1px solid black;\">\r\n                                                  <div>\r\n                                                    <ng-container\r\n                                                      *ngFor=\"let categoryDataSub of categoryData.serviceCategories\">\r\n                                                      <div style=\"float:right;width:15%;\">\r\n                                                        <span>$&nbsp;{{categoryDataSub.perLeadCost}}</span>\r\n                                                      </div>\r\n                                                    </ng-container>\r\n                                                  </div>\r\n                                                </div>\r\n                                              </td>\r\n                                            </tr>\r\n                                          </ng-container>\r\n                                        </ng-container>\r\n                                      </table>\r\n                                    </td> -->\r\n                                    <!-- <td *ngIf=\"noSubCategory\">\r\n\r\n                                      <div>hs</div>\r\n                                    </td> -->\r\n                                    <td>\r\n                                      <a class=\"btn btn-danger btn-sm shiny\" (click)=\"deleteCounty(data)\">\r\n                                        <i class=\"fa fa-trash-o\"></i>\r\n                                      </a>\r\n                                    </td>\r\n                                    <!-- <td>\r\n                                        <a class=\"btn btn-info btn-sm shiny\" (click)=\"comingSoonAddCategory()\">\r\n                                          <i class=\"fa fa-plus\"></i>\r\n                                        </a>\r\n                                      </td> -->\r\n                                  </tr>\r\n                                </ng-container>\r\n                              </tbody>\r\n                            </ng-container>\r\n                        </table>\r\n                        <ng-container *ngIf=\"!countyStatus\">\r\n                          NO RECORDS FOUND\r\n                        </ng-container>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <br>\r\n       <!---TASK#471-Fixed-->\r\n                <!-- <div class=\"col-sm-12\">\r\n                  <div class=\"form-group\">\r\n                    <div class=\"col-sm-2\"></div>\r\n                    <div class=\"col-sm-4\"></div>\r\n                    <div class=\"col-sm-2\"></div>\r\n                    <div class=\"col-sm-4\">\r\n                      <input type=\"button\" class=\"btn btn-primary shiny btn-block\" value=\"Add County\"\r\n                        (click)=\"comingSoon()\">\r\n                    </div>\r\n                  </div>\r\n                </div> -->\r\n                <!-- <div class=\"col-sm-12\">\r\n                  <div class=\"form-group\">\r\n                    <div class=\"col-sm-2\">\r\n                      <label for=\"areasofexpertise\">Total Households</label>\r\n                    </div>\r\n                    <div class=\"col-sm-4\">\r\n                      <span class=\"input-icon icon-right\">\r\n                        <input type=\"text\" class=\"form-control\" readonly value={{totalNumberOfHouses}}>\r\n                      </span>\r\n                    </div>\r\n                    <div class=\"col-sm-2\">\r\n                      <label for=\"areasofexpertise\">Total Service Cost</label>\r\n                    </div>\r\n                    <div class=\"col-sm-4\">\r\n                      <span class=\"input-icon icon-right\">\r\n                        <input type=\"text\" class=\"form-control\" id=\"serviceareas\" value=\"$ 0\" readonly>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div> -->\r\n                <br>\r\n                <br>\r\n                <!-- <div class=\"page-header position-relative\">\r\n                  <div class=\"header-title\">\r\n                    <h1>\r\n                      <b>List of Service Area Categories</b>\r\n                    </h1>\r\n                  </div>\r\n                </div> -->\r\n\r\n\r\n\r\n\r\n                <!-- <div class=\"row\">\r\n                  <div class=\"col-xs-12 col-md-12\">\r\n                    <div class=\"flip-scroll\">\r\n                      <div class=\"table-scrollable\">\r\n                        <table class=\"table table-bordered table-striped table-condensed flip-content\">\r\n                          <thead class=\"flip-content bordered-palegreen\">\r\n                            <tr>\r\n                              <th>\r\n                                <label>\r\n                                  <input type=\"checkbox\" [(ngModel)]=\"selectAllCategories\"\r\n                                    (ngModelChange)=\"selectAllCategoriesCheck(selectAllCategories)\">\r\n                                  <span class=\"text\"></span>\r\n                                </label>\r\n                              </th>\r\n                              <th>\r\n                                Category\r\n                              </th>\r\n                              <th>\r\n                                Sub Category\r\n                              </th>\r\n                              <th>\r\n                                Subscription\r\n                              </th>\r\n                              <th>\r\n                                Service Cost\r\n                              </th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            <tr *ngFor=\"let data of subCategoriesList\">\r\n                              <td>\r\n                                <label>\r\n                                  <input type=\"checkbox\" [(ngModel)]=\"data.checked\">\r\n                                  <span class=\"text\"></span>\r\n                                </label>\r\n                              </td>\r\n                              <td>\r\n                                <div class=\"form-group\">\r\n                                  <input type=\"text\" class=\"form-control\" value=\"{{data.categoryName}}\" readonly>\r\n                                </div>\r\n                              </td>\r\n                              <td>\r\n                                <div class=\"form-group\">\r\n                                  <input type=\"text\" class=\"form-control\" value=\"{{data.subcategoryName}}\" readonly>\r\n                                </div>\r\n                              </td>\r\n                              <td>\r\n                                <div class=\"form-group\">\r\n                                  <select class=\"form-control group\" data-bv-field=\"row-title\" placetabindex=\"1\"\r\n                                    [(ngModel)]=\"data.subscriptionType\" name=\"subscriptionType\"\r\n                                    (change)=\"paymentType(data,data.subscriptionType)\" required autofocus>\r\n                                    <option value=\"\">--Select Subscription Type--</option>\r\n                                    <option value=\"Monthly\">Monthly</option>\r\n                                    <option value=\"Quarterly\">Quarterly</option>\r\n                                    <option value=\"Yearly\">Yearly</option>\r\n                                    <option value=\"per lead\">Per Lead</option>\r\n                                  </select>\r\n                                </div>\r\n                              </td>\r\n                              <td>\r\n                                <div class=\"form-group\">\r\n                                  <span class=\"input-icon icon-right\">\r\n                                    <i class=\"fa fa-usd\"></i>\r\n                                    <input type=\"text\" class=\"form-control\" placeholder=\"Service Cost\"\r\n                                      [(ngModel)]=\"data.estimatedCost\" value=\"{{data.estimatedCost}}\" name=\"houseHolds\"\r\n                                      readonly>\r\n                                  </span>\r\n                                </div>\r\n                              </td>\r\n                            </tr>\r\n                          </tbody>\r\n\r\n                        </table>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div> -->\r\n\r\n                <br>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <input type=\"button\" class=\"btn btn-primary shiny btn-block\" value=\"<&nbsp;&nbsp;Back\"\r\n                        (click)=\"prozProfileBack()\">\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <input type=\"button\" class=\"btn btn-success shiny btn-block\" value=\"Add Trade License\"\r\n                        data-toggle=\"modal\" data-target=\".bs-example-modal-sm\">\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <input type=\"button\" class=\"btn btn-success shiny btn-block\" value=\"Save & Continue&nbsp;&nbsp;>\"\r\n                        (click)=\"applyChange('button')\">\r\n                    </div>\r\n                  </div>\r\n                  <!-- <div class=\"col-sm-2\" *ngIf=\"modeOfExecutionInsert\">\r\n                    <div class=\"form-group\">\r\n                      <input type=\"button\" class=\"btn btn-success shiny btn-block\" value=\"Next&nbsp;&nbsp;>\"\r\n                        (click)=\"populateCounty()\">\r\n                    </div>\r\n                  </div> -->\r\n                  <!-- <div class=\"col-sm-2\" *ngIf=\"modeOfExecutionUpdate\">\r\n                    <div class=\"form-group\">\r\n                      <input type=\"button\" class=\"btn btn-success shiny btn-block\" value=\"Next&nbsp;&nbsp;>\"\r\n                        (click)=\"updateCounty()\">\r\n                    </div>\r\n                  </div> -->\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <!-- /PROZ PROFILE - STARTS HERE -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal fade bs-example-modal-lg\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n  aria-hidden=\"true\" style=\"display: none;\">\r\n  <div class=\"modal-dialog modal-lg\">\r\n    <div class=\"modal-content\">\r\n      \r\n      <div class=\"modal-header\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"clearZips()\">×</button>\r\n        <h4 class=\"modal-title\" id=\"myLargeModalLabel\">Zipcodes</h4>\r\n      </div>\r\n      <div class=\"modal-body\" *ngIf=\"showZipcode\">\r\n        <div style=\"width:100%;\">\r\n          <table class=\"table table-bordered table-striped table-condensed flip-content\">\r\n            <thead class=\"flip-content bordered-palegreen\">\r\n              <tr>\r\n                <th>\r\n                  <label>\r\n                    <input type=\"checkbox\" [(ngModel)]=\"selectAllZipcodesVar\"\r\n                      (ngModelChange)=\"selectAllZipcodes(selectAllZipcodesVar)\">\r\n                    <span class=\"text\"></span>\r\n                  </label>\r\n                </th>\r\n                <th>\r\n                  Zipcode\r\n                </th>\r\n                <th *ngIf=\"typeOfSubscription=='monthly'\">\r\n                  Households\r\n                </th>\r\n                <th>\r\n                  County\r\n                </th>\r\n                <th>\r\n                  City\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr *ngFor=\"let data of displayZipcodes\">\r\n                <td> <label>\r\n                    <input type=\"checkbox\" [(ngModel)]=\"data.checked\" (change)=\"zipcodesSelection(data)\">\r\n                    <span class=\"text\"></span>\r\n                  </label></td>\r\n                <td>{{data.zipcode}}</td>\r\n                <td *ngIf=\"typeOfSubscription=='monthly'\">{{data.households}}</td>\r\n                <td>{{data.county}}</td>\r\n                <td>{{data.city}}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          <br>\r\n          <!-- <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <pagination-controls class=\"span10\" style=\"float:left\" (pageChange)=\"p = $event\"></pagination-controls>\r\n            </div>\r\n          </div> -->\r\n        </div>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <span style=\"float: left\">\r\n          {{displayZipcodes.length}} Zipcode Records Found\r\n        </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n        <br>\r\n        <span style=\"float: left;color:red\" *ngIf=\"zipcodeValidation\">\r\n          <b>Please Select Atleast One Zipcode </b>\r\n        </span>\r\n        <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"zipcodeValidation||zipcodeValidationEmpty\"\r\n          (click)=\"insertCountiesZipcodeBatch(displayZipcodes[0].county)\" data-dismiss=\"modal\">Save</button>\r\n        <button type=\"button\" class=\"btn btn-warning\" data-dismiss=\"modal\" (click)=\"clearZips()\">Cancel</button>\r\n      </div>\r\n    </div><!-- /.modal-content -->\r\n  </div><!-- /.modal-dialog -->\r\n</div>\r\n\r\n<div style=\"width:100%\" class=\"modal fade bs-example-modal-sm\" tabindex=\"-1\" role=\"dialog\"\r\n  aria-labelledby=\"myLargeModalLabelTrade\" aria-hidden=\"true\" style=\"display: none;\">\r\n  <div class=\"modal-dialog modal-lg\">\r\n    <div class=\"modal-content\">\r\n\r\n      <div class=\"modal-header\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\r\n        <h4 class=\"modal-title\" id=\"myLargeModalLabelTrade\">Trade License Details</h4>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div style=\"width:100%;height:auto;\">\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n              <form [formGroup]=\"addTradeLicenseList\">\r\n                <ng-container formArrayName=\"tradeLicense\">\r\n                  <div id=\"field\" *ngFor=\"let item of addTradeLicenseList.get('tradeLicense').controls; let i = index;\"\r\n                    [formGroupName]=\"i\">\r\n                    <div id=\"field0\">\r\n                      <div class=\"row\">\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"stateRegistred\">State Registered In?<span class=\"mandatory\">*</span></label>\r\n                            <select class=\"form-control\" id=\"stateRegistred\" name=\"status\" data-bv-field=\"row-title\"\r\n                              formControlName=\"stateRegisteredIn\" (change)=\"checkValidationTrade()\">\r\n                              <option value=\"\">Select</option>\r\n                              <option *ngFor=\"let data of statesData\" value={{data.stateName}}>\r\n                                {{data.stateName}}\r\n                              </option>\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"tradeLicense1\">Trade License Category<span class=\"mandatory\">*</span></label>\r\n                            <select class=\"form-control\" id=\"tradeLicense1\" name=\"status\" data-bv-field=\"row-title\"\r\n                              formControlName=\"tradeLicense\" (change)=\"checkValidationTrade()\">\r\n                              <option value=\"\">Select</option>\r\n                              <option *ngFor=\"let data of categoriesData\" value={{data.cat_code}}>\r\n                                {{data.categoryName}}\r\n                              </option>\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-2\">\r\n                          <div class=\"form-group\">\r\n                            <span class=\"input-icon icon-right\" style=\"margin-top:28px;\">\r\n                              <a (click)=\"deleteFieldValue(i)\" class=\"btn btn-danger btn-sm shiny\">\r\n                                <i class=\"fa fa-trash-o\"></i>\r\n                              </a>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"row\">\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"tradeLicense1N\">Trade License #<span class=\"mandatory\">*</span> </label>\r\n                            <span class=\"input-icon icon-right\">\r\n                              <input type=\"text\" class=\"form-control\" id=\"tradeLicense1N\"\r\n                                placeholder=\"Enter Trade License #\" formControlName=\"tradeLicenseNumber\"\r\n                                (change)=\"checkValidationTrade()\">\r\n                              <i class=\"fa fa-file\"></i>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-5\">\r\n                          <div class=\"form-group\">\r\n                            <label for=\"tradeLicense1Exp\">Trade License Expiration<span\r\n                                class=\"mandatory\">*</span></label>\r\n                            <span class=\"input-icon icon-right\">\r\n                              <input type=\"date\" class=\"form-control\" id=\"tradeLicense1Exp\" placeholder=\"DD/MM/YYYY\"\r\n                                formControlName=\"tradeLicenseExpiration\" (change)=\"checkValidationTrade()\">\r\n                              <i class=\"fa fa-calendar\"></i>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-sm-2\">\r\n\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <div class=\"col-sm-12\">\r\n                        <hr class=\"hr-blue\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </ng-container>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-6\">\r\n              <input type=\"button\" [disabled]=\"tradeStatusCheck\" class=\"btn btn-azure shiny btn-block\"\r\n                value=\"+ Add Another Trade License\" id=\"add-more\" (click)=\"addFieldValue()\">\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <input type=\"button\" [disabled]=\"tradeStatusCheck\" class=\"btn btn-azure shiny btn-block\" value=\"+Submit\"\r\n                id=\"add-more\" data-dismiss=\"modal\" (click)=\"addTradeLicense()\">\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div><!-- /.modal-content -->\r\n  </div><!-- /.modal-dialog -->\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/proz-profile/proz-profile-service-areas/proz-profile-service-areas.component.ts":
/*!*************************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile-service-areas/proz-profile-service-areas.component.ts ***!
  \*************************************************************************************************/
/*! exports provided: ProzProfileServiceAreasComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProzProfileServiceAreasComponent", function() { return ProzProfileServiceAreasComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _global_global__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/global */ "./src/global/global.ts");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm5/ngx-toastr.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _utilities_beyond__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../utilities/beyond */ "./src/utilities/beyond.ts");
/* harmony import */ var _utilities_multipleselectservice__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../utilities/multipleselectservice */ "./src/utilities/multipleselectservice.ts");
/* harmony import */ var _utilities_customValidators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../utilities/customValidators */ "./src/utilities/customValidators.ts");
/* harmony import */ var _utilities_geocode_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../utilities/geocode.service */ "./src/utilities/geocode.service.ts");
/* harmony import */ var ngx_spinner__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ngx-spinner */ "./node_modules/ngx-spinner/fesm5/ngx-spinner.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var leaflet_dist_images_marker_shadow_png__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! leaflet/dist/images/marker-shadow.png */ "./node_modules/leaflet/dist/images/marker-shadow.png");
/* harmony import */ var leaflet_dist_images_marker_shadow_png__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(leaflet_dist_images_marker_shadow_png__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var ng2_completer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ng2-completer */ "./node_modules/ng2-completer/esm5/ng2-completer.js");
/* harmony import */ var ng4_auto_complete__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ng4-auto-complete */ "./node_modules/ng4-auto-complete/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! leaflet */ "./node_modules/leaflet/dist/leaflet-src.js");
/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_17__);










// import { } from 'googlemaps';









var ProzProfileServiceAreasComponent = /** @class */ (function () {
    function ProzProfileServiceAreasComponent(autoCompleteService, beyond, router, formBuilder, activatedRoute, http, HttP, ngZone, toastr, multipleselectservice, geocoding, spinner, location, detectBack, completerService, ref) {
        this.autoCompleteService = autoCompleteService;
        this.beyond = beyond;
        this.router = router;
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.http = http;
        this.HttP = HttP;
        this.ngZone = ngZone;
        this.toastr = toastr;
        this.multipleselectservice = multipleselectservice;
        this.geocoding = geocoding;
        this.spinner = spinner;
        this.location = location;
        this.detectBack = detectBack;
        this.completerService = completerService;
        this.ref = ref;
        this.selectedArr = [];
        this.selectedLayers = [];
        this.countyStatus = false;
        this.counties = [];
        this.countyList = [];
        this.totalLeadCost = 0;
        this.selectAll = true;
        this.showZipcode = true;
        this.showMap = false;
        this.selectAllCategories = false;
        this.noSubCategory = false;
        this.modeOfExecutionUpdate = false;
        this.modeOfExecutionInsert = true;
        this.selectAllZipcodesVar = true;
        this.serviceAreasAlias = [];
        this.zipcodes = [];
        this.prozServiceAreaData = [];
        this.serviceCostData = [];
        this.categoryDet = [];
        this.Feedata = [];
        this.masterServiceFeeDetails = [];
        this.selected = {};
        this.prozInDetail = {
            firstName: '',
            lastName: '',
            emailId: '',
            mobileNumber: '',
            smsMobile: '',
        };
        this.deletezipcode = {};
        this.houseHoldsCount = 0;
        this.discount = 0;
        this.monthly = 0;
        this.monthlyFee = 0;
        this.quaterly = 0;
        this.yearly = 0;
        this.monthlyFix = 0;
        this.percentage = 0;
        this.quaterlyDiscountRate = 0;
        this.quaterlyDiscount = 0;
        this.yearlyDiscountRate = 0;
        this.yearlyDiscount = 0;
        this.fixedHouseHolds = 0;
        this.totalHouseHolds = 0;
        this.totalServiceCost = 0;
        this.fromHouseHoldsCount = 0;
        this.toHouseHoldsCount = 0;
        this.zipcode = 0;
        this.totalNumberOfHouses = 0;
        this.alternateHouseHolds = 0;
        this.prozArrayExists = false;
        this.zipcodeValidation = false;
        this.zipcodeValidationEmpty = false;
        this.saveAndContinueStatus = true;
        this.dataServiceCategory = false;
        this.disableButton = true;
        this.tradeLicenseDeleteObj = {
            categoryCode: '',
            index: 0
        };
        //MOCK
        this.openPlus = true;
        this.closePlus = false;
        this.tradeStatusCheck = false;
        this.subCategoriesList = [];
        this.displayZipcodes = [];
        this.countyCategory = [];
        this.countySubCategory = [];
        this.countyStore = [];
        this.statesData = [];
        this.categoriesData = [];
        //MOCK
        this.typeOfSubscription = "perLead";
        this.countyNames = [];
        //---TO LOAD COUNTY BORDERS
        this.streetMaps = Object(leaflet__WEBPACK_IMPORTED_MODULE_17__["tileLayer"])('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            detectRetina: true,
        });
        this.options = {
            layers: [this.streetMaps],
            zoom: 7,
            center: Object(leaflet__WEBPACK_IMPORTED_MODULE_17__["latLng"])([46.879966, -121.726909])
        };
        //---TO LOAD COUNTY BORDERS
        this.wMaps = Object(leaflet__WEBPACK_IMPORTED_MODULE_17__["tileLayer"])('http://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png', {
            detectRetina: true,
        });
        this.spinner.show();
        this.addTradeLicenseList = this.formBuilder.group({
            tradeLicense: this.formBuilder.array([])
        });
        this.beyond.beyondAdmin();
        this.prozDetails(this.activatedRoute.snapshot.params['prozId']);
        this.prozLocation(this.activatedRoute.snapshot.params['prozId']);
        this.countyCount(this.activatedRoute.snapshot.params['prozId']);
        this.listCategories();
        this.serviceCostDetails();
        this.serviceFeeDiscounts();
        this.getListOfStates();
        this.getListOfCategories();
        this.countyNamesDetails();
        this.selectAllZipcodes(this.selectAllZipcodesVar);
        this.viewPro(this.activatedRoute.snapshot.params['prozId']);
    }
    // Loads Geojson data on map function
    ProzProfileServiceAreasComponent.prototype.onMapReady = function (map, key) {
        var _this = this;
        this.spinner.show();
        this.mapReg = map;
        // this.showMap=true
        this.HttP.get("assets/geolocations.json").subscribe(function (json) {
            console.log(json);
            json.features.map(function (val) {
                val.checked = false;
            });
            _this.json = json;
            var myStyle = {
                "color": "blue",
                "fillColor": ' rgb(242,239,233)',
                "weight": 0.5,
                "fillOpacity": 0.05,
                "opacity": 1,
            };
            // this.countyStore.forEach((a)=>{
            leaflet__WEBPACK_IMPORTED_MODULE_17__["geoJSON"](_this.json, {
                style: myStyle,
                onEachFeature: function (feature, layer) {
                    // popup content
                    //TASK#468-fixed
                    var popupContent = '<p>' + feature.properties.NAME + '</p>';
                    // pop content ends here
                    //Open data in Popup on Map
                    layer.bindPopup(popupContent);
                    // Open data in Popoup on map ends
                    // Click event on Map
                    //console.log(this.countyStore.length)
                    var name = feature.properties.NAME.toUpperCase();
                    _this.countyStore.forEach(function (a) {
                        if (a.county == name && a.stateCode == feature.properties.STATE) {
                            //console.log(a)
                            feature['checked'] = true;
                            var style = {
                                fillColor: 'yellow',
                                fillOpacity: 0.5,
                                weight: 0.2,
                                opacity: 0.8,
                            };
                            var highlight = {
                                'fillColor': 'green',
                                'weight': 0.2,
                                'opacity': 1
                            };
                            layer['setStyle'](style);
                            layer['setStyle'](highlight);
                        }
                    });
                    layer.on('mouseover', function () {
                        if (feature['checked'] == true) {
                        }
                        else {
                            var style = {
                                fillColor: 'orange',
                                fillOpacity: 0.5,
                                weight: 0.2,
                                opacity: 0.8,
                            };
                            layer['setStyle'](style);
                        }
                        layer.openPopup();
                    });
                    layer.on('mouseout', function () {
                        if (feature['checked'] == true) {
                        }
                        else {
                            var style = {
                                "color": "blue",
                                "fillColor": ' rgb(242,239,233)',
                                "weight": 0.5,
                                "fillOpacity": 0.05,
                                "opacity": 1,
                            };
                            layer['setStyle'](style);
                        }
                    });
                    layer.on({
                        'click': function (e) {
                            var name = feature.properties.NAME.toUpperCase();
                            _this.featuresSelected = feature.properties.NAME;
                            //console.log(feature)
                            if (feature['checked'] == true) {
                                e.target.closePopup();
                                feature['checked'] = false;
                                var style = {
                                    fillColor: ' rgb(242,239,233)',
                                    fillOpacity: 0.05,
                                    weight: 0.2,
                                    opacity: 1,
                                };
                                layer.bindPopup['true'];
                                var val = _this.featuresSelected.toUpperCase();
                                _this.delteCountyOnMap(_this.featuresSelected.toUpperCase());
                                layer['setStyle'](style);
                                layer['setStyle'](highlight);
                            }
                            else if (feature['checked'] == false) {
                                //console.log(layer)
                                //console.log(feature)
                                feature['checked'] = true;
                                var style = {
                                    fillColor: 'green',
                                    fillOpacity: 0.5,
                                    weight: 0.2,
                                    opacity: 1,
                                };
                                var highlight = {
                                    'fillColor': 'green',
                                    'weight': 0.2,
                                    'opacity': 1
                                };
                                _this.featuresSelected = feature.properties.NAME;
                                layer['setStyle'](style);
                                layer['setStyle'](highlight);
                                _this.getCountyManualy(_this.featureSelected, feature.properties.STATE);
                                console.log(feature.properties.STATE);
                                _this.getZipcodesFromCountyCounty(_this.featuresSelected, feature.properties.STATE);
                            }
                        }
                    });
                    // Click event on Map ends here
                },
            }).addTo(map);
            if (_this.prozLocationFetch[0].longitude == 0 || _this.prozLocationFetch[0].latitude == 0) {
            }
            else {
                leaflet__WEBPACK_IMPORTED_MODULE_17__["marker"]([_this.prozLocationFetch[0].latitude, _this.prozLocationFetch[0].longitude]).addTo(map);
                map.setView([_this.prozLocationFetch[0].latitude, _this.prozLocationFetch[0].longitude], 7);
            }
            _this.spinner.hide();
            // })
        });
    };
    // foreach feature for  map events
    ProzProfileServiceAreasComponent.prototype.forEachFeature = function (feature, layer) {
        // popup content
        var popupContent = '<h4>NAME: ' + feature.properties.NAME + '</h4><b>COUNTY: ' + feature.properties.COUNTY + '</b>';
        // pop content ends here
        //Open data in Popup on Map
        layer.bindPopup(popupContent);
        // Open data in Popoup on map ends
        // Click event on Map
        // layer.on({
        //   'click':  (e) =>{
        //     if (feature.checked == true) {
        //       e.target.closePopup();
        //       feature.checked = false
        //       var style = {
        //         fillColor: ' rgb(51, 136, 255)',
        //         fillOpacity: 0.2,
        //       weight: 2,
        //       opacity: 1,
        //       dashArray: '3'
        //       }
        //       layer.bindPopup.true;
        //       this.featuresSelected = feature.properties.NAME;
        //       layer.setStyle(style);
        //        layer.setStyle(highlight);  //highlights selected.
        //     } else if (feature.checked == false) {
        //       feature.checked = true
        //       var style={
        //         fillColor: 'yellow',
        //       fillOpacity: 0.5,
        //       weight: 2,
        //       opacity: 1,
        //       dashArray: '3'
        //       }
        //       var highlight = {
        //         'fillColor': 'green',
        //         'weight': 2,
        //         'opacity': 1
        //       };
        //       this.featuresSelected = feature.properties.NAME;
        //       layer.setStyle(style);
        //       layer.setStyle(highlight);
        //     }
        //     this.getcountyNames(this.featureSelected)
        //   }
        // });
        // Click event on Map ends here
    };
    ProzProfileServiceAreasComponent.prototype.getcountyNames = function (featuresSelected) {
    };
    // foreach feature for  map events ends here
    // map static
    // MANUAL ENTERY OF COUNTY
    ProzProfileServiceAreasComponent.prototype.getCountyManualy = function (featuresSelected, stateCode) {
        var _this = this;
        this.spinner.show();
        this.ngZone.run(function () {
            var categoryName = [];
            for (var i = 0; i < _this.prozLocationFetch[0].tradeLicense.split(',').length; i++) {
                var subCategoryListAlias = _this.subCategoriesList;
                var subCategoriesList = subCategoryListAlias.filter(function (value) { return value.cat_code === _this.prozLocationFetch[0].tradeLicense.split(',')[i]; });
                var catObj = {
                    serviceName: subCategoriesList[0].serviceCategoryName,
                    serviceCode: subCategoriesList[0].cat_code,
                    serviceCategories: [],
                    checkedNewLead: false
                };
                subCategoriesList.forEach(function (e) {
                    catObj.serviceCategories.push({
                        baseHousehold: e.baseHousehold,
                        cat_code: e.cat_code,
                        categoryName: e.categoryName,
                        checked: e.checked,
                        checkedNew: e.checkedNew,
                        checkedNewLead: e.checkedNewLead,
                        createdBy: e.createdBy,
                        createdOn: e.createdOn,
                        estimatedCost: e.estimatedCost,
                        id: e.id,
                        modifiedBy: e.modifiedBy,
                        modifiedOn: e.modifiedOn,
                        monthlyFee: e.monthlyFee,
                        perLead: e.perLead,
                        perLeadCost: e.perLeadCost,
                        prozId: e.prozId,
                        qDiscount: e.qDiscount,
                        quaterlyFee: e.quaterlyFee,
                        serviceCategoryName: e.serviceCategoryName,
                        serviceSubCategoryName: e.serviceSubCategoryName,
                        status: e.status,
                        subcat_code: e.subcat_code,
                        subcategoryDescription: e.subcategoryDescription,
                        subcategoryName: e.subcategoryName,
                        subscriptionType: e.subscriptionType,
                        yDiscount: e.yDiscount,
                        yearlyFee: e.yearlyFee,
                    });
                });
                categoryName.push(catObj);
                if (i === _this.prozLocationFetch[0].tradeLicense.split(',').length - 1) {
                    // this.countyList.push({
                    //   proCode: this.activatedRoute.snapshot.params['prozId'],
                    //   checked: false,
                    //   county: this.featuresSelected,
                    //   households: 0,
                    //   category: categoryName,
                    //   subCategoriesListMonthly: categoryName,
                    //   subCategoriesListPerLead: categoryName,
                    //   totalEstimatedCost: 0
                    // })
                    var countyObj = {
                        county: _this.featuresSelected
                    };
                    _this.getZipcodesFromCountyData(countyObj, stateCode, 'ts');
                    //this.applyChange('manual')
                    categoryName = [];
                }
            }
            //localStorage.setItem('proServiceAreas', JSON.stringify(this.countyList));
            //this.totalNumberOfHouses = parseInt(this.totalNumberOfHouses) + parseInt(response.response[response.response.length - 1][2])
        });
    };
    // MANUAL ENTERY OF COUNTY
    ProzProfileServiceAreasComponent.prototype.countyNamesDetails = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getCountyNames', options)
            .subscribe(function (data) {
            _this.countyNamesData = data.json();
            _this.zipcodeCountiesData = _this.countyNamesData.response;
            for (var i = 0; i < _this.zipcodeCountiesData.length; i++) {
                _this.countyNames.push({
                    "countyName": _this.zipcodeCountiesData[i].county,
                });
                if (i == _this.zipcodeCountiesData.length - 1) {
                    _this.dataServices = _this.completerService.local(_this.countyNames, 'countyName', 'countyName');
                    _this.dataServiceCategory = true;
                }
            }
        }, function (error) {
            _this.toastr.warning('Unable to Connect to Server');
        });
    };
    ProzProfileServiceAreasComponent.prototype.getStarted = function (x) {
        this.dataServices['_data'].forEach(function (e) {
        });
    };
    //PROZ DETAILS
    ProzProfileServiceAreasComponent.prototype.prozDetails = function (prozId) {
        var _this = this;
        this.spinner.show();
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getProzDetails/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozInDetail.firstName = response.response[0].firstName;
                _this.prozInDetail.lastName = response.response[0].lastName;
                _this.prozInDetail.mobileNumber = response.response[0].mobileNumber;
                _this.prozInDetail.emailId = response.response[0].emailId;
                _this.prozInDetail.smsMobile = response.response[0].smsMobile;
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to Connect to server");
        });
    };
    //PROZ DETAILS
    //FETCH PROZ LOCATION
    ProzProfileServiceAreasComponent.prototype.prozLocation = function (prozId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getProzLocation/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozLocationFetch = response.response;
                var addressMixed = _this.prozLocationFetch[0].businessAddressLine1 + "," + _this.prozLocationFetch[0].city + "," + _this.prozLocationFetch[0].zipCode;
                _this.geocoding.getLatLongViaZipcode(addressMixed)
                    .subscribe(function (address) {
                    var coordObj = {
                        lat: address.lat,
                        lng: address.lng,
                    };
                    // google.maps.event.addDomListener(window, 'load', this.initializeZipMap(coordObj));
                });
                _this.categoryProz(response.response[0].tradeLicense);
                return false;
            }
            else {
                _this.toastr.warning("No Records Found");
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //FETCH PROZ LOCATION 
    //TEMPORARY TIM STORAGE OF COUNTIES
    ProzProfileServiceAreasComponent.prototype.temporaryStorage = function () {
        var _this = this;
        this.totalNumberOfHouses = 0;
        if (JSON.parse(localStorage.getItem('proServiceAreas')) == null || JSON.parse(localStorage.getItem('proServiceAreas')) == '') {
            this.countyStatus = false;
        }
        else {
            this.ngZone.run(function () {
                _this.countyList = JSON.parse(localStorage.getItem('proServiceAreas'));
            });
            this.countyList.forEach(function (e) {
                _this.selected[e.county] = (!_this.selected[e.county]) ? true : false;
                _this.counties.push(e.county);
                _this.totalNumberOfHouses = parseInt(_this.totalNumberOfHouses) + parseInt(e.households);
                //LOAD LAYER
                _this.layerSet.set("styles", [{
                        where: "'name' IN('" + _this.counties.join("','") + "')",
                        polygonOptions: {
                            fillColor: "#00FF00"
                        }
                    }]);
                //LOAD LAYER
            });
            this.countyStatus = true;
        }
    };
    //TEMPORARY TIM STORAGE OF COUNTIES
    //CATEGORIES PROZ
    ProzProfileServiceAreasComponent.prototype.categoryProz = function (categoryCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        var catCodeObj = {
            catCodes: categoryCode
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/subCategoryFromCategoryCounty', catCodeObj, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.subCategoriesList = response.response;
                console.log(_this.subCategoriesList);
                _this.subCategoriesList.forEach(function (e, i) {
                    e.prozId = _this.activatedRoute.snapshot.params['prozId'];
                    e.categoryName = categoryCode;
                    e.checked = false;
                    e.checkedNew = false;
                    e.checkedNewLead = false;
                    e.allowCheck = true;
                    e.estimatedCost = 0;
                    e.perLeadCost = 'NA';
                    e.subscriptionType = 'PerLead';
                    e.allowCatCheck = true;
                    if (i == _this.subCategoriesList.length - 1) {
                        _this.getFee(categoryCode);
                    }
                });
            }
            else {
                _this.noSubCategory = true;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //CATEGORIES PROZ
    ProzProfileServiceAreasComponent.prototype.getFee = function (catCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        var catCodeObj = {
            catCodes: catCode
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/subCategoryFromPerLeadFee', catCodeObj, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.Feedata = response.response;
                _this.subCategoriesList.forEach(function (e, i) {
                    _this.Feedata.forEach(function (f) {
                        console.log(f);
                        console.log(e);
                        if (e.cat_code == f.cat_code) {
                            if (e.subcat_code == f.subcat_code) {
                                e.allowCatCheck = false;
                                e.allowCheck = false;
                                e.perLeadCost = 0;
                                e.perLead = f.perLead;
                                e.baseHousehold = 0;
                            }
                        }
                    });
                    if (i == _this.subCategoriesList.length - 1) {
                        console.log(_this.subCategoriesList);
                        _this.getCountiesList(_this.activatedRoute.snapshot.params['prozId']);
                    }
                });
            }
            else {
                console.log('no data');
                _this.noSubCategory = true;
                _this.subCategoriesList.forEach(function (e) {
                    e.perLeadCost = 'NA';
                    e.allowCheck = true;
                    e.allowCatCheck = true;
                    e.baseHousehold = 0;
                });
                console.log(_this.subCategoriesList);
                _this.getCountiesList(_this.activatedRoute.snapshot.params['prozId']);
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //VIEW PROZ PROFILE
    ProzProfileServiceAreasComponent.prototype.viewProzDetails = function (prozCode) {
        var _this = this;
        this.totalServiceCost = 0;
        this.totalNumberOfHouses = 0;
        this.alternateHouseHolds = 0;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getProzServiceArea/' + prozCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                var countyList = response.response;
                countyList.forEach(function (e) {
                    e.checked = true;
                    _this.selected[e.county] = (!_this.selected[e.county]) ? true : false;
                    _this.counties.push(e.county);
                    e.households = e.totalHouseHolds;
                    _this.totalNumberOfHouses = _this.totalNumberOfHouses + parseInt(e.totalHouseHolds);
                    e.totalEstimatedCost = 0;
                    //LOAD LAYER
                    _this.layerSet.set("styles", [{
                            where: "'name' IN('" + _this.counties.join("','") + "')",
                            polygonOptions: {
                                fillColor: "#00FF00"
                            }
                        }]);
                    //LOAD LAYER
                    _this.countyList.push({
                        checked: e.checked,
                        households: e.households,
                        county: e.county,
                    });
                });
                _this.countyStatus = true;
                _this.prozArrayExists = true;
                return false;
            }
            else {
                _this.prozArrayExists = false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to Connect to server");
        });
    };
    //VIEW PROZ PROFILE
    // //GOOGLE MAP INITIALISATION
    // initializeZipMap(coordinates) {
    //   this.infoWindowSet = new google.maps.InfoWindow();
    //   var isMobile = (navigator.userAgent.toLowerCase().indexOf('android') > -1) ||
    //     (navigator.userAgent.match(/(iPod|iPhone|iPad|BlackBerry|Windows Phone|iemobile)/));
    //   if (isMobile) {
    //     var viewport = document.querySelector("meta[name=viewport]");
    //     viewport.setAttribute('content', 'initial-scale=1.0, user-scalable=no');
    //   }
    //   var mapDiv = document.getElementById('google_map');
    //   mapDiv.style.width = isMobile ? '100%' : '100%';
    //   mapDiv.style.height = isMobile ? '100%' : '400px';
    //   this.mapSet = new google.maps.Map(mapDiv, {
    //     center: new google.maps.LatLng(parseFloat(coordinates.lat), parseFloat(coordinates.lng)),
    //     zoom: 8,
    //     mapTypeId: google.maps.MapTypeId['ROADMAP']
    //   });
    //   var marker = new google.maps.Marker({
    //     position: { lat: parseFloat(coordinates.lat), lng: parseFloat(coordinates.lng) },
    //     map: this.mapSet,
    //   });
    //   this.mapSet.controls[google.maps.ControlPosition['RIGHT_BOTTOM']].push(document.getElementById('googft-legend-open'));
    //   this.mapSet.controls[google.maps.ControlPosition['RIGHT_BOTTOM']].push(document.getElementById('googft-legend'));
    //   this.layerSet = new google.maps.FusionTablesLayer({
    //     map: this.mapSet,
    //     heatmap: { enabled: false },
    //     query: {
    //       select: "col13",
    //       from: "1I9tW-TTrYj-84uoRfdBcFwgcJOsmnguq1Y_Hevkd",
    //       where: ""
    //     },
    //     options: {
    //       styleId: 2,
    //       templateId: 2
    //     }
    //   });
    //   if (isMobile) {
    //     var legend = document.getElementById('googft-legend');
    //     var legendOpenButton = document.getElementById('googft-legend-open');
    //     var legendCloseButton = document.getElementById('googft-legend-close');
    //     legend.style.display = 'none';
    //     legendOpenButton.style.display = 'block';
    //     legendCloseButton.style.display = 'block';
    //     legendOpenButton.onclick = function () {
    //       legend.style.display = 'block';
    //       legendOpenButton.style.display = 'none';
    //     }
    //     legendCloseButton.onclick = function () {
    //       legend.style.display = 'none';
    //       legendOpenButton.style.display = 'block';
    //     }
    //   }
    //   this.layerSet.set("styles", [{
    //     where: "'name' IN('" + this.counties.join("','") + "')",
    //     polygonOptions: {
    //       fillColor: "#00FF00"
    //     }
    //   }]);
    //   google.maps.event.addListener(this.layerSet, 'click', (e) => {
    //     var val = e.row['name'].value
    //     this.selected[val] = (!this.selected[val]) ? true : false;
    //     for (var k in this.selected) {
    //       if (this.selected[k] == true) {
    //         if (this.counties.includes(k) == false) {
    //           this.counties.push(k)
    //           this.getHouseHoldsViaCounty(e, this.counties, k)
    //           return false;
    //         }
    //       } else {
    //         this.ruinCountyLayer(k)
    //       }
    //     }
    //   })
    //   // //CLICK EVENT ON THE LAYER
    //   //SHOW TIM LAYER
    //   //this.temporaryStorage()
    //   //SHOW TIM LAYER
    // }
    // //GOOGLE MAP INITIALISATION
    //UNIQUE ARRAY
    ProzProfileServiceAreasComponent.prototype.removeDuplicateUsingFilter = function (arr) {
        arr.filter(function (item, pos) {
            return arr.indexOf(item) == pos;
        });
    };
    //UNIQUE ARRAY
    //API FOR HOUSEHOLDS VIA COUNTY
    ProzProfileServiceAreasComponent.prototype.getHouseHoldsViaCounty = function (e, counties, county) {
        var _this = this;
        //SET COUNTY LAYER
        this.layerSet.set("styles", [{
                where: "'name' IN('" + counties.join("','") + "')",
                polygonOptions: {
                    fillColor: "#00FF00"
                }
            }]);
        //SET COUNTY LAYER
        // var headers = new Headers();
        // headers.append("Accept", 'application/json');
        // headers.append('Content-Type', 'application/json');
        // let options = new RequestOptions({ headers: headers });
        // this.http.get(Global.url + '/householdsCounty/' + e.row['COUNTY num'].value + '/' + e.row['STATE num'].value, options)
        //   .subscribe(data => {
        //     var response = data.json();
        //     if (response.status == 200) {
        // this.getZipcodesFromCountyCounty(county)
        this.ngZone.run(function () {
            _this.infoWindowSet.setContent(e.infoWindowHtml = '<div><b>County</b><p>' + e.row['name'].value + '</p></div>');
            _this.infoWindowSet.setPosition(e.latLng);
            _this.infoWindowSet.open(_this.mapSet);
            _this.countyStatus = true;
            var categoryName = [];
            for (var i = 0; i < _this.prozLocationFetch[0].tradeLicense.split(',').length; i++) {
                var subCategoryListAlias = _this.subCategoriesList;
                var subCategoriesList = subCategoryListAlias.filter(function (value) { return value.cat_code === _this.prozLocationFetch[0].tradeLicense.split(',')[i]; });
                var catObj = {
                    serviceName: subCategoriesList[0].serviceCategoryName,
                    serviceCode: subCategoriesList[0].cat_code,
                    serviceCategories: [],
                    checkedNewLead: false
                };
                subCategoriesList.forEach(function (e) {
                    catObj.serviceCategories.push({
                        baseHousehold: e.baseHousehold,
                        cat_code: e.cat_code,
                        categoryName: e.categoryName,
                        checked: e.checked,
                        checkedNew: e.checkedNew,
                        checkedNewLead: e.checkedNewLead,
                        createdBy: e.createdBy,
                        createdOn: e.createdOn,
                        estimatedCost: e.estimatedCost,
                        id: e.id,
                        modifiedBy: e.modifiedBy,
                        modifiedOn: e.modifiedOn,
                        monthlyFee: e.monthlyFee,
                        perLead: e.perLead,
                        perLeadCost: e.perLeadCost,
                        prozId: e.prozId,
                        qDiscount: e.qDiscount,
                        quaterlyFee: e.quaterlyFee,
                        serviceCategoryName: e.serviceCategoryName,
                        serviceSubCategoryName: e.serviceSubCategoryName,
                        status: e.status,
                        subcat_code: e.subcat_code,
                        subcategoryDescription: e.subcategoryDescription,
                        subcategoryName: e.subcategoryName,
                        subscriptionType: e.subscriptionType,
                        yDiscount: e.yDiscount,
                        yearlyFee: e.yearlyFee,
                    });
                });
                categoryName.push(catObj);
                if (i === _this.prozLocationFetch[0].tradeLicense.split(',').length - 1) {
                    _this.countyList.push({
                        proCode: _this.activatedRoute.snapshot.params['prozId'],
                        checked: false,
                        county: e.row['name'].value,
                        households: 0,
                        category: categoryName,
                        subCategoriesListMonthly: categoryName,
                        subCategoriesListPerLead: categoryName,
                        totalEstimatedCost: 0
                    });
                    var countyObj = {
                        county: e.row['name'].value
                    };
                    // this.getZipcodesFromCountyData(countyObj)
                    //  this.applyChange('manual')
                    categoryName = [];
                }
            }
            //localStorage.setItem('proServiceAreas', JSON.stringify(this.countyList));
            //this.totalNumberOfHouses = parseInt(this.totalNumberOfHouses) + parseInt(response.response[response.response.length - 1][2])
        });
        // } else {
        //   this.toastr.warning("Unable to Get Households")
        // }
        //})
    };
    //API FOR HOUSEHOLDS VIA COUNTY  
    //RUIN COUNTY LAYER
    ProzProfileServiceAreasComponent.prototype.ruinCountyLayer = function (county) {
        var _this = this;
        this.totalNumberOfHouses = 0;
        this.ngZone.run(function () {
            _this.counties = _this.counties.filter(function (value) { return value !== county; });
            _this.countyList = _this.countyList.filter(function (value) { return value.county !== county; });
            localStorage.setItem('proServiceAreas', JSON.stringify(_this.countyList));
            _this.countyList.forEach(function (e) {
                e.firstName = _this.prozInDetail.firstName;
                e.lastName = _this.prozInDetail.lastName;
                e.mobileNumber = _this.prozInDetail.mobileNumber;
                e.emailId = _this.prozInDetail.emailId;
                e.prozId = _this.activatedRoute.snapshot.params['prozId'];
                e.totalHouseHolds = e.households;
                _this.totalNumberOfHouses = parseInt(_this.totalNumberOfHouses) + parseInt(e.households);
            });
            _this.countyList.length == 0 ? _this.countyStatus = false : _this.countyStatus = true;
            _this.layerSet.set("styles", [{
                    where: "'name' IN('" + _this.counties.join("','") + "')",
                    polygonOptions: {
                        fillColor: "#00FF00"
                    }
                }]);
            _this.infoWindowSet.open(null);
            _this.deleteCountyAndPro({ county: county });
        });
    };
    //RUIN COUNTY LAYER
    //DELETE COUNTY
    ProzProfileServiceAreasComponent.prototype.deleteCounty = function (county) {
        var _this = this;
        // this.spinner.show()
        // var countyCheckboxValidator = this.countyList[0].subCategoriesListPerLead.filter(value => value.checkedNewLead === true)
        // if (countyCheckboxValidator.length === 0) {
        //   this.saveAndContinueStatus = true
        // }
        this.totalNumberOfHouses = 0;
        this.ngZone.run(function () {
            _this.countyList = _this.countyList.filter(function (value) { return value !== county; });
            localStorage.setItem('proServiceAreas', JSON.stringify(_this.countyList));
            _this.counties = _this.counties.filter(function (value) { return value !== county.county; });
            _this.countyStore = _this.countyStore.filter(function (value) { return value.county !== county.county; });
            //console.log(this.countyStore)
            _this.deleteZipcodes(county);
            _this.deleteCountyAndPro(county.county);
            _this.countyList.forEach(function (e) {
                e.firstName = _this.prozInDetail.firstName;
                e.lastName = _this.prozInDetail.lastName;
                e.mobileNumber = _this.prozInDetail.mobileNumber;
                e.emailId = _this.prozInDetail.emailId;
                e.prozId = _this.activatedRoute.snapshot.params['prozId'];
                e.totalHouseHolds = e.households;
                _this.totalNumberOfHouses = parseInt(_this.totalNumberOfHouses) + parseInt(e.households);
            });
            _this.countyList.length == 0 ? _this.countyStatus = false : _this.countyStatus = true;
            // this.layerSet.set("styles", [{
            //   where: "'name' IN('" + this.counties.join("','") + "')",
            //   polygonOptions: {
            //     fillColor: "#00FF00"
            //   }
            // }]);
        });
        // this.infoWindowSet.open(null);
        this.selected = {};
    };
    //DELETE COUNTY
    //DELETE PRO AND COUNTY
    ProzProfileServiceAreasComponent.prototype.deleteCountyAndPro = function (county) {
        var _this = this;
        var deleteCountyObj = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
            county: county,
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/deleteCountyPro', deleteCountyObj)
            .subscribe(function (data) {
            var response = data.json();
            // this.spinner.hide()
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //DELETE PRO AND COUNTY
    //DELETE ZIPCODES
    ProzProfileServiceAreasComponent.prototype.deleteZipcodes = function (county) {
        var _this = this;
        this.showMap = false;
        var deleteCountyObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            county: county.county,
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/deleteZipcodesCounties', deleteCountyObj)
            .subscribe(function (data) {
            var response = data.json();
            _this.streetMaps = Object(leaflet__WEBPACK_IMPORTED_MODULE_17__["tileLayer"])('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                detectRetina: true,
            });
            _this.options = {
                layers: [_this.streetMaps],
                zoom: 7,
                center: Object(leaflet__WEBPACK_IMPORTED_MODULE_17__["latLng"])([46.879966, -121.726909])
            };
            _this.showMap = true;
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //DELETE ZIPCODES
    //POPULATE COUNTY
    ProzProfileServiceAreasComponent.prototype.populateCounty = function () {
        var _this = this;
        var subCategoriesListCount = this.subCategoriesList.filter(function (value) { return value.checked == true; });
        if (this.countyList.length == 0) {
            // this.toastr.info('Select Counties Before Submission')
            return false;
        }
        if (subCategoriesListCount.length == 0) {
            this.toastr.info('Select Categories Before Submission');
            return false;
        }
        this.countyList = this.countyList.filter(function (value) { return value.checked == true; });
        this.countyList.forEach(function (element) {
            element.firstName = _this.prozInDetail.firstName;
            element.lastName = _this.prozInDetail.lastName;
            element.mobileNumber = _this.prozInDetail.mobileNumber;
            element.emailId = _this.prozInDetail.emailId;
            element.prozId = _this.activatedRoute.snapshot.params['prozId'];
            element.totalHouseHolds = element.households;
        });
        var countyObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            countyList: this.countyList
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/populateCounties', countyObj)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                _this.populateCategories();
            }
            else {
                _this.toastr.warning('Unable to connect to server');
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //POPULATE COUNTY
    //POPULATE CATEGORIES
    ProzProfileServiceAreasComponent.prototype.populateCategories = function () {
        var _this = this;
        this.subCategoriesList = this.subCategoriesList.filter(function (value) { return value.checked == true; });
        var subCategoryObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            subCategoriesList: this.subCategoriesList
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/populateCategories', subCategoryObj)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                //localStorage.setItem('proServiceAreas', null);
                _this.router.navigate(['/prozProfile/prozSubscriptionConfirmation', _this.activatedRoute.snapshot.params['prozId']]);
                return false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //POPULATE CATEGORIES
    //UPDATE EVERYTHING
    ProzProfileServiceAreasComponent.prototype.updateCounty = function () {
        var _this = this;
        var subCategoriesListCount = this.subCategoriesList.filter(function (value) { return value.checked == true; });
        if (this.countyList.length == 0) {
            //this.toastr.info('Select Counties Before Submission')
            return false;
        }
        if (subCategoriesListCount.length == 0) {
            this.toastr.info('Select Categories Before Submission');
            return false;
        }
        var proObj = {
            prozId: this.activatedRoute.snapshot.params['prozId']
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/updateCounty', proObj)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                _this.populateCounty();
                return false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //UPDATE EVERYTHING
    //BULK DELETE COUNTIES FROM DB
    ProzProfileServiceAreasComponent.prototype.bulkDeleteCounty = function (counties) {
        var _this = this;
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/bulkDeleteProProfile', counties)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.countyCount(_this.activatedRoute.snapshot.params['prozId']);
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //BULK DELETE COUNTIES FROM DB
    //SET LAYER
    ProzProfileServiceAreasComponent.prototype.setLayer = function (zipcodes, e) {
        var _this = this;
        this.layerSet.set("styles", [{
                where: "'ZIP' IN('" + zipcodes.join("','") + "')",
                polygonOptions: {
                    fillColor: "#00FF00"
                }
            }]);
        this.geocoding.getLatLongDetail(e.latLng)
            .subscribe(function (address) {
            if (_this.zipcode == '' || _this.zipcode == null) {
                _this.toastr.warning("No Zipcode available...");
                return false;
            }
            else {
                _this.getHouseHoldsViaZipcode(_this.zipcode, address, e);
            }
        });
    };
    //SET LAYER
    //API FOR HOUSEHOLDS VIA ZIPCODE
    ProzProfileServiceAreasComponent.prototype.getHouseHoldsViaZipcode = function (zipcode, address, e) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getHouseHolds/' + zipcode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.ngZone.run(function () {
                    _this.areas = address.city + ',' + address.state;
                    _this.totalHouseHolds = response.response[1][0];
                    _this.serviceAreasAlias.push({
                        areas: _this.areas,
                        houseHolds: _this.totalHouseHolds,
                        zipcode: e.row['ZIP'].value
                    });
                    _this.infoWindowSet.setContent(e.infoWindowHtml = '<div><b>Service Area</b><p>' + _this.areas + '</p> <b>Zip Code</b><p>' + e.row['ZIP'].value + '</p> <b>Households</b><p>' + _this.totalHouseHolds + '</p></div>');
                    _this.infoWindowSet.setPosition(e.latLng);
                    _this.infoWindowSet.open(_this.mapSet);
                });
            }
            else {
                _this.ngZone.run(function () {
                    _this.areas = _this.areas;
                    _this.totalHouseHolds = 0;
                    _this.serviceAreasAlias.push({
                        areas: _this.areas,
                        houseHolds: _this.totalHouseHolds,
                        zipcode: e.row['ZIP'].value
                    });
                    _this.infoWindowSet.setContent(e.infoWindowHtml = '<div><b>Service Area</b><p>' + _this.areas + '</p> <b>Zip Code</b><p>' + e.row['ZIP'].value + '</p> <b>Households</b><p>' + _this.totalHouseHolds + '</p></div>');
                    _this.infoWindowSet.setPosition(e.latLng);
                    _this.infoWindowSet.open(_this.mapSet);
                });
                _this.toastr.warning("Unable to Get Households");
            }
        });
    };
    //API FOR HOUSEHOLDS VIA ZIPCODE  
    //UNSELECTION CRITERIA
    ProzProfileServiceAreasComponent.prototype.unselectionCriteria = function (k) {
        var _this = this;
        if (this.prozServiceAreaData.length == 0) {
            this.zipcodeFiltering(k);
        }
        else {
            this.prozServiceAreaData.forEach(function (e) {
                if (e.zipcode == k) {
                    _this.zipcodes = _this.zipcodes.filter(function (value) { return value !== k; });
                    _this.deletezipcode['zipcode'] = k;
                    _this.infoWindowSet.open(null);
                    _this.removeHighlighted(_this.deletezipcode);
                    return false;
                }
                else {
                    _this.zipcodeFiltering(k);
                }
            });
        }
    };
    //UNSELECTION CRITERIA
    //ZIPCODES FILTERING
    ProzProfileServiceAreasComponent.prototype.zipcodeFiltering = function (k) {
        var zipcodeTemp = [];
        zipcodeTemp.push(k);
        this.zipcodes = this.zipcodes.filter(function (value) { return value !== k; });
        this.layerSet.set("styles", [{
                where: "'ZIP' IN('" + zipcodeTemp.join("','") + "')",
                polygonOptions: {
                    fillColor: ""
                }
            }]);
        this.layerSet.set("styles", [{
                where: "'ZIP' IN('" + this.zipcodes.join("','") + "')",
                polygonOptions: {
                    fillColor: "#00FF00"
                }
            }]);
    };
    //ZIPCODES FILTERING  
    //REMOVE HIGHLIGHTED
    ProzProfileServiceAreasComponent.prototype.removeHighlighted = function (item) {
        var zipcodeTemp = [];
        zipcodeTemp.push(item.zipcode);
        this.zipcodes = this.zipcodes.filter(function (value) { return value !== item.zipcode; });
        this.layerSet.set("styles", [{
                where: "'ZIP' IN('" + zipcodeTemp.join("','") + "')",
                polygonOptions: {
                    fillColor: ""
                }
            }]);
        this.layerSet.set("styles", [{
                where: "'ZIP' IN('" + this.zipcodes.join("','") + "')",
                polygonOptions: {
                    fillColor: "#00FF00"
                }
            }]);
        this.deleteChange(item);
    };
    //REMOVE HIGHLIGHTED   
    //ADD MORE AREAS
    ProzProfileServiceAreasComponent.prototype.addMoreAreas = function () {
        var _this = this;
        this.serviceAreasAlias.forEach(function (element) {
            if (_this.zipcodes.includes(element.zipcode) == true) {
                element.prozId = _this.activatedRoute.snapshot.params['prozId'];
                element.firstName = _this.prozInDetail.firstName;
                element.lastName = _this.prozInDetail.lastName;
                element.mobileNumber = _this.prozInDetail.mobileNumber;
                element.emailId = _this.prozInDetail.emailId;
                element.totalServiceCost = _this.totalServiceCost;
                element.totalHouseHolds = _this.totalNumberOfHouses;
                element.category = 'NA';
                element.subCategory = 'NA';
                element.subscriptionType = 'NA';
                element.estimatedCost = 0;
                element.serviceRadius = 0;
                element.noOfHouseholds = element.houseHolds;
                element.editMode = "PARENT";
            }
            else {
                return false;
            }
        });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/batchAreaService', this.serviceAreasAlias)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                _this.serviceAreasAlias = [];
                _this.viewProzDetails(_this.activatedRoute.snapshot.params['prozId']);
            }
            else {
                _this.toastr.warning('Unable to connect to server');
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //ADD MORE AREAS 
    //APPLY CHANGE
    ProzProfileServiceAreasComponent.prototype.applyChange = function (mode) {
        var _this = this;
        if (this.countyList.length == 0) {
            this.toastr.info('Select Counties Before Submission');
            return false;
        }
        else {
            this.countyList.forEach(function (data, index) {
                var validateSubmit = data.subCategoriesListPerLead.filter(function (val) { return val.checkedNewLead == true; });
                if (validateSubmit.length > 0) {
                    _this.disableButton = false;
                }
                else {
                    _this.disableButton = true;
                }
                if (index == _this.countyList.length - 1) {
                    if (_this.disableButton == false) {
                        _this.spinner.show();
                        var applyChangeObj = {
                            "prozId": _this.activatedRoute.snapshot.params['prozId'],
                            "firstName": _this.prozInDetail.firstName,
                            "lastName": _this.prozInDetail.lastName,
                            "mobileNumber": _this.prozInDetail.mobileNumber,
                            "emailId": _this.prozInDetail.emailId,
                            "smsMobile": _this.prozInDetail.smsMobile,
                            "serviceArea": 'NA',
                            "serviceRadius": '0',
                            "serviceOffered": 'NA',
                            "subServices": 'NA',
                            "paymentType": 'NA',
                            "noOfHouseholds": 'NA',
                            "serviceCost": 'NA',
                            "totalServiceCost": 0,
                            "totalHouseHolds": 0,
                            "houseHolds": 0,
                            "zipcode": 'NA'
                        };
                        if (mode === "button") {
                            // this.spinner.show()
                        }
                        _this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/addServiceArea', applyChangeObj)
                            .subscribe(function (data) {
                            var response = data.json();
                            if (response.status === 200) {
                                _this.spinner.hide();
                                _this.router.navigate(['/prozProfile/prozProfilePayment', _this.activatedRoute.snapshot.params['prozId']]);
                            }
                            else {
                                _this.toastr.warning('Unable to connect to server');
                            }
                        }, function (error) {
                            _this.toastr.warning('Unable to connect to server');
                        });
                    }
                    else {
                        _this.toastr.info('Please Select atleast one service to proceed');
                    }
                }
            });
        }
    };
    //APPLY CHANGE
    //DELETE CHANGE
    ProzProfileServiceAreasComponent.prototype.deleteChange = function (item) {
        var zipcodeTemp = [];
        zipcodeTemp.push(item.zipcode);
        this.zipcodes = this.zipcodes.filter(function (value) { return value !== item.zipcode; });
        this.layerSet.set("styles", [{
                where: "'ZIP' IN('" + zipcodeTemp.join("','") + "')",
                polygonOptions: {
                    fillColor: ""
                }
            }]);
        this.layerSet.set("styles", [{
                where: "'ZIP' IN('" + this.zipcodes.join("','") + "')",
                polygonOptions: {
                    fillColor: "#00FF00"
                }
            }]);
        this.batchServiceAreaDeleteChapter1(item);
    };
    //DELETE CHANGE 
    //BATCH SERVICE AREA DELETE CHAPTER 1
    ProzProfileServiceAreasComponent.prototype.batchServiceAreaDeleteChapter1 = function (item) {
        var _this = this;
        this.spinner.show();
        this.zipcodes = [];
        var prozDataObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            zipcode: item.zipcode
        };
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/batchServiceAreaDelete', prozDataObj, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozServiceAreaData = [];
                _this.selected = {};
                setTimeout(function () { _this.spinner.hide(); }, 1000);
                _this.viewProzDetails(_this.activatedRoute.snapshot.params['prozId']);
                return false;
            }
            else {
                _this.toastr.warning("Unable to delete specific record");
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //BATCH SERVICE AREA DELETE CHAPTER 1 
    //BATCH SERVICE AREA DELETE CHAPTER 2
    ProzProfileServiceAreasComponent.prototype.batchServiceAreaDelete = function (item) {
        var _this = this;
        this.zipcodes = [];
        var prozDataObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            zipcode: item.zipcode
        };
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/batchServiceAreaDelete', prozDataObj, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozServiceAreaData = [];
                _this.viewProzDetails(_this.activatedRoute.snapshot.params['prozId']);
                _this.prozLocation(_this.activatedRoute.snapshot.params['prozId']);
                return false;
            }
            else {
                _this.toastr.warning("Unable to delete specific record");
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //BATCH SERVICE AREA DELETE CHAPTER 2
    //DELETE SERVICE AREA
    ProzProfileServiceAreasComponent.prototype.deleteServiceArea = function (prozData) {
        var _this = this;
        this.zipcodes = [];
        var prozDataObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            id: prozData.id
        };
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/deleteProzProfileServiceAreas', prozDataObj, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.viewProzDetails(_this.activatedRoute.snapshot.params['prozId']);
                _this.prozLocation(_this.activatedRoute.snapshot.params['prozId']);
                return false;
            }
            else {
                _this.toastr.warning("Unable to delete specific record");
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //DELETE SERVICE AREA
    //OPEN COLLAPSE
    ProzProfileServiceAreasComponent.prototype.openCollapse = function (item) {
        item.openCollapse = false;
        item.closeCollapse = true;
    };
    //OPEN COLLAPSE
    //CLOSE COLLAPSE
    ProzProfileServiceAreasComponent.prototype.closeCollapse = function (item) {
        item.openCollapse = true;
        item.closeCollapse = false;
    };
    //CLOSE COLLAPSE   
    //CHANGE CATEGORY
    ProzProfileServiceAreasComponent.prototype.changeCategory = function (category) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/subcategories/' + category.category, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                category.subCategoryServices = response.response;
                _this.getCategoryName(category);
                return false;
            }
            else {
                _this.toastr.warning("No Records Found");
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //CHANGE CATEGORY
    //CATEGORY NAMES
    ProzProfileServiceAreasComponent.prototype.getCategoryName = function (catCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/categoryName/' + catCode.category, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                catCode.categoryName = response.response[0].categoryName;
                return false;
            }
            else {
                _this.toastr.warning("No Records Found");
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //CATEGORY NAMES
    //SUB CATEGORY
    ProzProfileServiceAreasComponent.prototype.onSubCatSelection = function (subCategory) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/subCategoryName/' + subCategory.subCategory, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                subCategory.subCategoryName = response.response[0].subcategoryName;
                return false;
            }
            else {
                _this.toastr.warning("No Records Found");
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //SUB CATEGORY
    // serviceCalculation(data){
    //   this.newServiceFeeDiscounts(data)
    // }
    //CALCULATIONS FOR COST
    ProzProfileServiceAreasComponent.prototype.paymentType = function (subscriptionType, type, countyData) {
        subscriptionType.totalNumberOfHouses = this.totalNumberOfHouses;
        if (type == 'Monthly') {
            this.houseHolds(subscriptionType.totalNumberOfHouses, type, subscriptionType, countyData);
        }
        else if (type == 'Quarterly') {
            this.houseHolds(subscriptionType.totalNumberOfHouses, type, subscriptionType, countyData);
        }
        else if (type == 'Yearly') {
            this.houseHolds(subscriptionType.totalNumberOfHouses, type, subscriptionType, countyData);
        }
        else if (type == 'PerLead') {
            this.houseHolds(subscriptionType.totalNumberOfHouses, type, subscriptionType, countyData);
        }
    };
    ProzProfileServiceAreasComponent.prototype.houseHolds = function (totalNumberOfHouses, type, item, countyData) {
        this.totalServiceCost = 0;
        var householdCount = this.totalNumberOfHouses / item.baseHousehold;
        if (type == "Monthly") {
            this.monthlyFee = item.monthlyFee * householdCount;
            item.estimatedCost = Math.round(this.monthlyFee);
            countyData.totalEstimatedCost = countyData.totalEstimatedCost + item.estimatedCost;
        }
        else if (type == "Quarterly") {
            item.estimatedCost = Math.round(item.quaterlyFee * householdCount);
        }
        else if (type == "Yearly") {
            item.estimatedCost = Math.round(item.yearlyFee * householdCount);
        }
        else if (type == "PerLead") {
            console.log(item);
            item.perLeadCost = Math.round(item.perLead);
            item.estimatedCost = item.perLeadCost;
        }
        // for (var j = 0; j < this.masterServiceFeeDetails.length; j++) {
        //   this.fromHouseHoldsCount = parseInt(this.masterServiceFeeDetails[j].fromHouseHolds)
        //   this.toHouseHoldsCount = parseInt(this.masterServiceFeeDetails[j].toHouseHolds)
        //   this.houseHoldsCount = parseInt(totalNumberOfHouses);
        //   this.quaterlyDiscountRate = 5 / 100;
        //   this.yearlyDiscountRate = 10 / 100;
        //   this.percentage = 100 / 100
        //   this.quaterlyDiscount = 3;
        //   this.yearlyDiscount = 12;
        //   this.fixedHouseHolds = 10000;
        //   if (this.houseHoldsCount == 0) {
        //     item.estimatedCost = 0
        //     return false;
        //   }
        //   if (this.houseHoldsCount <= 10000) {
        //     this.monthly = 50;
        //     this.quaterly = this.monthly * this.quaterlyDiscount * (this.percentage - this.quaterlyDiscountRate)
        //     this.yearly = this.monthly * (this.percentage - this.yearlyDiscountRate) * this.yearlyDiscount
        //     if (type == "Monthly") {
        //       item.estimatedCost = Math.round(this.monthly)
        //     
        //     } else if (type == "Quarterly") {
        //       item.estimatedCost = this.quaterly
        //      
        //     } else if (type == "Yearly") {
        //       item.estimatedCost = this.yearly
        //       
        //     }
        //   } else if (this.houseHoldsCount >= this.fromHouseHoldsCount && this.houseHoldsCount <= this.toHouseHoldsCount) {
        //     
        //     this.discount = parseFloat(this.masterServiceFeeDetails[j].discount);
        //    
        //     this.monthlyFix = 50;
        //     this.monthly = this.monthlyFix * (this.percentage - this.discount / 100) * (this.houseHoldsCount / this.fixedHouseHolds)
        //     if (type == "Monthly") {
        //       item.estimatedCost = Math.round(this.monthly)
        //     }
        //     this.quaterlyCalculations(this.monthly, type, item)
        //   } else {
        //   }
        // }
        for (var i = 0; i < this.subCategoriesList.length; i++) {
            this.totalServiceCost = this.totalServiceCost + parseInt(this.subCategoriesList[i].estimatedCost);
        }
    };
    ProzProfileServiceAreasComponent.prototype.quaterlyCalculations = function (monthly, type, item) {
        this.quaterlyDiscountRate = 5 / 100;
        this.yearlyDiscountRate = 10 / 100;
        this.percentage = 100 / 100;
        this.quaterlyDiscount = 3;
        this.yearlyDiscount = 12;
        this.quaterly = monthly * this.quaterlyDiscount * (this.percentage - this.quaterlyDiscountRate);
        this.yearly = monthly * (this.percentage - this.yearlyDiscountRate) * this.yearlyDiscount;
        if (type == "Quarterly") {
            item.estimatedCost = Math.round(this.quaterly);
        }
        else if (type == "Yearly") {
            item.estimatedCost = Math.round(this.yearly);
        }
    };
    //CALCULATIONS FOR COST
    //NEXT SCREEN
    ProzProfileServiceAreasComponent.prototype.nextScreen = function () {
        this.router.navigate(['/prozProfile/prozSubscriptionConfirmation', this.activatedRoute.snapshot.params['prozId']]);
    };
    //NEXT SCREEN
    //LIST CATEGORIES
    ProzProfileServiceAreasComponent.prototype.listCategories = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/categories', options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.categoryDet = response.response;
            }
            else {
                _this.toastr.warning("No Records Found");
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //LIST CATEGORIES
    //SERVICE COST DETAILS
    ProzProfileServiceAreasComponent.prototype.serviceCostDetails = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/serviceFeeDetails', options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.serviceCostData = response.response;
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //SERVICE COST DETAILS
    //PROFILE BACK
    ProzProfileServiceAreasComponent.prototype.prozProfileBack = function () {
        this.router.navigate(['/prozProfile/prozProfile', this.activatedRoute.snapshot.params['prozId']]);
    };
    //PROFILE BACK
    //SERVICE DISCOUNT FEE
    ProzProfileServiceAreasComponent.prototype.serviceFeeDiscounts = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/masterServiceFeeDetails', options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.masterServiceFeeDetails = response.response;
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //SERVICE DISCOUNT FEE 
    //COUNTY COUNT
    ProzProfileServiceAreasComponent.prototype.countyCount = function (prozId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getCountyCount/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                if (response.response.length > 0) {
                    _this.modeOfExecutionUpdate = true;
                    _this.modeOfExecutionInsert = false;
                }
                else {
                    _this.modeOfExecutionUpdate = false;
                    _this.modeOfExecutionInsert = true;
                }
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //COUNTY COUNT  
    //CATEGORIES SELECTION
    ProzProfileServiceAreasComponent.prototype.selectAllCategoriesCheck = function (x) {
        this.subCategoriesList.forEach(function (e) {
            e.checked = x;
        });
    };
    //CATEGORIES SELECTION
    //POPULATE CATEGORY API
    ProzProfileServiceAreasComponent.prototype.populateCategoryAPI = function (x) {
    };
    //POPULATE CATEGORY API
    //OPEN
    ProzProfileServiceAreasComponent.prototype.open = function () {
        this.openPlus = false;
        this.closePlus = true;
    };
    //OPEN
    //CLOSE
    ProzProfileServiceAreasComponent.prototype.close = function () {
        this.openPlus = true;
        this.closePlus = false;
    };
    //CLOSE  
    //SELECT ALL COUNTIES
    ProzProfileServiceAreasComponent.prototype.selectAllCounties = function (x) {
        this.countyList.forEach(function (e) {
            e.checked = x;
        });
    };
    //SELECT ALL COUNTIES
    //CLEAR MAP
    ProzProfileServiceAreasComponent.prototype.clearMap = function () {
        this.countyList = [];
        this.counties = [];
        this.selected = {};
        this.totalNumberOfHouses = 0;
        this.clearMapAPI();
        this.countyStore = [];
        this.showMap = false;
        this.totalLeadCost = 0;
        this.saveAndContinueStatus = true;
        localStorage.setItem('proServiceAreas', null);
    };
    //CLEAR MAP
    //CLEAR MAP API
    ProzProfileServiceAreasComponent.prototype.clearMapAPI = function () {
        var _this = this;
        var clearMapObj = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
        };
        this.spinner.show();
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/clearMapAPI', clearMapObj)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                _this.streetMaps = Object(leaflet__WEBPACK_IMPORTED_MODULE_17__["tileLayer"])('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    detectRetina: true,
                });
                _this.options = {
                    layers: [_this.streetMaps],
                    zoom: 7,
                    center: Object(leaflet__WEBPACK_IMPORTED_MODULE_17__["latLng"])([46.879966, -121.726909])
                };
                _this.showMap = true;
                //window.location.reload()
                _this.spinner.hide();
                _this.prozLocation(_this.activatedRoute.snapshot.params['prozId']);
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //CLEAR MAP API
    // Calling Service fee details 
    ProzProfileServiceAreasComponent.prototype.newServiceFeeDiscounts = function (item) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getServiceCostDetails/' + item.categoryName + '/' + item.subcategoryName, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.newServiceFeeDetails = response.response[0];
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    // Calling Service fee details 
    //CATEGORIES PROZ
    ProzProfileServiceAreasComponent.prototype.categoryProzGet = function (prozId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getProCategories/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                var subCategoriesListData = response.response;
                for (var i = 0; i < _this.subCategoriesList.length; i++) {
                    for (var j = 0; j < subCategoriesListData.length; j++) {
                        if (_this.subCategoriesList[i].serviceSubCategoryName === subCategoriesListData[j].subCategory) {
                            _this.subCategoriesList[i].checked = true;
                            _this.subCategoriesList[i].subscriptionType = subCategoriesListData[j].subscriptionType;
                            //this.paymentType(this.subCategoriesList[i], this.subCategoriesList[i].subscriptionType)
                        }
                    }
                }
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //CATEGORIES PROZ  
    //POPULATE COUNTY
    ProzProfileServiceAreasComponent.prototype.populateCountyBack = function () {
        var _this = this;
        this.countyList = this.countyList.filter(function (value) { return value.checked == true; });
        this.countyList.forEach(function (element) {
            element.firstName = _this.prozInDetail.firstName;
            element.lastName = _this.prozInDetail.lastName;
            element.mobileNumber = _this.prozInDetail.mobileNumber;
            element.emailId = _this.prozInDetail.emailId;
            element.prozId = _this.activatedRoute.snapshot.params['prozId'];
            element.totalHouseHolds = element.households;
        });
        var countyObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            countyList: this.countyList
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/populateCounties', countyObj)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                _this.populateCategoriesBack();
            }
            else {
                _this.toastr.warning('Unable to connect to server');
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //POPULATE COUNTY
    //POPULATE CATEGORIES
    ProzProfileServiceAreasComponent.prototype.populateCategoriesBack = function () {
        var _this = this;
        this.subCategoriesList = this.subCategoriesList.filter(function (value) { return value.checked == true; });
        var subCategoryObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            subCategoriesList: this.subCategoriesList
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/populateCategories', subCategoryObj)
            .subscribe(function (data) {
            var response = data.json();
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //POPULATE CATEGORIES
    //UPDATE EVERYTHING
    ProzProfileServiceAreasComponent.prototype.updateCountyBack = function () {
        var _this = this;
        var subCategoriesListCount = this.subCategoriesList.filter(function (value) { return value.checked == true; });
        var proObj = {
            prozId: this.activatedRoute.snapshot.params['prozId']
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/updateCounty', proObj)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                _this.populateCountyBack();
                return false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //UPDATE EVERYTHING
    //CHANGE CATEGORY SERVICE
    ProzProfileServiceAreasComponent.prototype.changeCategoryService = function (countyData, categoryData) {
        var _this = this;
        if (categoryData.checkedNew === true && this.typeOfSubscription == 'monthly' || categoryData.checkedNew === true && this.typeOfSubscription == 'perLead') {
            categoryData.serviceCategories.forEach(function (e) {
                e.checkedNew = categoryData.checkedNew;
                _this.paymentType(e, 'Monthly', countyData);
            });
        }
        else {
            categoryData.serviceCategories.forEach(function (e) {
                countyData.totalEstimatedCost = countyData.totalEstimatedCost - e.estimatedCost;
                e.estimatedCost = 0;
                e.checkedNew = categoryData.checkedNew;
            });
        }
    };
    //CHANGE CATEGORY SERVICE
    //CHANGE SUB CATEGORY SERVICE
    ProzProfileServiceAreasComponent.prototype.changeSubCategoryService = function (countyData, categoryData) {
        if (categoryData.checkedNew === true && this.typeOfSubscription == 'monthly' || categoryData.checkedNew === true && this.typeOfSubscription == 'perLead') {
            this.paymentType(categoryData, 'Monthly', countyData);
            this.totalLeadCost = this.totalLeadCost + categoryData.estimatedCost;
        }
        else {
            countyData.totalEstimatedCost = countyData.totalEstimatedCost - categoryData.estimatedCost;
            categoryData.estimatedCost = 0;
            this.totalLeadCost = this.totalLeadCost - categoryData.estimatedCost;
        }
    };
    //CHANGE SUB CATEGORY SERVICE
    //NEW CATEGORY MODIFIED VERSION
    ProzProfileServiceAreasComponent.prototype.newModifiedVersionCategory = function (data, countyData) {
        if (data.checkedNew == true && this.typeOfSubscription == 'monthly' || data.checkedNew == true && this.typeOfSubscription == 'perLead') {
            this.paymentType(data, 'Monthly', countyData);
        }
        else if (data.checkedNew == true && this.typeOfSubscription == 'perLead') {
            this.paymentType(data, 'PerLead', countyData);
        }
    };
    //NEW CATEGORY MODIFIED VERSION
    //CATEGORY TYPE
    ProzProfileServiceAreasComponent.prototype.toggleType = function (typeOfSubscription) {
        this.typeOfSubscription = typeOfSubscription;
    };
    //CATEGORY TYPE
    //SELECT ALL SUB CATEGORIES
    ProzProfileServiceAreasComponent.prototype.selectAllSubCategoryService = function (prozLocationFetch) {
        var _this = this;
        if (prozLocationFetch.checked === true) {
            prozLocationFetch.subCategoriesListMonthly.forEach(function (e) {
                e.checkedNew = prozLocationFetch.checked;
                _this.paymentType(e, e.subscriptionType, prozLocationFetch);
            });
        }
        else {
            prozLocationFetch.totalEstimatedCost = 0;
            prozLocationFetch.subCategoriesListMonthly.forEach(function (e) {
                e.checkedNew = prozLocationFetch.checked;
                e.estimatedCost = 0;
                prozLocationFetch.totalEstimatedCost = prozLocationFetch.totalEstimatedCost + e.estimatedCost;
            });
            this.totalServiceCost = this.totalServiceCost + prozLocationFetch.totalEstimatedCost;
        }
    };
    //SELECT ALL SUB CATEGORIES
    //COMING SOON
    ProzProfileServiceAreasComponent.prototype.comingSoon = function () {
        document.body.scrollTop = document.documentElement.scrollTop = 0;
        this.toastr.show('Add County Work Inprogress');
    };
    //COMING SOON
    //NEXT
    ProzProfileServiceAreasComponent.prototype.comingSoonNext = function () {
        this.toastr.info('Next is in Progress');
    };
    //NEXT
    //ADD CATEGORY
    ProzProfileServiceAreasComponent.prototype.comingSoonAddCategory = function () {
        this.toastr.info('Add Category In Progress');
    };
    //ADD CATEGORY  
    //GET ZIPCODES FROM COUNTY
    ProzProfileServiceAreasComponent.prototype.getZipcodesFromCountyCounty = function (data, stateCode) {
        var _this = this;
        console.log(stateCode);
        var countyData = data;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getZipcodeFromCounty/' + data + '/' + stateCode, options)
            .subscribe(function (data1) {
            var response = data1.json();
            if (response.status == 200) {
                var displayZipcodes = response.response;
                displayZipcodes.forEach(function (e) {
                    e.proCode = _this.activatedRoute.snapshot.params['prozId'];
                    e.checked = true;
                });
                ////console.log('call insert')
                _this.insertCountiesZipcodeBatchDirect(data, stateCode, displayZipcodes);
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET ZIPCODES FROM COUNTY
    //GET ZIPCODES FROM COUNTY
    ProzProfileServiceAreasComponent.prototype.getZipcodesFromCounty = function (data, stateCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getZipcodeFromCountyTable/' + data.county + '/' + stateCode + '/' + this.activatedRoute.snapshot.params['prozId'], options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                var displayZipcodes = response.response;
                for (var i = 0; i < displayZipcodes.length; i++) {
                    for (var j = 0; j < _this.displayZipcodes.length; j++) {
                        if (displayZipcodes[i].zipcode === _this.displayZipcodes[j].zipcode) {
                            _this.displayZipcodes[j].checked = true;
                            console.log('true');
                        }
                        if (i == displayZipcodes.length - 1) {
                            _this.showZipcode = true;
                        }
                    }
                }
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET ZIPCODES FROM COUNTY
    //GET ZIPCODES FROM COUNTY NON INSERT
    ProzProfileServiceAreasComponent.prototype.getZipcodesFromCountyData = function (data, stateCode, key) {
        var _this = this;
        console.log(data);
        if (key == 'view') {
            this.spinner.show();
            setTimeout(function () {
                /** spinner ends after 5 seconds */
                _this.spinner.hide();
            }, 2000);
        }
        this.displayZipcodes = [];
        this.showZipcode = false;
        var updateZipcodeHouses = false;
        var householdsZipcodes = 0;
        var county = data;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getZipcodeFromCounty/' + data.county + '/' + stateCode, options)
            .subscribe(function (data1) {
            var response = data1.json();
            if (response.status == 200) {
                _this.zipcodeValidationEmpty = false;
                _this.displayZipcodes = response.response;
                _this.displayZipcodes.forEach(function (e) {
                    e.proCode = _this.activatedRoute.snapshot.params['prozId'];
                    e.zipcode = e.zipCode;
                    e.checked = false;
                    householdsZipcodes = householdsZipcodes + parseInt(e.households);
                });
                _this.countyList.forEach(function (e) {
                    if (e.county === county.county) {
                        e.households = householdsZipcodes;
                    }
                });
                _this.getZipcodesFromCounty(county, stateCode);
                //this.getZipcodesHouseholds(this.displayZipcodes)
                // if(key=='ts'){
                //   this.insertCountiesZipcodeBatchDirect(data, this.displayZipcodes)
                // }else{
                // }
                return false;
            }
            else {
                _this.displayZipcodes = [];
                _this.zipcodeValidationEmpty = true;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET ZIPCODES FROM COUNTY NON INSERT
    //GET HOUSEHOLDS FOR ZIPCODES
    ProzProfileServiceAreasComponent.prototype.getZipcodesHouseholds = function (getHouseholdsZipcode) {
        var _this = this;
        getHouseholdsZipcode.forEach(function (e, i) {
            _this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getHouseHolds/' + e.zipcode)
                .subscribe(function (data) {
                var response = data.json();
                if (response.status === 200) {
                    e.households = response.response[1][0];
                }
                else {
                    e.households = 0;
                }
            }, function (error) {
                _this.toastr.warning('Unable to connect to server');
            });
            if (i === getHouseholdsZipcode.length - 1) {
                //this.updateZipcodeMaster(getHouseholdsZipcode)
            }
        });
    };
    //GET HOUSEHOLDS FOR ZIPCODES
    //UPDATE ZIPCODE MASTER
    ProzProfileServiceAreasComponent.prototype.updateZipcodeMaster = function (getHouseholdsZipcode) {
        var _this = this;
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/updateZipcodeMaster', getHouseholdsZipcode)
            .subscribe(function (data) {
            var response = data.json();
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //UPDATE ZIPCODE MASTER
    //SELECT ALL ZIPCODES
    ProzProfileServiceAreasComponent.prototype.selectAllZipcodes = function (selectAllZipcodesVar) {
        var _this = this;
        this.displayZipcodes.forEach(function (e, i) {
            e.checked = selectAllZipcodesVar;
            if (i === _this.displayZipcodes.length - 1) {
                var displayZipcodes = _this.displayZipcodes.filter(function (value) { return value.checked === true; });
                if (displayZipcodes.length === 0) {
                    _this.zipcodeValidation = true;
                }
                else {
                    _this.zipcodeValidation = false;
                }
            }
        });
    };
    //SELECT ALL ZIPCODES
    //INSERT COUNTIES BATCH
    ProzProfileServiceAreasComponent.prototype.insertCountiesBatch = function (mode) {
        var _this = this;
        var countiesObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            counties: this.countyList,
            subscriptionType: this.typeOfSubscription
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/countiesBatchInsert', countiesObj)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                // this.spinner.hide()
                if (mode === 'button') {
                    //this.insertCountyCategoryBatch(mode)
                    _this.spinner.hide();
                    _this.router.navigate(['/prozProfile/prozSubscriptionConfirmation', _this.activatedRoute.snapshot.params['prozId']]);
                }
                return false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //INSERT COUNTIES BATCH
    //INSERT COUNTIES ZIPCODE BATCH
    ProzProfileServiceAreasComponent.prototype.insertCountiesZipcodeBatch = function (county) {
        var _this = this;
        this.zipcodeValidation = false;
        var displayZipcodes = this.displayZipcodes.filter(function (value) { return value.checked == true; });
        if (displayZipcodes.length === 0) {
            this.zipcodeValidation = true;
            return false;
        }
        console.log(displayZipcodes[0].stateCode);
        var countiesZipcodeObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            county: county,
            stateCode: displayZipcodes[0].stateCode,
            zipcodes: displayZipcodes
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/countiesZipcodeBatchInsert', countiesZipcodeObj)
            .subscribe(function (data) {
            var response = data.json();
            // this.insertCountyCategoryBatch('button')
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //INSERT COUNTIES ZIPCODE BATCH
    //CLEAR ZIPS
    ProzProfileServiceAreasComponent.prototype.clearZips = function () {
        this.displayZipcodes = [];
    };
    //CLEAR ZIPS
    //INSERT COUNTIES ZIPCODE BATCH DIRECT
    ProzProfileServiceAreasComponent.prototype.insertCountiesZipcodeBatchDirect = function (county, stateCode, zipcodesData) {
        var _this = this;
        //console.log(this.activatedRoute.snapshot.params['prozId'])
        console.log(county);
        console.log(zipcodesData);
        console.log(this.displayZipcodes);
        // this.zipcodeValidation = false;
        //var displayZipcodes = this.displayZipcodes.filter(value => value.checked == true)
        // console.log(displayZipcodes)
        // if (displayZipcodes.length === 0) {
        //   this.zipcodeValidation = true;
        //   return false;
        // }
        //console.log(displayZipcodes)
        var countiesZipcodeObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            county: county,
            stateCode: stateCode,
            zipcodes: zipcodesData
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/countiesZipcodeBatchInsertDirect', countiesZipcodeObj)
            .subscribe(function (data) {
            var response = data.json();
            //console.log('succ'+response)
            //  this.getZipcodesFromCounty(county)
            _this.spinner.hide();
            _this.getCountiesList(countiesZipcodeObj.prozId);
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //INSERT COUNTIES ZIPCODE BATCH DIRECT
    //INSERT COUNTIES CATEGORIES BATCH
    ProzProfileServiceAreasComponent.prototype.insertCountyCategoryBatch = function (mode) {
        var _this = this;
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/countiesCategoryBatchInsert', this.countyList)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                _this.insertCountySubCategoryBatch(mode);
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //INSERT COUNTIES CATEGORIES BATCH
    //INSERT COUNTIES SUB CATEGORIES BATCH
    ProzProfileServiceAreasComponent.prototype.insertCountySubCategoryBatch = function (mode) {
        var _this = this;
        var subCategoryBatchObj = {
            subscriptionType: this.typeOfSubscription,
            countyList: this.countyList
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/countiesSubCategoryBatchInsert', subCategoryBatchObj)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                if (mode === "button") {
                    _this.spinner.hide();
                    _this.router.navigate(['/prozProfile/prozSubscriptionConfirmation', _this.activatedRoute.snapshot.params['prozId']]);
                    return false;
                }
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //INSERT COUNTIES SUB CATEGORIES BATCH
    //CHANGE CATEGORY SUB LEAD
    ProzProfileServiceAreasComponent.prototype.changeSubCategoryServiceLead = function (countyData, categoryData) {
        var _this = this;
        console.log(categoryData);
        var countyPerLead = countyData.subCategoriesListPerLead.filter(function (value) { return value.checkedNewLead === true && value.serviceCode === categoryData.cat_code; });
        if (countyPerLead.length === 0) {
            countyData.subCategoriesListPerLead.forEach(function (e) {
                if (e.serviceCode === categoryData.cat_code) {
                    _this.paymentType(categoryData, 'PerLead', countyData);
                    _this.categoryServiceLevelInsertionForZero(countyData, e);
                    _this.subCategoryServiceLevelInsertion(countyData, categoryData);
                    e.checkedNewLead = true;
                    _this.saveAndContinueStatus = false;
                }
                else {
                }
            });
        }
        else {
            countyData.subCategoriesListPerLead.forEach(function (e) {
                if (e.serviceCode === categoryData.cat_code) {
                    var countyPerLeadInsideForButton = e.serviceCategories.filter(function (value) { return value.checkedNewLead === true; });
                    if (countyPerLeadInsideForButton.length === 0) {
                        console.log(categoryData);
                        categoryData.perLeadCost = 0;
                        _this.categoryServiceLevelDeletion(countyData, e);
                        e.checkedNewLead = false;
                        _this.saveAndContinueStatus = true;
                    }
                    else {
                        console.log(categoryData);
                        e.checkedNewLead = true;
                        if (categoryData.checkedNewLead === true && _this.typeOfSubscription == 'perLead') {
                            _this.paymentType(categoryData, 'PerLead', countyData);
                            _this.subCategoryServiceLevelInsertion(countyData, categoryData);
                        }
                        else {
                            countyData.totalEstimatedCost = countyData.totalEstimatedCost - categoryData.estimatedCost;
                            categoryData.perLeadCost = 0;
                            _this.categorySubServiceLevelDeletion(countyData, categoryData);
                        }
                    }
                    // var countyPerLeadInside = e.serviceCategories.filter(value => value.checkedNewLead === true)
                    // if (countyPerLeadInside.length === 0) {
                    //   categoryData.perLeadCost = 0
                    //   this.categoryServiceLevelDeletion(countyData, e)
                    //   e.checkedNewLead = false
                    // } else {
                    //   if (categoryData.checkedNewLead === true && this.typeOfSubscription == 'perLead') {
                    //     this.paymentType(categoryData, 'PerLead', countyData)
                    //     this.subCategoryServiceLevelInsertion(countyData, categoryData)
                    //   } else {
                    //     countyData.totalEstimatedCost = countyData.totalEstimatedCost - categoryData.estimatedCost
                    //     categoryData.perLeadCost = 0
                    //     this.categorySubServiceLevelDeletion(countyData, categoryData)
                    //   }
                    // }
                }
            });
        }
    };
    //CHANGE CATEGORY SUB LEAD
    //CHANGE CATEGORY SERVICE LEAD
    ProzProfileServiceAreasComponent.prototype.changeCategoryServiceLead = function (countyData, categoryData) {
        var _this = this;
        var countyCheckboxValidator = countyData.subCategoriesListPerLead.filter(function (value) { return value.checkedNewLead === true && value.serviceCode === categoryData.cat_code; });
        if (countyCheckboxValidator.length === 0) {
            this.saveAndContinueStatus = true;
            console.log(categoryData.checkedNewLead);
            if (categoryData.checkedNewLead === true && this.typeOfSubscription == 'perLead') {
                categoryData.serviceCategories.forEach(function (e, i) {
                    if (e.allowCheck == false) {
                        console.log(e);
                        e.checkedNewLead = categoryData.checkedNewLead;
                        _this.totalLeadCost = _this.totalLeadCost + e.perLeadCost;
                        _this.paymentType(e, 'PerLead', countyData);
                    }
                    else {
                        console.log(e);
                    }
                    if (i === categoryData.serviceCategories.length - 1) {
                        console.log(categoryData);
                        _this.categoryServiceLevelInsertion(countyData, categoryData);
                    }
                });
            }
            else {
                categoryData.serviceCategories.forEach(function (e, i) {
                    if (e.allowCheck == false) {
                        console.log(categoryData.checkedNewLead);
                        e.perLeadCost = 0;
                        e.checkedNewLead = categoryData.checkedNewLead;
                        _this.totalLeadCost = _this.totalLeadCost - e.perLeadCost;
                    }
                    if (i === categoryData.serviceCategories.length - 1) {
                        _this.categoryServiceLevelDeletion(countyData, categoryData);
                    }
                });
            }
        }
        else {
            this.saveAndContinueStatus = false;
            if (categoryData.checkedNewLead === true && this.typeOfSubscription == 'perLead') {
                categoryData.serviceCategories.forEach(function (e, i) {
                    if (e.allowCheck == false) {
                        console.log(e);
                        e.checkedNewLead = categoryData.checkedNewLead;
                        _this.totalLeadCost = _this.totalLeadCost + e.perLeadCost;
                        _this.paymentType(e, 'PerLead', countyData);
                    }
                    if (i === categoryData.serviceCategories.length - 1) {
                        _this.categoryServiceLevelInsertion(countyData, categoryData);
                    }
                });
            }
            else {
                categoryData.serviceCategories.forEach(function (e, i) {
                    if (e.allowCheck == false) {
                        e.checkedNewLead = categoryData.checkedNewLead;
                        e.perLeadCost = 0;
                        _this.totalLeadCost = _this.totalLeadCost - e.perLeadCost;
                    }
                    if (i === categoryData.serviceCategories.length - 1) {
                        _this.categoryServiceLevelDeletion(countyData, categoryData);
                    }
                });
            }
        }
    };
    //CHANGE CATEGORY SERVICE LEAD
    //CATEGORY SERVICE LEVEL INSERTION
    ProzProfileServiceAreasComponent.prototype.categoryServiceLevelInsertionForZero = function (countyData, categoryData) {
        var _this = this;
        console.log(countyData);
        var categoryDataService = categoryData.serviceCategories.filter(function (value) { return value.checkedNewLead === true && value.serviceCode === categoryData.cat_code; });
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var catLevelInsertion = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
            countyData: countyData,
            subscriptionType: this.typeOfSubscription,
            categoryName: categoryData.serviceName,
            categoryCode: categoryData.serviceCode,
            serviceCategories: categoryDataService
        };
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/serviceCategoryLevelInsertionForZero', catLevelInsertion, options)
            .subscribe(function (data) {
            var response = data.json();
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //CATEGORY SERVICE LEVEL INSERTION
    //CATEGORY SERVICE LEVEL INSERTION
    ProzProfileServiceAreasComponent.prototype.categoryServiceLevelInsertion = function (countyData, categoryData) {
        var _this = this;
        console.log(categoryData);
        var categoryDataService = categoryData.serviceCategories.filter(function (value) { return value.checkedNewLead === true; });
        console.log(categoryDataService);
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var catLevelInsertion = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
            countyData: countyData,
            subscriptionType: this.typeOfSubscription,
            categoryName: categoryData.serviceName,
            categoryCode: categoryData.serviceCode,
            serviceCategories: categoryDataService
        };
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        ////console.log(catLevelInsertion)
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/serviceCategoryLevelInsertion', catLevelInsertion, options)
            .subscribe(function (data) {
            var response = data.json();
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //CATEGORY SERVICE LEVEL INSERTION
    //CATEGORY SERVICE LEVEL DELETION
    ProzProfileServiceAreasComponent.prototype.categoryServiceLevelDeletion = function (countyData, categoryData) {
        var _this = this;
        var categoryDataService = categoryData.serviceCategories.filter(function (value) { return value.checkedNewLead === true; });
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var catLevelInsertion = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
            countyData: countyData,
            categoryCode: categoryData.serviceCode,
        };
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/serviceCategoryLevelDeletion', catLevelInsertion, options)
            .subscribe(function (data) {
            var response = data.json();
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //CATEGORY SERVICE LEVEL DELETION
    //ZIPCODE SELECTION
    ProzProfileServiceAreasComponent.prototype.zipcodesSelection = function (data) {
        var _this = this;
        var displayZipcodes = this.displayZipcodes.filter(function (value) { return value.checked === true; });
        if (displayZipcodes.length === 0) {
            this.zipcodeValidation = true;
            this.selectAllZipcodesVar = false;
        }
        else {
            this.zipcodeValidation = false;
            this.displayZipcodes.map(function (e, i) {
                if (e.checked == true) {
                    _this.selectAllZipcodesVar = true;
                }
                else {
                    _this.selectAllZipcodesVar = false;
                    return false;
                }
            });
        }
    };
    //ZIPCODE SELECTION
    //GET COUNTIES LIST
    ProzProfileServiceAreasComponent.prototype.getCountiesList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.countyList = [];
        this.ngZone.run(function () {
            _this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getUniqueCounty/' + proCode, options)
                .subscribe(function (data) {
                var response = data.json();
                var categoryName = [];
                if (response.status == 200) {
                    // this.spinner.hide()
                    _this.countyStatus = true;
                    _this.countyStore = response.response;
                    console.log(_this.countyStore);
                    _this.showMap = true;
                    _this.countyStore.forEach(function (e) {
                        _this.selected[e.county] = (!_this.selected[e.county]) ? true : false;
                        _this.counties.push(e.county);
                    });
                    _this.countyStore.forEach(function (f, j) {
                        var data = _this.prozLocationFetch[0].tradeLicense.split(',');
                        data.forEach(function (g, k) {
                            var subCategoryListAlias = _this.subCategoriesList;
                            var subCategoriesList = subCategoryListAlias.filter(function (value) { return value.cat_code === g; });
                            if (subCategoriesList.length > 0) {
                                console.log(subCategoriesList);
                                if (subCategoriesList.length == 1 && subCategoriesList[0].perLead == 'NA') {
                                    var catObj = {
                                        serviceName: subCategoriesList[0].serviceCategoryName,
                                        allowCatCheck: subCategoriesList[0].allowCatCheck,
                                        serviceCode: subCategoriesList[0].cat_code,
                                        serviceCategories: [],
                                        checkedNewLead: false
                                    };
                                }
                                else {
                                    var catObj = {
                                        serviceName: subCategoriesList[0].serviceCategoryName,
                                        allowCatCheck: subCategoriesList[0].allowCatCheck,
                                        serviceCode: subCategoriesList[0].cat_code,
                                        serviceCategories: [],
                                        checkedNewLead: false
                                    };
                                }
                            }
                            console.log(catObj);
                            subCategoriesList.forEach(function (e) {
                                catObj.serviceCategories.push({
                                    baseHousehold: e.baseHousehold,
                                    cat_code: e.cat_code,
                                    categoryName: e.categoryName,
                                    checked: e.checked,
                                    checkedNew: e.checkedNew,
                                    checkedNewLead: e.checkedNewLead,
                                    createdBy: e.createdBy,
                                    createdOn: e.createdOn,
                                    estimatedCost: e.estimatedCost,
                                    id: e.id,
                                    modifiedBy: e.modifiedBy,
                                    modifiedOn: e.modifiedOn,
                                    monthlyFee: e.monthlyFee,
                                    perLead: e.perLead,
                                    allowCheck: e.allowCheck,
                                    perLeadCost: e.perLeadCost,
                                    prozId: e.prozId,
                                    qDiscount: e.qDiscount,
                                    quaterlyFee: e.quaterlyFee,
                                    serviceCategoryName: e.serviceCategoryName,
                                    serviceSubCategoryName: e.serviceSubCategoryName,
                                    status: e.status,
                                    subcat_code: e.subcat_code,
                                    subcategoryDescription: e.subcategoryDescription,
                                    subcategoryName: e.subcategoryName,
                                    subscriptionType: e.subscriptionType,
                                    yDiscount: e.yDiscount,
                                    yearlyFee: e.yearlyFee,
                                });
                            });
                            categoryName.push(catObj);
                            if (k == data.length - 1) {
                                _this.countyList.push({
                                    proCode: _this.activatedRoute.snapshot.params['prozId'],
                                    county: f.county,
                                    state: f.state,
                                    stateCode: f.stateCode,
                                    households: 0,
                                    subCategoriesListPerLead: categoryName,
                                });
                                _this.ref.detectChanges();
                                ////console.log(this.countyList)
                                categoryName = [];
                                _this.getCountiesCategoryList(proCode);
                            }
                            //
                        });
                        if (j == _this.countyStore.length - 1) {
                            //  this.spinner.hide()
                        }
                    });
                    //LOAD LAYER
                    // this.loadSelected(this.countyStore)
                    //LOAD LAYER
                }
                else {
                    _this.countyStatus = false;
                    // this.spinner.hide()
                }
            }, function (error) {
                _this.toastr.warning("Unable to connect to server");
            });
        });
    };
    //GET COUNTIES LIST
    //LOAD MAP COLOR ON LOAD
    ProzProfileServiceAreasComponent.prototype.loadSelected = function (countyStore) {
        var _this = this;
        this.HttP.get("assets/geolocations.json").subscribe(function (json) {
            json.features.map(function (val) {
                val.checked = false;
            });
            _this.json = json;
            leaflet__WEBPACK_IMPORTED_MODULE_17__["geoJSON"](_this.json, {
                onEachFeature: function (feature, layer) {
                    // popup content
                    var popupContent = '<h4>NAME: ' + feature.properties.NAME + '</h4><b>COUNTY: ' + feature.properties.COUNTY + '</b>';
                    // pop content ends here
                    //Open data in Popup on Map
                    layer.bindPopup(popupContent);
                    // Open data in Popoup on map ends
                    // Click event on Map
                    // layer.on({
                    // 'click': (e) => {
                    countyStore.forEach(function (e) {
                        var name = feature.properties.NAME.toUpperCase();
                        if (e.county === name) {
                            feature['checked'] = true;
                            var style = {
                                fillColor: 'yellow',
                                fillOpacity: 0.5,
                                weight: 2,
                                opacity: 1,
                                dashArray: '3'
                            };
                            var highlight = {
                                'fillColor': 'green',
                                'weight': 2,
                                'opacity': 1
                            };
                            _this.featuresSelected = feature.properties.NAME;
                            layer['setStyle'](style);
                            layer['setStyle'](highlight);
                            // this.getCountyManualy(this.featureSelected)
                        }
                    });
                    // }
                    // });
                    // Click event on Map ends here
                },
            });
        });
    };
    //LOAD MAP COLOR ON LOAD
    //GET COUNTIES CATEGORY LIST
    ProzProfileServiceAreasComponent.prototype.getCountiesCategoryList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getCountiesCategoryList/' + proCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.countyCategory = response.response;
                _this.saveAndContinueStatus = false;
                _this.getCountiesSubCategoryList(proCode);
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES CATEGORY LIST
    //GET COUNTIES SUB CATEGORY LIST
    ProzProfileServiceAreasComponent.prototype.getCountiesSubCategoryList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getCountiesSubCategoryList/' + proCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.countySubCategory = response.response;
                for (var i = 0; i < _this.countyList.length; i++) {
                    for (var k = 0; k < _this.countyList[i].subCategoriesListPerLead.length; k++) {
                        for (var j = 0; j < _this.countyCategory.length; j++) {
                            if (_this.countyList[i].proCode === _this.countyCategory[j].proCode && _this.countyList[i].county === _this.countyCategory[j].county && _this.countyList[i].subCategoriesListPerLead[k].serviceCode === _this.countyCategory[j].categoryCode) {
                                _this.countyList[i].subCategoriesListPerLead[k].checkedNewLead = true;
                            }
                        }
                    }
                }
                for (var i = 0; i < _this.countyList.length; i++) {
                    for (var k = 0; k < _this.countyList[i].subCategoriesListPerLead.length; k++) {
                        for (var l = 0; l < _this.countyList[i].subCategoriesListPerLead[k].serviceCategories.length; l++) {
                            for (var m = 0; m < _this.countySubCategory.length; m++) {
                                if (_this.countyList[i].proCode === _this.countySubCategory[m].proCode && _this.countyList[i].county === _this.countySubCategory[m].county && _this.countyList[i].subCategoriesListPerLead[k].serviceCode === _this.countySubCategory[m].categoryCode && _this.countyList[i].subCategoriesListPerLead[k].serviceCategories[l].subcat_code === _this.countySubCategory[m].subcategoryCode) {
                                    _this.countyList[i].subCategoriesListPerLead[k].serviceCategories[l].checkedNewLead = true;
                                    _this.countyList[i].subCategoriesListPerLead[k].serviceCategories[l].perLeadCost = _this.countySubCategory[m].perLead;
                                }
                            }
                        }
                    }
                }
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES SUB CATEGORY LIST
    //SUB CATEGORY LEVEL INSERTION
    ProzProfileServiceAreasComponent.prototype.subCategoryServiceLevelInsertion = function (countyData, categoryData) {
        var _this = this;
        console.log(countyData);
        var subCatLevelInsertion = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
            county: countyData,
            households: countyData.households,
            categoryCode: categoryData.cat_code,
            subCategoryCode: categoryData.subcat_code,
            subcategoryName: categoryData.subcategoryName,
            categoryName: categoryData.serviceCategoryName,
            perLead: categoryData.estimatedCost,
            subscriptionType: this.typeOfSubscription
        };
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        console.log(subCatLevelInsertion);
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/serviceSubCategoryLevelInsertion', subCatLevelInsertion, options)
            .subscribe(function (data) {
            var response = data.json();
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //SUB CATEGORY LEVEL INSERTION
    //SUB CATEGORY LEVEL DELETION
    ProzProfileServiceAreasComponent.prototype.categorySubServiceLevelDeletion = function (countyData, categoryData) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var subCatLevelDeletion = {
            proCode: this.activatedRoute.snapshot.params['prozId'],
            countyData: countyData,
            categoryCode: categoryData.cat_code,
            subCategoryCode: categoryData.subcat_code,
        };
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/serviceSubCategoryLevelDeletion', subCatLevelDeletion, options)
            .subscribe(function (data) {
            var response = data.json();
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //SUB CATEGORY LEVEL DELETION
    //TRADE LICENSE GENERATION
    ProzProfileServiceAreasComponent.prototype.createTradeLicense = function (prozProfileData) {
        ////console.log(prozProfileData)
        return this.formBuilder.group({
            stateRegisteredIn: [prozProfileData.stateRegisteredIn, _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required],
            tradeLicense: [prozProfileData.tradeLicense, _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required],
            tradeLicenseNumber: [prozProfileData.tradeLicenseNumber, _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required],
            tradeLicenseExpiration: [prozProfileData.tradeLicenseExpiration, _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required]
        });
    };
    ProzProfileServiceAreasComponent.prototype.addFieldValue = function () {
        this.items = this.addTradeLicenseList.get('tradeLicense');
        ////console.log(this.items)
        this.items.push(this.createTradeLicense(''));
        this.checkValidationTrade();
    };
    Object.defineProperty(ProzProfileServiceAreasComponent.prototype, "tradeLicenseValues", {
        get: function () {
            return this.addTradeLicenseList.get('tradeLicense');
        },
        enumerable: true,
        configurable: true
    });
    ProzProfileServiceAreasComponent.prototype.deleteFieldValue = function (index) {
        this.tradeLicenseDeleteObj.index = index;
        this.tradeLicenseDeleteObj.categoryCode = this.addTradeLicenseList.get('tradeLicense').value[index].tradeLicense;
        this.tradeLicenseValues.removeAt(index);
        this.checkValidationTrade();
    };
    //DELETE LICENSES
    ProzProfileServiceAreasComponent.prototype.deleteLicenses = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/deleteLicenses', this.tradeLicenseDeleteObj, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.toastr.success("Trade License Updated Successfully");
                window.location.reload();
                return false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //DELETE LICENSES
    //CHECK TRADE VALIDATIONS
    ProzProfileServiceAreasComponent.prototype.checkValidationTrade = function () {
        var _this = this;
        this.tradeStatusCheck = true;
        this.addTradeLicenseList.get('tradeLicense').value.forEach(function (e) {
            if (e.stateRegisteredIn == "" || e.tradeLicense == "" || e.tradeLicenseExpiration == "" || e.tradeLicenseNumber == "") {
                _this.tradeStatusCheck = true;
                return false;
            }
            if (e.stateRegisteredIn == null || e.tradeLicense == null || e.tradeLicenseExpiration == null || e.tradeLicenseNumber == null) {
                _this.tradeStatusCheck = true;
                return false;
            }
            else if (e.stateRegisteredIn !== "" && e.tradeLicense !== "" && e.tradeLicenseExpiration !== "" && e.tradeLicenseNumber !== "") {
                _this.tradeStatusCheck = false;
                return false;
            }
        });
    };
    //CHECK TRADE VALIDATIONS
    //ADD TRADE LICENSE
    ProzProfileServiceAreasComponent.prototype.addTradeLicense = function () {
        var _this = this;
        var state = [];
        var tradeLicense = [];
        var tradeLicenseNumber = [];
        var tradeLicenseExpiration = [];
        var tradeLicenseCategoryNames = [];
        this.addTradeLicenseList.get('tradeLicense').value.forEach(function (e) {
            state.push(e.stateRegisteredIn);
            tradeLicense.push(e.tradeLicense);
            tradeLicenseNumber.push(e.tradeLicenseNumber);
            tradeLicenseExpiration.push(e.tradeLicenseExpiration);
            tradeLicenseCategoryNames.push(e.tradeLicense);
        });
        var tradeDetailsObj = {
            "prozId": this.activatedRoute.snapshot.params['prozId'],
            "stateRegisteredIn": state,
            "tradeLicense": tradeLicense,
            "tradeLicenseNumber": tradeLicenseNumber,
            "tradeLicenseExpiration": tradeLicenseExpiration,
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/bulkTradeLicenseDetailsInsert', tradeDetailsObj)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                if (_this.tradeLicenseDeleteObj.categoryCode === '') {
                    _this.toastr.success("Trade License Updated Successfully");
                    window.location.reload();
                    return false;
                }
                else {
                    _this.deleteLicenses();
                }
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //ADD TRADE LICENSE
    //VIEW PROZ DETAILS
    ProzProfileServiceAreasComponent.prototype.viewPro = function (prozCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getProzProfile/' + prozCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozProfileData = response.response[0];
                _this.prozProfileData.tradeDetails = [];
                _this.prozProfileData.stateRegisteredIn.split(',').forEach(function (e, i) {
                    var tradeDetailsObj = {
                        stateRegisteredIn: _this.prozProfileData.stateRegisteredIn.split(',')[i],
                        tradeLicense: _this.prozProfileData.tradeLicense.split(',')[i],
                        tradeLicenseNumber: _this.prozProfileData.tradeLicenseNumber.split(',')[i],
                        tradeLicenseExpiration: _this.prozProfileData.tradeLicenseExpiration.split(',')[i],
                    };
                    _this.prozProfileData.tradeDetails.push(tradeDetailsObj);
                    if (i === _this.prozProfileData.stateRegisteredIn.split(',').length - 1) {
                        _this.prozProfileData.tradeDetails.forEach(function (e) {
                            _this.items = _this.addTradeLicenseList.get('tradeLicense');
                            _this.items.push(_this.createTradeLicense(e));
                        });
                    }
                });
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //VIEW PROZ DETAILS
    //STATES
    ProzProfileServiceAreasComponent.prototype.getListOfStates = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getListOfStates', options)
            .subscribe(function (data) {
            var response = data.json();
            _this.statesData = response.response;
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //STATES
    //CATEGORIES
    ProzProfileServiceAreasComponent.prototype.getListOfCategories = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_3__["Global"].url + '/getListOfCategories', options)
            .subscribe(function (data) {
            var response = data.json();
            _this.categoriesData = response.response;
            _this.categoriesData.forEach(function (e) {
                e.checked = false;
            });
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //CATEGORIES
    //DELETE TOTAL COUNTY ON CLICK ON MAP
    ProzProfileServiceAreasComponent.prototype.delteCountyOnMap = function (county) {
        var _this = this;
        this.ngZone.run(function () {
            _this.countyList = _this.countyList.filter(function (value) { return value.county !== county; });
            localStorage.setItem('proServiceAreas', JSON.stringify(_this.countyList));
            _this.counties = _this.counties.filter(function (value) { return value !== county.county; });
            //console.log(county)
            _this.countyStore = _this.countyStore.filter(function (value) { return value.county !== county; });
            //console.log(this.countyStore)
            _this.deleteCountyAndPro(county);
            //  this.spinner.show()
            _this.countyList.length == 0 ? _this.countyStatus = false : _this.countyStatus = true;
            // this.layerSet.set("styles", [{
            //   where: "'name' IN('" + this.counties.join("','") + "')",
            //   polygonOptions: {
            //     fillColor: "#00FF00"
            //   }
            // }]);
        });
    };
    ProzProfileServiceAreasComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            providers: [_utilities_beyond__WEBPACK_IMPORTED_MODULE_7__["Beyond"], _utilities_multipleselectservice__WEBPACK_IMPORTED_MODULE_8__["multipleselectservice"], _utilities_customValidators__WEBPACK_IMPORTED_MODULE_9__["CustomValidators"], _utilities_geocode_service__WEBPACK_IMPORTED_MODULE_10__["GeocodingService"]],
            selector: 'app-proz-profile-service-areas',
            template: __webpack_require__(/*! ./proz-profile-service-areas.component.html */ "./src/app/proz-profile/proz-profile-service-areas/proz-profile-service-areas.component.html"),
            styles: [__webpack_require__(/*! ./proz-profile-service-areas.component.css */ "./src/app/proz-profile/proz-profile-service-areas/proz-profile-service-areas.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [ng4_auto_complete__WEBPACK_IMPORTED_MODULE_15__["AutoCompleteService"],
            _utilities_beyond__WEBPACK_IMPORTED_MODULE_7__["Beyond"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_http__WEBPACK_IMPORTED_MODULE_4__["Http"],
            _angular_common_http__WEBPACK_IMPORTED_MODULE_16__["HttpClient"],
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"],
            ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"],
            _utilities_multipleselectservice__WEBPACK_IMPORTED_MODULE_8__["multipleselectservice"],
            _utilities_geocode_service__WEBPACK_IMPORTED_MODULE_10__["GeocodingService"],
            ngx_spinner__WEBPACK_IMPORTED_MODULE_11__["NgxSpinnerService"],
            _angular_common__WEBPACK_IMPORTED_MODULE_12__["Location"],
            _angular_common__WEBPACK_IMPORTED_MODULE_12__["PlatformLocation"],
            ng2_completer__WEBPACK_IMPORTED_MODULE_14__["CompleterService"],
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
    ], ProzProfileServiceAreasComponent);
    return ProzProfileServiceAreasComponent;
}());



/***/ }),

/***/ "./src/app/proz-profile/proz-profile.module.ts":
/*!*****************************************************!*\
  !*** ./src/app/proz-profile/proz-profile.module.ts ***!
  \*****************************************************/
/*! exports provided: ProzProfileModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProzProfileModule", function() { return ProzProfileModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _my_proz_profile_my_proz_profile_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./my-proz-profile/my-proz-profile.component */ "./src/app/proz-profile/my-proz-profile/my-proz-profile.component.ts");
/* harmony import */ var _proz_profile_routing_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./proz-profile-routing.module */ "./src/app/proz-profile/proz-profile-routing.module.ts");
/* harmony import */ var _proz_profile_layout_proz_profile_layout_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./proz-profile-layout/proz-profile-layout.component */ "./src/app/proz-profile/proz-profile-layout/proz-profile-layout.component.ts");
/* harmony import */ var _proz_profile_proz_profile_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./proz-profile/proz-profile.component */ "./src/app/proz-profile/proz-profile/proz-profile.component.ts");
/* harmony import */ var _proz_profile_confirmation_proz_profile_confirmation_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./proz-profile-confirmation/proz-profile-confirmation.component */ "./src/app/proz-profile/proz-profile-confirmation/proz-profile-confirmation.component.ts");
/* harmony import */ var _proz_profile_payment_proz_profile_payment_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./proz-profile-payment/proz-profile-payment.component */ "./src/app/proz-profile/proz-profile-payment/proz-profile-payment.component.ts");
/* harmony import */ var _proz_profile_service_areas_proz_profile_service_areas_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./proz-profile-service-areas/proz-profile-service-areas.component */ "./src/app/proz-profile/proz-profile-service-areas/proz-profile-service-areas.component.ts");
/* harmony import */ var _common_prozadmin_sidemenu_proz_sidemenu_module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/prozadmin-sidemenu/proz-sidemenu.module */ "./src/app/common/prozadmin-sidemenu/proz-sidemenu.module.ts");
/* harmony import */ var _common_commonvanlynkheader_commonvanlynkheader_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../common/commonvanlynkheader/commonvanlynkheader.module */ "./src/app/common/commonvanlynkheader/commonvanlynkheader.module.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var ngx_mask__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ngx-mask */ "./node_modules/ngx-mask/fesm5/ngx-mask.js");
/* harmony import */ var ng2_completer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ng2-completer */ "./node_modules/ng2-completer/esm5/ng2-completer.js");
/* harmony import */ var ngx_pagination__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ngx-pagination */ "./node_modules/ngx-pagination/dist/ngx-pagination.js");
/* harmony import */ var _proz_profile_service_areas_proz_profile_service_area_pipe__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./proz-profile-service-areas/proz-profile-service-area.pipe */ "./src/app/proz-profile/proz-profile-service-areas/proz-profile-service-area.pipe.ts");
/* harmony import */ var _agm_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @agm/core */ "./node_modules/@agm/core/fesm5/agm-core.js");
/* harmony import */ var _pro_edit_my_profile_pro_edit_my_profile_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./pro-edit-my-profile/pro-edit-my-profile.component */ "./src/app/proz-profile/pro-edit-my-profile/pro-edit-my-profile.component.ts");
/* harmony import */ var _proz_public_profile_proz_public_profile_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./proz-public-profile/proz-public-profile.component */ "./src/app/proz-profile/proz-public-profile/proz-public-profile.component.ts");
/* harmony import */ var _asymmetrik_ngx_leaflet__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @asymmetrik/ngx-leaflet */ "./node_modules/@asymmetrik/ngx-leaflet/dist/index.js");
/* harmony import */ var _proz_subscription_confirmation_proz_subscription_confirmation_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./proz-subscription-confirmation/proz-subscription-confirmation.component */ "./src/app/proz-profile/proz-subscription-confirmation/proz-subscription-confirmation.component.ts");
/* harmony import */ var _nomadreservations_ngx_stripe__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @nomadreservations/ngx-stripe */ "./node_modules/@nomadreservations/ngx-stripe/fesm5/nomadreservations-ngx-stripe.js");






















//import { TypeaheadModule } from 'ngx-bootstrap/typeahead/typeahead.module';

var ProzProfileModule = /** @class */ (function () {
    function ProzProfileModule() {
    }
    ProzProfileModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            schemas: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["CUSTOM_ELEMENTS_SCHEMA"]],
            declarations: [_proz_profile_layout_proz_profile_layout_component__WEBPACK_IMPORTED_MODULE_5__["ProzProfileLayoutComponent"],
                _proz_profile_service_areas_proz_profile_service_areas_component__WEBPACK_IMPORTED_MODULE_9__["ProzProfileServiceAreasComponent"],
                _proz_profile_payment_proz_profile_payment_component__WEBPACK_IMPORTED_MODULE_8__["ProzProfilePaymentComponent"],
                _proz_profile_confirmation_proz_profile_confirmation_component__WEBPACK_IMPORTED_MODULE_7__["ProzProfileConfirmationComponent"],
                _my_proz_profile_my_proz_profile_component__WEBPACK_IMPORTED_MODULE_3__["MyProzProfileComponent"],
                _proz_profile_proz_profile_component__WEBPACK_IMPORTED_MODULE_6__["ProzProfileComponent"],
                _proz_profile_service_areas_proz_profile_service_area_pipe__WEBPACK_IMPORTED_MODULE_16__["ProzProfileServiceAreaPipe"],
                _pro_edit_my_profile_pro_edit_my_profile_component__WEBPACK_IMPORTED_MODULE_18__["ProEditMyProfileComponent"],
                _proz_public_profile_proz_public_profile_component__WEBPACK_IMPORTED_MODULE_19__["ProzPublicProfileComponent"],
                _proz_subscription_confirmation_proz_subscription_confirmation_component__WEBPACK_IMPORTED_MODULE_21__["ProzSubscriptionConfirmationComponent"]
            ],
            imports: [
                _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                _proz_profile_routing_module__WEBPACK_IMPORTED_MODULE_4__["ProzProfileRoutingModule"],
                _common_prozadmin_sidemenu_proz_sidemenu_module__WEBPACK_IMPORTED_MODULE_10__["ProzSidemenuModule"],
                _common_commonvanlynkheader_commonvanlynkheader_module__WEBPACK_IMPORTED_MODULE_11__["CommonvanlynkheaderModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_12__["FormsModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_12__["ReactiveFormsModule"],
                ngx_mask__WEBPACK_IMPORTED_MODULE_13__["NgxMaskModule"],
                ng2_completer__WEBPACK_IMPORTED_MODULE_14__["Ng2CompleterModule"],
                ngx_pagination__WEBPACK_IMPORTED_MODULE_15__["NgxPaginationModule"],
                _asymmetrik_ngx_leaflet__WEBPACK_IMPORTED_MODULE_20__["LeafletModule"].forRoot(),
                _nomadreservations_ngx_stripe__WEBPACK_IMPORTED_MODULE_22__["NgxStripeModule"].forRoot('pk_test_PhrNoP70hPSyNYpgTohsNCD0'),
                //TypeaheadModule.forRoot(),
                _agm_core__WEBPACK_IMPORTED_MODULE_17__["AgmCoreModule"].forRoot({
                    apiKey: 'AIzaSyB-WIqE2pai0xtb8hK8uUkaS3OsSz-qOYA',
                    libraries: ["places"]
                }),
            ]
        })
    ], ProzProfileModule);
    return ProzProfileModule;
}());



/***/ }),

/***/ "./src/app/proz-profile/proz-profile/proz-profile.component.css":
/*!**********************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile/proz-profile.component.css ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".login-container {\r\n    position: relative;\r\n    margin: 3% auto;\r\n    max-width: 100%;\r\n}\r\n\r\n.login-container .loginbox {\r\n    position: relative;\r\n    width: 100% !important;\r\n    height: auto !important;\r\n    padding: 0 0 0px 0;\r\n    box-shadow: 0 0 14px rgba(0,0,0,.1);\r\n}\r\n\r\n.login-container .loginbox .loginbox-social .social-buttons .button-facebook {\r\n    float: left;\r\n    border: 2px solid #3b5998;\r\n    color: #3b5998;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-right: 40%;\r\n    background-color: #fff;\r\n}\r\n\r\n.login-container .loginbox .loginbox-social .social-buttons .button-twitter {\r\n    float: left;\r\n    border: 2px solid #29c1f6;\r\n    color: #29c1f6;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-right: 35%;\r\n    background-color: #fff;\r\n}\r\n\r\n.login-container .loginbox .loginbox-social .social-buttons .button-google {\r\n    float: right;\r\n    border: 2px solid #ef4f1d;\r\n    color: #ef4f1d;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    background-color: #fff;\r\n}\r\n\r\n.loginbox-social {\r\n    padding: 0 0 0 0 !important; \r\n}\r\n\r\n.loginbox-title{\r\n    font-weight: bold !important;\r\n    font-size: 25px !important;\r\n}\r\n\r\nlabel{\r\n    font-weight:bold !important;\r\n}\r\n\r\nlabel .mandatory{\r\n    color:red;\r\n    font-size: 16px !important;\r\n    font-weight: bold !important;\r\n}\r\n\r\n.hr-blue-title{    \r\n    border-top: 3px solid #5DB2FF !important;\r\n}\r\n\r\n.hr-blue{    \r\n    border-top: 1px solid #5DB2FF !important;\r\n}\r\n\r\n.logoImage{\r\n    width:100px; \r\n    height:100px;\r\n    margin-top:5px; \r\n    border-width: 1px;   \r\n    border-color: #5DB2FF;   \r\n    border-style: solid; \r\n}\r\n\r\n.aggregateRating{\r\n    color:#bc5679; \r\n    font-size: 14px !important;\r\n    font-weight: bold !important;\r\n}\r\n\r\n.aggregateRating span{\r\n    color: green;\r\n    font-size: 14px !important;\r\n    font-weight: bold !important;\r\n}\r\n\r\n.totalcost{\r\n    color:#bc5679; \r\n    font-size: 14px !important;\r\n    font-weight: bold !important; \r\n    margin-right: auto !important;\r\n    margin-left: auto !important;\r\n}\r\n\r\n.totalcost span{\r\n    color: green;\r\n    font-size: 14px !important;\r\n    font-weight: bold !important;\r\n}\r\n\r\n.well{\r\n    margin-bottom: 0 !important;\r\n    padding: 0 10px !important;\r\n}\r\n\r\n.well.with-footer {\r\n    padding-bottom: 10px !important;\r\n}\r\n\r\n.well.with-header {\r\n    padding-top: 10px !important;\r\n}\r\n\r\n.btn {\r\n    font-size: 14px !important;\r\n    font-weight: bold !important;\r\n}\r\n\r\n.form-title {\r\n    display: block;\r\n    padding: 8px 0;\r\n    border-bottom: 1px dashed #5DB2FF;\r\n    font-size: 15px;\r\n    font-weight: bold;\r\n    color: #5DB2FF;\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.controlsMap:focus {\r\n    border-color: #4d90fe;\r\n  }\r\n\r\n.title {\r\n    font-weight: bold;\r\n  }\r\n\r\n#infowindow-content {\r\n    display: none;\r\n  }\r\n\r\n#map #infowindow-content {\r\n    display: inline;\r\n  }\r\n\r\n.controlsMap {\r\n    background-color: #fff;\r\n    border-radius: 2px;\r\n    border: 1px solid transparent;\r\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\r\n    box-sizing: border-box;\r\n    font-family: Roboto;\r\n    font-size: 15px;\r\n    font-weight: 300;\r\n    height: 29px;\r\n    margin-left: 17px;\r\n    margin-top: 10px;\r\n    outline: none;\r\n    padding: 0 11px 0 13px;\r\n    text-overflow: ellipsis;\r\n    width: 400px;\r\n  }\r\n\r\n#map  { width: 100%; height: 400px; }\r\n\r\n.gap{\r\n    margin: 5px 0px;\r\n    }\r\n    \r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcHJvei1wcm9maWxlL3Byb3otcHJvZmlsZS9wcm96LXByb2ZpbGUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsZ0JBQWdCO0NBQ25COztBQUVEO0lBQ0ksbUJBQW1CO0lBQ25CLHVCQUF1QjtJQUN2Qix3QkFBd0I7SUFDeEIsbUJBQW1CO0lBR25CLG9DQUFvQztDQUN2Qzs7QUFFRDtJQUNJLFlBQVk7SUFDWiwwQkFBMEI7SUFDMUIsZUFBZTtJQUNmLG1CQUFtQjtJQUNuQixZQUFZO0lBQ1osYUFBYTtJQUNiLGtCQUFrQjtJQUNsQix1QkFBdUI7Q0FDMUI7O0FBRUQ7SUFDSSxZQUFZO0lBQ1osMEJBQTBCO0lBQzFCLGVBQWU7SUFDZixtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsdUJBQXVCO0NBQzFCOztBQUVEO0lBQ0ksYUFBYTtJQUNiLDBCQUEwQjtJQUMxQixlQUFlO0lBQ2YsbUJBQW1CO0lBQ25CLFlBQVk7SUFDWixhQUFhO0lBQ2IsdUJBQXVCO0NBQzFCOztBQUdBO0lBQ0csNEJBQTRCO0NBQy9COztBQUVEO0lBQ0ksNkJBQTZCO0lBQzdCLDJCQUEyQjtDQUM5Qjs7QUFFRDtJQUNJLDRCQUE0QjtDQUMvQjs7QUFFRDtJQUNJLFVBQVU7SUFDViwyQkFBMkI7SUFDM0IsNkJBQTZCO0NBQ2hDOztBQUVEO0lBQ0kseUNBQXlDO0NBQzVDOztBQUVEO0lBQ0kseUNBQXlDO0NBQzVDOztBQUVEO0lBQ0ksWUFBWTtJQUNaLGFBQWE7SUFDYixlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0QixvQkFBb0I7Q0FDdkI7O0FBRUQ7SUFDSSxjQUFjO0lBQ2QsMkJBQTJCO0lBQzNCLDZCQUE2QjtDQUNoQzs7QUFFRDtJQUNJLGFBQWE7SUFDYiwyQkFBMkI7SUFDM0IsNkJBQTZCO0NBQ2hDOztBQUVEO0lBQ0ksY0FBYztJQUNkLDJCQUEyQjtJQUMzQiw2QkFBNkI7SUFDN0IsOEJBQThCO0lBQzlCLDZCQUE2QjtDQUNoQzs7QUFFRDtJQUNJLGFBQWE7SUFDYiwyQkFBMkI7SUFDM0IsNkJBQTZCO0NBQ2hDOztBQUVEO0lBQ0ksNEJBQTRCO0lBQzVCLDJCQUEyQjtDQUM5Qjs7QUFFRDtJQUNJLGdDQUFnQztDQUNuQzs7QUFFRDtJQUNJLDZCQUE2QjtDQUNoQzs7QUFFRDtJQUNJLDJCQUEyQjtJQUMzQiw2QkFBNkI7Q0FDaEM7O0FBRUQ7SUFDSSxlQUFlO0lBQ2YsZUFBZTtJQUNmLGtDQUFrQztJQUNsQyxnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZixvQkFBb0I7Q0FDdkI7O0FBQ0M7SUFDRSxzQkFBc0I7R0FDdkI7O0FBQ0Q7SUFDRSxrQkFBa0I7R0FDbkI7O0FBQ0Q7SUFDRSxjQUFjO0dBQ2Y7O0FBQ0Q7SUFDRSxnQkFBZ0I7R0FDakI7O0FBQ0Q7SUFDRSx1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLDhCQUE4QjtJQUM5Qix5Q0FBeUM7SUFDekMsdUJBQXVCO0lBQ3ZCLG9CQUFvQjtJQUNwQixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCx1QkFBdUI7SUFDdkIsd0JBQXdCO0lBQ3hCLGFBQWE7R0FDZDs7QUFDSCxRQUFRLFlBQVksQ0FBQyxjQUFjLEVBQUU7O0FBRXJDO0lBQ0ksZ0JBQWdCO0tBQ2YiLCJmaWxlIjoic3JjL2FwcC9wcm96LXByb2ZpbGUvcHJvei1wcm9maWxlL3Byb3otcHJvZmlsZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmxvZ2luLWNvbnRhaW5lciB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBtYXJnaW46IDMlIGF1dG87XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5sb2dpbi1jb250YWluZXIgLmxvZ2luYm94IHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XHJcbiAgICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcclxuICAgIHBhZGRpbmc6IDAgMCAwcHggMDtcclxuICAgIC13ZWJraXQtYm94LXNoYWRvdzogMCAwIDE0cHggcmdiYSgwLDAsMCwuMSk7XHJcbiAgICAtbW96LWJveC1zaGFkb3c6IDAgMCAxNHB4IHJnYmEoMCwwLDAsLjEpO1xyXG4gICAgYm94LXNoYWRvdzogMCAwIDE0cHggcmdiYSgwLDAsMCwuMSk7XHJcbn1cclxuXHJcbi5sb2dpbi1jb250YWluZXIgLmxvZ2luYm94IC5sb2dpbmJveC1zb2NpYWwgLnNvY2lhbC1idXR0b25zIC5idXR0b24tZmFjZWJvb2sge1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjM2I1OTk4O1xyXG4gICAgY29sb3I6ICMzYjU5OTg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICB3aWR0aDogNTBweDtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIG1hcmdpbi1yaWdodDogNDAlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxufVxyXG5cclxuLmxvZ2luLWNvbnRhaW5lciAubG9naW5ib3ggLmxvZ2luYm94LXNvY2lhbCAuc29jaWFsLWJ1dHRvbnMgLmJ1dHRvbi10d2l0dGVyIHtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgIzI5YzFmNjtcclxuICAgIGNvbG9yOiAjMjljMWY2O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgd2lkdGg6IDUwcHg7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDM1JTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbn1cclxuXHJcbi5sb2dpbi1jb250YWluZXIgLmxvZ2luYm94IC5sb2dpbmJveC1zb2NpYWwgLnNvY2lhbC1idXR0b25zIC5idXR0b24tZ29vZ2xlIHtcclxuICAgIGZsb2F0OiByaWdodDtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkICNlZjRmMWQ7XHJcbiAgICBjb2xvcjogI2VmNGYxZDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIHdpZHRoOiA1MHB4O1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxufVxyXG5cclxuXHJcbiAubG9naW5ib3gtc29jaWFsIHtcclxuICAgIHBhZGRpbmc6IDAgMCAwIDAgIWltcG9ydGFudDsgXHJcbn1cclxuXHJcbi5sb2dpbmJveC10aXRsZXtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXNpemU6IDI1cHggIWltcG9ydGFudDtcclxufVxyXG5cclxubGFiZWx7XHJcbiAgICBmb250LXdlaWdodDpib2xkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbmxhYmVsIC5tYW5kYXRvcnl7XHJcbiAgICBjb2xvcjpyZWQ7XHJcbiAgICBmb250LXNpemU6IDE2cHggIWltcG9ydGFudDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5oci1ibHVlLXRpdGxleyAgICBcclxuICAgIGJvcmRlci10b3A6IDNweCBzb2xpZCAjNURCMkZGICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5oci1ibHVleyAgICBcclxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjNURCMkZGICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5sb2dvSW1hZ2V7XHJcbiAgICB3aWR0aDoxMDBweDsgXHJcbiAgICBoZWlnaHQ6MTAwcHg7XHJcbiAgICBtYXJnaW4tdG9wOjVweDsgXHJcbiAgICBib3JkZXItd2lkdGg6IDFweDsgICBcclxuICAgIGJvcmRlci1jb2xvcjogIzVEQjJGRjsgICBcclxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7IFxyXG59XHJcblxyXG4uYWdncmVnYXRlUmF0aW5ne1xyXG4gICAgY29sb3I6I2JjNTY3OTsgXHJcbiAgICBmb250LXNpemU6IDE0cHggIWltcG9ydGFudDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5hZ2dyZWdhdGVSYXRpbmcgc3BhbntcclxuICAgIGNvbG9yOiBncmVlbjtcclxuICAgIGZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQgIWltcG9ydGFudDtcclxufVxyXG5cclxuLnRvdGFsY29zdHtcclxuICAgIGNvbG9yOiNiYzU2Nzk7IFxyXG4gICAgZm9udC1zaXplOiAxNHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXdlaWdodDogYm9sZCAhaW1wb3J0YW50OyBcclxuICAgIG1hcmdpbi1yaWdodDogYXV0byAhaW1wb3J0YW50O1xyXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG8gIWltcG9ydGFudDtcclxufVxyXG5cclxuLnRvdGFsY29zdCBzcGFue1xyXG4gICAgY29sb3I6IGdyZWVuO1xyXG4gICAgZm9udC1zaXplOiAxNHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXdlaWdodDogYm9sZCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ud2VsbHtcclxuICAgIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDtcclxuICAgIHBhZGRpbmc6IDAgMTBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ud2VsbC53aXRoLWZvb3RlciB7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ud2VsbC53aXRoLWhlYWRlciB7XHJcbiAgICBwYWRkaW5nLXRvcDogMTBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4uYnRuIHtcclxuICAgIGZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmZvcm0tdGl0bGUge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBwYWRkaW5nOiA4cHggMDtcclxuICAgIGJvcmRlci1ib3R0b206IDFweCBkYXNoZWQgIzVEQjJGRjtcclxuICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgY29sb3I6ICM1REIyRkY7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG59XHJcbiAgLmNvbnRyb2xzTWFwOmZvY3VzIHtcclxuICAgIGJvcmRlci1jb2xvcjogIzRkOTBmZTtcclxuICB9XHJcbiAgLnRpdGxlIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuICAjaW5mb3dpbmRvdy1jb250ZW50IHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgfVxyXG4gICNtYXAgI2luZm93aW5kb3ctY29udGVudCB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmU7XHJcbiAgfVxyXG4gIC5jb250cm9sc01hcCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbiAgICBib3gtc2hhZG93OiAwIDJweCA2cHggcmdiYSgwLCAwLCAwLCAwLjMpO1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgIGZvbnQtZmFtaWx5OiBSb2JvdG87XHJcbiAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgaGVpZ2h0OiAyOXB4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IDE3cHg7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgb3V0bGluZTogbm9uZTtcclxuICAgIHBhZGRpbmc6IDAgMTFweCAwIDEzcHg7XHJcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcclxuICAgIHdpZHRoOiA0MDBweDtcclxuICB9XHJcbiNtYXAgIHsgd2lkdGg6IDEwMCU7IGhlaWdodDogNDAwcHg7IH1cclxuXHJcbi5nYXB7XHJcbiAgICBtYXJnaW46IDVweCAwcHg7XHJcbiAgICB9XHJcbiAgICAiXX0= */"

/***/ }),

/***/ "./src/app/proz-profile/proz-profile/proz-profile.component.html":
/*!***********************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile/proz-profile.component.html ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<app-commontopprozblueheader></app-commontopprozblueheader>\r\n<!-- <app-prozadmin-sidemenu></app-prozadmin-sidemenu> -->\r\n<div class=\"container\">\r\n  <div class=\"body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12 col-sm-12 col-xs-12\">\r\n        <!-- PROZ PROFILE - STARTS HERE -->\r\n        <div class=\"login-container animated fadeInDown\">\r\n          <div class=\"loginbox bg-white\">\r\n            <div class=\"widget-body\">\r\n              <div id=\"registration-form\">\r\n                <form [formGroup]=\"serProzDetails\" (ngSubmit)=\"onSubmit()\">\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <div class=\"loginbox-title\">PRO PROFILE</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <hr class=\"hr-blue-title\">\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-title\">\r\n                    Company Details\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"companyName\">Company Name </label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"companyName\" placeholder=\"Enter Company Name\"\r\n                            formControlName=\"companyName\" (change)=\"changeBusinessName()\">\r\n                          <i class=\"fa fa-briefcase\"></i>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"website\">Business Type </label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <select class=\"form-control\" id=\"businessType\" name=\"status\" data-bv-field=\"row-title\"\r\n                            formControlName=\"businessType\">\r\n                            <option value=\"\">--Select Business Type--</option>\r\n                            <option value=\"Sole Proprietor\">Sole Proprietor</option>\r\n                            <option value=\"LLC\">LLC</option>\r\n                            <option value=\"Corporation\">Corporation</option>\r\n                          </select>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"firstname\">Contact Person First Name <span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"firstname\" placeholder=\"Enter First Name\"\r\n                            formControlName=\"firstName\" (keypress)=\"keyPress1($event)\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" required>\r\n                          <i class=\"fa fa-user\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.firstName.errors.required\">\r\n                            <p style=\"color: red; font-size: 11px\">* Required Contact Person First Name\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"lastname\">Contact Person Last Name <span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"lastname\" placeholder=\"Enter Last Name\"\r\n                            formControlName=\"lastName\" [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\"\r\n                            required>\r\n                          <i class=\"fa fa-user\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.lastName.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.lastName.errors.required\">\r\n                            <p style=\"color: red; font-size: 11px\">* Required Contact Person Last Name </p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"emailID\">E-Mail Address <span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"email\" readonly class=\"form-control\" id=\"emailID\" placeholder=\"Enter E-Mail ID\"\r\n                            formControlName=\"businessEmail\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.businessEmail.errors }\" required>\r\n                          <i class=\"fa fa-envelope-o\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.businessEmail.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.businessEmail.errors.required\">\r\n                            <p style=\"color: red; font-size: 11px\"> * Required E-Mail Address </p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"mobileNumber\">Business Phone Number <span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" readonly class=\"form-control\" id=\"mobileNumber\"\r\n                            placeholder=\"Enter Mobile Number\" formControlName=\"businessPhone\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.businessPhone.errors }\" required [dropSpecialCharacters]=\"false\"\r\n                            mask=\"000-000-000000\">\r\n                          <i class=\"fa fa-mobile-phone\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.businessPhone.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.businessPhone.errors.required\">\r\n                            <p style=\"color: red; font-size: 11px\"> * Required Business Phone Number\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"businessAddressLine1\">Business Address<span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" placeholder=\"Enter Business Address\"\r\n                            formControlName=\"businessAddressLine1\" (change)=\"changeBusinessName()\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.businessAddressLine1.errors }\">\r\n                          <i class=\"fa fa-envelope\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.businessAddressLine1.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.businessAddressLine1.errors.required\">\r\n                            <p style=\"color: red;font-size: 11px\"> * Required Business Address\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"mobileNumber\">Send Lead Notification To This Phone Number<span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"mobileNumber\" placeholder=\"Enter Mobile Number\"\r\n                            formControlName=\"smsMobile\" [ngClass]=\"{ 'is-invalid': submitted && f.smsMobile.errors }\"\r\n                            required [dropSpecialCharacters]=\"false\"\r\n                            mask=\"000-000-000000\">\r\n                          <i class=\"fa fa-mobile-phone\"></i>\r\n                        </span>\r\n                        <!-- <div *ngIf=\"submitted && f.businessPhone.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.businessPhone.errors.required\">\r\n                            <p style=\"color: red; font-size: 11px\"> * Required Business Phone Number\r\n                            </p>\r\n                          </div>\r\n                        </div> -->\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"city\">City<span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"city\" placeholder=\"Enter City\"\r\n                            formControlName=\"city\" (change)=\"changeBusinessName()\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.city.errors }\">\r\n                          <i class=\"fa fa-envelope\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.city.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.city.errors.required\">\r\n                            <p style=\"color: red; font-size: 11px\">\r\n                              * Required City</p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"state\">State<span class=\"mandatory\">*</span></label>\r\n                        <select class=\"form-control\" id=\"state\" name=\"status\" data-bv-field=\"row-title\"\r\n                          formControlName=\"state\" (change)=\"changeBusinessName()\" required\r\n                          [ngClass]=\"{ 'is-invalid': submitted && f.state.errors }\">\r\n                          <option value=\"\">Select</option>\r\n                          <option *ngFor=\"let data of statesData\" value={{data.stateCode}}>\r\n                            {{data.stateName}}\r\n                          </option>\r\n                        </select>\r\n                        <div *ngIf=\"submitted && f.state.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.state.errors.required\">\r\n                            <p style=\"color: red;font-size: 11px\">* Required State</p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"zipCode\">Zip Code<span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"zipCode\" (change)=\"changeBusinessName()\"\r\n                            placeholder=\"Enter Zip Code\" formControlName=\"zipCode\" minlength=\"5\" maxlength=\"6\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.zipCode.errors }\">\r\n                          <i class=\"fa fa-map-marker\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.zipCode.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.zipCode.errors.required\">\r\n                            <p style=\"color: red;font-size: 11px\">* Required ZipCode </p>\r\n\r\n                          </div>\r\n                          <div *ngIf=\"f.zipCode.errors.minlength\" style=\"color:red;font-size: 11px\">Invalid Zip Code\r\n                            (5-6 digits)\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"website\">Website </label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"website\" placeholder=\"Enter Website\"\r\n                            formControlName=\"webMailId\">\r\n                          <i class=\"fa fa-globe\"></i>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"companyLogo\">Company Logo</label>\r\n                        <div class=\"controls\">\r\n                          <div data-provides=\"fileupload\" class=\"fileupload fileupload-new\">\r\n                            <div style=\"width: 100px; height: 120px;\" class=\"fileupload-new thumbnail\">\r\n                              <img [src]=\"companyLogoImg\" style=\"height:120px;width:100px;\">\r\n                            </div>\r\n                            <div style=\"max-width: 90px; max-height: 110px; line-height: 20px;\"\r\n                              class=\"fileupload-preview fileupload-exists thumbnail\"></div>\r\n                            <div>\r\n                              <input #imageUpload type=\"file\" accept=\"image/*\" id=\"avatar\" (change)=\"selectCompanyLogo($event)\"\r\n                                #fileInput>\r\n                              <button type=\"button\" class=\"btn\" [disabled]=\"!isCompanyLogo\"\r\n                                (click)=\"uploadCompanyLogo()\">Upload</button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div *ngIf=\"progressShow\" class=\"progress-bar1 blue stripes\">\r\n                        <span [style.width.%]=\"percentage\">\r\n                          <p style=\"text-align: center;color:black;font-size:18px;\">{{percentage}}%</p>\r\n                        </span>\r\n                      </div>\r\n                      <br>\r\n                      <div *ngIf=\"progressHide\" class=\"alert alert-block alert-success\" style=\"height:3px;\">\r\n                        <h4 class=\"alert-heading\" style=\"margin-top:-5px;text-align:center;\">Image Uploaded\r\n                          Successfully</h4>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"companyLogo\">Pro-Profile Image</label>\r\n                        <div class=\"controls\">\r\n                          <div data-provides=\"fileupload\" class=\"fileupload fileupload-new\">\r\n                            <div style=\"width: 100px; height: 120px;\" class=\"fileupload-new thumbnail\">\r\n                              <img [src]=\"proProfileImg\" style=\"height:120px;width:100px;\">\r\n                            </div>\r\n                            <div style=\"max-width: 90px; max-height: 110px; line-height: 20px;\"\r\n                              class=\"fileupload-preview fileupload-exists thumbnail\"></div>\r\n                            <div>\r\n                              <input #imageUpload type=\"file\" accept=\"image/*\" id=\"avatar\" (change)=\"selectProfileImg($event)\"\r\n                                #fileInput>\r\n                              <button type=\"button\" class=\"btn\" [disabled]=\"!isProfileImg\"\r\n                                (click)=\"uploadProfileImage()\">Upload</button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div *ngIf=\"proprogressShow\" class=\"progress-bar1 blue stripes\">\r\n                        <span [style.width.%]=\"percentage\">\r\n                          <p style=\"text-align: center;color:black;font-size:18px;\">{{percentage}}%</p>\r\n                        </span>\r\n                      </div>\r\n                      <br>\r\n                      <div *ngIf=\"proprogressHide\" class=\"alert alert-block alert-success\" style=\"height:3px;\">\r\n                        <h4 class=\"alert-heading\" style=\"margin-top:-5px;text-align:center;\">Image Uploaded\r\n                          Successfully</h4>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n\r\n                   \r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <hr class=\"hr-blue\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"form-title\">\r\n                    Yelp Businesses\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-xs-12 col-md-12\">\r\n                      <table class=\"table table-hover table-striped table-bordered\">\r\n                        <tbody>\r\n                          <tr>\r\n                            <td>\r\n                              <label>Select</label>\r\n                            </td>\r\n                            <td>\r\n                              <label>Business Name</label>\r\n                            </td>\r\n                            <td>\r\n                              <label>City</label>\r\n                            </td>\r\n                            <td>\r\n                              <label>State</label>\r\n                            </td>\r\n                            <td>\r\n                              <label>Country</label>\r\n                            </td>\r\n                            <td>\r\n                              <label>Address</label>\r\n                            </td>\r\n                            <td>\r\n                              <label>Zipcode</label>\r\n                            </td>\r\n                          </tr>\r\n                          <ng-container *ngIf=\"!yelpExists\">\r\n                            <tr *ngFor=\"let data of yelpBusinesses\">\r\n                              <td>\r\n                                <div class=\"radio\">\r\n                                  <label>\r\n                                    <input value=\"{{data.name}}\" type=\"radio\" (change)=\"selectYelp(data)\"\r\n                                      class=\"colored-success\">\r\n                                    <span class=\"text\"></span>\r\n                                  </label>\r\n                                </div>\r\n                                <!-- <input type=\"radio\" value=\"select\" [(ngModel)]=\"data.selected\" [ngModelOptions]=\"{standalone: true}\"> -->\r\n                              </td>\r\n                              <td>\r\n                                <label class=\"aggregateRating\" for=\"aggregateRating\">{{data.name}}</label>\r\n                              </td>\r\n                              <td>\r\n                                <label class=\"aggregateRating\" for=\"aggregateRating\">\r\n                                  <span>{{data.location.city}}</span></label>\r\n                              </td>\r\n                              <td>\r\n                                <label class=\"aggregateRating\"\r\n                                  for=\"aggregateRating\"><span>{{data.location.state}}</span></label>\r\n                              </td>\r\n                              <td>\r\n                                <label class=\"aggregateRating\"\r\n                                  for=\"aggregateRating\"><span>{{data.location.country}}</span></label>\r\n                              </td>\r\n                              <td>\r\n                                <label class=\"aggregateRating\"\r\n                                  for=\"aggregateRating\"><span>{{data.location.address1}}</span></label>\r\n                              </td>\r\n                              <td>\r\n                                <label class=\"aggregateRating\"\r\n                                  for=\"aggregateRating\"><span>{{data.location.zip_code}}</span></label>\r\n                              </td>\r\n                            </tr>\r\n                          </ng-container>\r\n                          <ng-container *ngIf=\"yelpExists\">\r\n                            NO YELP BUSINESS FOUND\r\n                          </ng-container>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                  <br><br>\r\n                  <div class=\"form-title\">\r\n                    Social Media Links\r\n                  </div>\r\n\r\n\r\n                  <div class=\"row\">\r\n                    <div class=\"col-xs-12 col-md-12\">\r\n                      <table class=\"table table-hover table-striped table-bordered\">\r\n                        <tbody>\r\n                          <tr>\r\n                            <td>\r\n                              <label class=\"aggregateRating\" for=\"aggregateRating\">Social Media</label>\r\n                            </td>\r\n                            <td>\r\n                              <label class=\"aggregateRating\" for=\"aggregateRating\"> <span>Id</span></label>\r\n                            </td>\r\n                            <td>\r\n                              <label class=\"aggregateRating\" for=\"aggregateRating\"><span>Rating</span></label>\r\n                            </td>\r\n                          </tr>\r\n                          <tr>\r\n                            <td>\r\n                              <label class=\"aggregateRating\" for=\"aggregateRating\">Yelp</label>\r\n                            </td>\r\n                            <td>\r\n                              <label class=\"aggregateRating\" for=\"aggregateRating\"> <span>{{yelpId}}</span></label>\r\n                            </td>\r\n                            <td>\r\n                              <label class=\"aggregateRating\" for=\"aggregateRating\"><span>{{yelpRatingNo}}</span></label>\r\n                            </td>\r\n                          </tr>\r\n                          <tr>\r\n                            <td>\r\n                              <label class=\"aggregateRating\" for=\"aggregateRating\">Google</label>\r\n                            </td>\r\n                            <td>\r\n                              <label class=\"aggregateRating\"\r\n                                for=\"aggregateRating\"><span>{{googleRatingId}}</span></label>\r\n                            </td>\r\n                            <td>\r\n                              <label class=\"aggregateRating\" for=\"aggregateRating\"><span>{{googleRating}}</span></label>\r\n                            </td>\r\n                          </tr>\r\n                          <tr>\r\n                            <td>\r\n                              <label class=\"aggregateRating\" for=\"aggregateRating\">Aggregate Rating From Yelp and\r\n                                Google</label>\r\n                            </td>\r\n                            <td>\r\n                              <label class=\"aggregateRating\" for=\"aggregateRating\"><span></span></label>\r\n                            </td>\r\n                            <td style=\"border: none;\">\r\n                              <label class=\"aggregateRating\"\r\n                                for=\"aggregateRating\"><span>{{aggregateRating}}</span></label>\r\n                            </td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                  <br>\r\n                  <br>\r\n                  <div class=\"form-title\">\r\n                    Business Hours\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n                      <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-12\">\r\n                        <div class=\"form-group\">\r\n                          <label for=\"city\">Day</label>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-12\">\r\n                        <div class=\"form-group\">\r\n                          <label for=\"status\">Status</label>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-12\">\r\n                        <div class=\"form-group\">\r\n                          <label for=\"FromTime\">From Time</label>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-12\">\r\n                        <div class=\"form-group\">\r\n                          <label for=\"ToTime\">To Time</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n                      <div class=\"form-group\">\r\n                        <span class=\"input-icon icon-right\">\r\n                          <div class=\"row\" *ngFor=\"let data of dateTimeData\">\r\n                            <div class=\"col-sm-3 gap\">\r\n                              <!-- <label for=\"city\">Day</label> -->\r\n                              <span class=\"input-icon icon-right\">\r\n                                <input readonly type=\"text\" class=\"form-control\" id=\"day\" value=\"{{data.day}}\">\r\n                                <i class=\"fa fa-calendar\"></i>\r\n                              </span>\r\n                            </div>\r\n                            <!--TASK #490: Pro Profile Screen,Business Hours, In the From Time and To Time,Give CLOSED as an option-->\r\n                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-12 gap\">\r\n                              <!-- <label for=\"status\">Status</label> -->\r\n                              <span class=\"input-icon icon-right\">\r\n                                <select [(ngModel)]=\"data.status\" (ngModelChange)=\"status(data)\"\r\n                                  [ngModelOptions]=\"{standalone: true}\">\r\n                                  <option value=\"OPEN\">OPEN</option>\r\n                                  <option value=\"CLOSED\">CLOSED</option>\r\n                                </select>\r\n                              </span>\r\n                            </div>\r\n                            <!--/TASK #490: Pro Profile Screen,Business Hours, In the From Time and To Time,Give CLOSED as an option-->\r\n                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-12 gap\" *ngIf=\"data.status=='OPEN'\">\r\n                              <!-- <label for=\"FromTime\">From Time</label> -->\r\n                              <span class=\"input-icon icon-right\">\r\n                                <select [(ngModel)]=\"data.fromTime\" [ngModelOptions]=\"{standalone: true}\">\r\n                                  <option value=\"06:00 AM\">06:00 AM</option>\r\n                                  <option value=\"07:00 AM\">07:00 AM</option>\r\n                                  <option value=\"08:00 AM\">08:00 AM</option>\r\n                                  <option value=\"09:00 AM\">09:00 AM</option>\r\n                                  <option value=\"10:00 AM\">10:00 AM</option>\r\n                                  <option value=\"11:00 AM\">11:00 AM</option>\r\n                                  <option value=\"12:00 PM\">12:00 PM</option>\r\n                                  <option value=\"01:00 PM\">01:00 PM</option>\r\n                                  <option value=\"02:00 PM\">02:00 PM</option>\r\n                                  <option value=\"03:00 PM\">03:00 PM</option>\r\n                                  <option value=\"04:00 PM\">04:00 PM</option>\r\n                                  <option value=\"05:00 PM\">05:00 PM</option>\r\n                                  <option value=\"06:00 PM\">06:00 PM</option>\r\n                                  <option value=\"07:00 PM\">07:00 PM</option>\r\n                                  <option value=\"08:00 PM\">08:00 PM</option>\r\n                                  <option value=\"09:00 PM\">09:00 PM</option>\r\n                                  <option value=\"10:00 PM\">10:00 PM</option>\r\n                                </select>\r\n                              </span>\r\n                            </div>\r\n                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-12 gap\" *ngIf=\"data.status=='CLOSED'\">\r\n                              <!-- <label for=\"FromTime\">From Time</label> -->\r\n                              <span class=\"input-icon icon-right\">\r\n                                <select [(ngModel)]=\"data.fromTime\" [ngModelOptions]=\"{standalone: true}\">\r\n                                  <option value=\"\">00:00 AM</option>\r\n                                </select>\r\n                              </span>\r\n                            </div>\r\n                            <!-- <div class=\"col-sm-3 gap\" *ngIf=\"!data.fromTime\">\r\n                              <label for=\"FromTime\">From Time</label> -->\r\n                            <!-- <span class=\"input-icon icon-right\">\r\n                              <select>\r\n                                <option value=\" \">00:00 AM</option>\r\n                              </select>\r\n                            </span>\r\n                          </div> -->\r\n                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-12 gap\" *ngIf=\"data.status=='OPEN'\">\r\n                              <!-- <label for=\"ToTime\">To Time</label> -->\r\n                              <span class=\"input-icon icon-right\">\r\n                                <select [(ngModel)]=\"data.toTime\" [ngModelOptions]=\"{standalone: true}\">\r\n                                  <option value=\"06:00 AM\">06:00 AM</option>\r\n                                  <option value=\"07:00 AM\">07:00 AM</option>\r\n                                  <option value=\"08:00 AM\">08:00 AM</option>\r\n                                  <option value=\"09:00 AM\">09:00 AM</option>\r\n                                  <option value=\"10:00 AM\">10:00 AM</option>\r\n                                  <option value=\"11:00 AM\">11:00 AM</option>\r\n                                  <option value=\"12:00 PM\">12:00 PM</option>\r\n                                  <option value=\"01:00 PM\">01:00 PM</option>\r\n                                  <option value=\"02:00 PM\">02:00 PM</option>\r\n                                  <option value=\"03:00 PM\">03:00 PM</option>\r\n                                  <option value=\"04:00 PM\">04:00 PM</option>\r\n                                  <option value=\"05:00 PM\">05:00 PM</option>\r\n                                  <option value=\"06:00 PM\">06:00 PM</option>\r\n                                  <option value=\"07:00 PM\">07:00 PM</option>\r\n                                  <option value=\"08:00 PM\">08:00 PM</option>\r\n                                  <option value=\"09:00 PM\">09:00 PM</option>\r\n                                  <option value=\"10:00 PM\">10:00 PM</option>\r\n                                </select>\r\n                              </span>\r\n                            </div>\r\n                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-12 gap\" *ngIf=\"data.status=='CLOSED'\">\r\n                              <!-- <label for=\"FromTime\">From Time</label> -->\r\n                              <span class=\"input-icon icon-right\">\r\n                                <select [(ngModel)]=\"data.toTime\" [ngModelOptions]=\"{standalone: true}\">\r\n                                  <option value=\"\">00:00 AM</option>\r\n                                </select>\r\n                              </span>\r\n                            </div>\r\n                            <!-- <div class=\"col-sm-3 gap\" *ngIf=\"!data.toTime\">\r\n                               <label for=\"ToTime\">To Time</label> -->\r\n                            <!-- <span class=\"input-icon icon-right\">\r\n                                <select>\r\n                                  <option value=\" \">00:00 AM</option>\r\n                                </select>\r\n                              </span>\r\n                            </div>  -->\r\n                          </div>\r\n\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <hr class=\"hr-blue\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-title\">\r\n                    Business Information\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"companyProfileDesc\">Business Description <span class=\"mandatory\">*</span></label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"companyProfileDesc\"\r\n                            placeholder=\"Enter Business Description\" formControlName=\"companyProfileDescription\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.companyProfileDescription.errors }\">\r\n                          <i class=\"fa fa-file\"></i>\r\n                        </span>\r\n                        <div *ngIf=\"submitted && f.companyProfileDescription.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.companyProfileDescription.errors.required\">\r\n                            <p style=\"color: red; font-size: 11px\">* Required Business\r\n                              Description\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"inBusinessSince\">In Business Since <span class=\"mandatory\">*</span></label>\r\n                        <select class=\"form-control\" data-bv-field=\"row-title\" formControlName=\"inBusinessSince\"\r\n                          [ngClass]=\"{ 'is-invalid': submitted && f.inBusinessSince.errors }\">\r\n                          <option value=\"\">Select</option>\r\n                          <option *ngFor=\"let data of yearsData\" value={{data.year}}>\r\n                            {{data.year}}\r\n                          </option>\r\n                        </select>\r\n                        <div *ngIf=\"submitted && f.inBusinessSince.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.inBusinessSince.errors.required\">\r\n                            <p style=\"color: red; font-size: 11px\">* Required In Business Since\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"companyProfileDesc\">Are you insured? <span class=\"mandatory\">*</span></label>\r\n                        <div class=\"control-group\">\r\n                          <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                            <div class=\"radio\">\r\n                              <label>\r\n                                <input value=\"yes\" type=\"radio\" class=\"colored-success\" formControlName=\"areYouInsured\">\r\n                                <span class=\"text\"> Yes</span>\r\n                              </label>\r\n                            </div>\r\n                          </div>\r\n                          <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                            <div class=\"radio\">\r\n                              <label>\r\n                                <input value=\"no\" type=\"radio\" class=\"colored-success\" formControlName=\"areYouInsured\">\r\n                                <span class=\"text\"> No</span>\r\n                              </label>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <!-- <div *ngIf=\"submitted && f.areYouInsured.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.areYouInsured.errors.required\">\r\n                            <p style=\"color: red; font-size: 11px\">* Required Are you insured?\r\n                            </p>\r\n                          </div>\r\n                        </div> -->\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"companyProfileDesc\">Are you Bonded? <span class=\"mandatory\">*</span></label>\r\n                        <div class=\"control-group\">\r\n                          <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                            <div class=\"radio\">\r\n                              <label>\r\n                                <input value=\"yes\" type=\"radio\" class=\"colored-success\" formControlName=\"areYouBonded\">\r\n                                <span class=\"text\"> Yes</span>\r\n                              </label>\r\n                            </div>\r\n                          </div>\r\n                          <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                            <div class=\"radio\">\r\n                              <label>\r\n                                <input value=\"no\" type=\"radio\" class=\"colored-success\" formControlName=\"areYouBonded\">\r\n                                <span class=\"text\"> No</span>\r\n                              </label>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"numberEmployees\">No. of Employees in the company? <span\r\n                            class=\"mandatory\">*</span></label>\r\n                        <select class=\"form-control\" id=\"numberEmployees\" name=\"status\" data-bv-field=\"row-title\"\r\n                          formControlName=\"numberOfEmployees\"\r\n                          [ngClass]=\"{ 'is-invalid': submitted && f.numberOfEmployees.errors }\">\r\n                          <option>--Select No. of Employees--</option>\r\n                          <option value=\"<10\">Less than 10</option>\r\n                          <option value=\"11-50\">11-50</option>\r\n                          <option value=\"51-200\">51-200</option>\r\n                          <option value=\"200-More\">200-More</option>\r\n                        </select>\r\n                        <div *ngIf=\"submitted && f.numberOfEmployees.errors\" class=\"invalid-feedback\">\r\n                          <div *ngIf=\"f.numberOfEmployees.errors.required\">\r\n                            <p style=\"color: red; font-size: 11px\">* Required No. of\r\n                              Employees </p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <hr class=\"hr-blue\">\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!---License Details-->\r\n                  <div class=\"form-title\">\r\n                    Trade License Details\r\n                  </div>\r\n\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <form [formGroup]=\"addTradeLicenseList\">\r\n                        <ng-container formArrayName=\"tradeLicense\">\r\n                          <div id=\"field\"\r\n                            *ngFor=\"let item of addTradeLicenseList.get('tradeLicense').controls; let i = index;\"\r\n                            [formGroupName]=\"i\">\r\n                            <div id=\"field0\">\r\n                              <div class=\"row\">\r\n                                <div class=\"col-sm-5\">\r\n                                  <div class=\"form-group\">\r\n                                    <label for=\"stateRegistred\">State Registered In?<span\r\n                                        class=\"mandatory\">*</span></label>\r\n                                    <select class=\"form-control\" id=\"stateRegistred\" name=\"status\"\r\n                                      data-bv-field=\"row-title\" formControlName=\"stateRegisteredIn\"\r\n                                      (change)=\"checkValidationTrade()\">\r\n                                      <option value=\"\">Select</option>\r\n                                      <option *ngFor=\"let data of statesData\" value={{data.stateName}}>\r\n                                        {{data.stateName}}\r\n                                      </option>\r\n                                    </select>\r\n                                    <span\r\n                                      *ngIf=\"item.value.StatusCheck&&item.value.stateRegisteredIn==null||item.value.stateRegisteredIn==''\"\r\n                                      style=\"color:red;font-size: 11px\">* Required State Registered In </span>\r\n\r\n                                  </div>\r\n\r\n                                </div>\r\n                                <div class=\"col-sm-5\">\r\n                                  <div class=\"form-group\">\r\n                                    <label for=\"tradeLicense1\">Trade License Category<span\r\n                                        class=\"mandatory\">*</span></label>\r\n                                    <select class=\"form-control\" id=\"tradeLicense1\" name=\"status\"\r\n                                      data-bv-field=\"row-title\" formControlName=\"tradeLicense\"\r\n                                      (change)=\"checkValidationTrade()\" (click)=\"getSubcat(i)\">\r\n                                      <option value=\"\">Select</option>\r\n                                      <option *ngFor=\"let data of categoriesData\" value={{data.cat_code}}>\r\n                                        {{data.categoryName}}\r\n                                      </option>\r\n                                    </select>\r\n                                    <span\r\n                                      *ngIf=\"item.value.StatusCheck&&item.value.tradeLicense==null||item.value.tradeLicense==''\"\r\n                                      style=\"color:red; font-size: 11px\">* Required Trade License Category </span>\r\n                                  </div>\r\n                                </div>\r\n                                <div class=\"col-sm-2\">\r\n                                  <div class=\"form-group\">\r\n                                    <span class=\"input-icon icon-right\" style=\"margin-top:28px;\">\r\n                                      <a (click)=\"deleteFieldValue(i)\" class=\"btn btn-danger btn-sm shiny\">\r\n                                        <i class=\"fa fa-trash-o\"></i>\r\n                                      </a>\r\n                                    </span>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                              <div class=\"row\">\r\n                                <div class=\"col-sm-5\">\r\n                                  <div class=\"form-group\">\r\n                                    <label for=\"tradeLicense1N\">Trade License #<span class=\"mandatory\">*</span> </label>\r\n                                    <span class=\"input-icon icon-right\">\r\n                                      <input type=\"text\" class=\"form-control\" id=\"tradeLicense1N\"\r\n                                        placeholder=\"Enter Trade License #\" formControlName=\"tradeLicenseNumber\"\r\n                                        (change)=\"checkValidationTrade()\" (change)=\"checkValidationStatus()\"\r\n                                        minlength=\"6\" maxlength=\"6\" mask=\"000000\" [dropSpecialCharacters]=\"true\">\r\n                                      <i class=\"fa fa-file\"></i>\r\n                                    </span>\r\n                                    <span\r\n                                      *ngIf=\"item.value.StatusCheck&&item.value.tradeLicenseNumber==null||item.value.tradeLicenseNumber==''\"\r\n                                      style=\"color:red; font-size: 11px\">*Required Trade License Number</span>\r\n                                    <!-- <div *ngIf=\"submitted && g.tradeLicense.errors\" class=\"invalid-feedback\">\r\n                                      <div *ngIf=\"g.tradeLicense.errors.required\"><b style=\"color: red\">Trade License\r\n                                          Number\r\n                                          Should not Be Empty</b>\r\n                                      </div>\r\n                                    </div> -->\r\n                                  </div>\r\n                                </div>\r\n                                <div class=\"col-sm-5\">\r\n                                  <div class=\"form-group\">\r\n                                    <label for=\"tradeLicense1Exp\">Trade License Expiration<span\r\n                                        class=\"mandatory\">*</span></label>\r\n                                    <span class=\"input-icon icon-right\">\r\n                                      <input type=\"date\" class=\"form-control\" id=\"tradeLicense1Exp\"\r\n                                        placeholder=\"DD/MM/YYYY\" formControlName=\"tradeLicenseExpiration\"\r\n                                        (change)=\"checkValidationTrade()\"  min=\"{{blockifyDate}}\"\r\n                                        onkeydown=\"return false\">\r\n                                      <i class=\"fa fa-calendar\"></i>\r\n                                    </span>\r\n                                    <span\r\n                                      *ngIf=\"item.value.StatusCheck&&item.value.tradeLicenseExpiration==null||item.value.tradeLicenseExpiration=='mm/dd/yyyy'||item.value.tradeLicenseExpiration==''\"\r\n                                      style=\"color:red;font-size: 11px\">*Required Trade License Expiration</span>\r\n                                  </div>\r\n                                </div>\r\n                                <div class=\"col-sm-2\">\r\n\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"row\">\r\n                              <div class=\"col-sm-12\">\r\n                                <hr class=\"hr-blue\">\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </ng-container>\r\n                      </form>\r\n                    </div>\r\n                  </div>\r\n                  <!-- Button -->\r\n\r\n\r\n\r\n\r\n                  <!-- <div class=\"row\" *ngIf=\"addTradeLicenseList.get('tradeLicense').value.length == '1'\">\r\n                    <div class=\"col-sm-3\">\r\n                      <input type=\"button\" class=\"btn btn-azure shiny btn-block\" value=\"+ Add Trade License\"\r\n                        id=\"add-more\" (click)=\"addFieldValue()\">\r\n                    </div>\r\n                  </div> -->\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-3\">\r\n                      <input type=\"button\" [disabled]=\"tradeStatusCheck\" class=\"btn btn-azure shiny btn-block\"\r\n                        value=\"+ Add Another Trade License\" id=\"add-more\" (click)=\"addFieldValue()\">\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!---/License Details-->\r\n\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <hr class=\"hr-blue\">\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-title\">\r\n                    Areas of Expertise\r\n                  </div>\r\n\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"areasofexpertise\">Areas of Expertise</label>\r\n                        <div style=\"overflow:auto;width:100%;height:100px\">\r\n                          <div *ngFor=\"let data of subCategoriesData\">\r\n                            <div *ngFor=\"let subCat of data.subCategories\">\r\n                              <label>\r\n                                <input type=\"checkbox\" [(ngModel)]=\"subCat.checked\"\r\n                                  [ngModelOptions]=\"{standalone: true}\" (ngModelChange)=\"checkCategory(data,subCat)\">\r\n                                <span class=\"text\">{{subCat.subcategoryName}}</span>\r\n                              </label>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <!-- <label for=\"areasofexpertise\">Areas of Expertise</label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <select class=\"form-control\" name=\"areaOfExpertise\" data-bv-field=\"row-title\" formControlName=\"areaOfExpertise\"\r\n                            multiple>\r\n                            <option value=\"\">Select</option>\r\n                            <option *ngFor=\"let data of categoriesData\" value={{data.categoryName}}>\r\n                              {{data.categoryName}}\r\n                            </option>\r\n                          </select>\r\n                        </span> -->\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"additionalInfo\">Additional Info</label>\r\n                        <span class=\"input-icon icon-right\">\r\n                          <input type=\"text\" class=\"form-control\" id=\"additionalInfo\"\r\n                            placeholder=\"Enter Additional Info\" formControlName=\"additionalInfo\">\r\n                          <i class=\"fa fa-file\"></i>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"warrantyoffered\">Warranty Offered </label>\r\n                        <div class=\"control-group\">\r\n                          <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                            <div class=\"radio\">\r\n                              <label>\r\n                                <input value=\"yes\" type=\"radio\" class=\"colored-success\"\r\n                                  formControlName=\"warrantyOffered\">\r\n                                <span class=\"text\">Yes</span>\r\n                              </label>\r\n                            </div>\r\n                          </div>\r\n                          <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                            <div class=\"radio\">\r\n                              <label>\r\n                                <input value=\"no\" type=\"radio\" class=\"colored-success\"\r\n                                  formControlName=\"warrantyOffered\">\r\n                                <span class=\"text\">No</span>\r\n                              </label>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"ccAccepted\">Credit Card Accepted? </label>\r\n                        <div class=\"control-group\">\r\n                          <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                            <div class=\"radio\">\r\n                              <label>\r\n                                <input value=\"yes\" type=\"radio\" class=\"colored-success\"\r\n                                  formControlName=\"creditCardAccepted\">\r\n                                <span class=\"text\"> Yes</span>\r\n                              </label>\r\n                            </div>\r\n                          </div>\r\n                          <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                            <div class=\"radio\">\r\n                              <label>\r\n                                <input value=\"no\" type=\"radio\" class=\"colored-success\" checked=\"checked\"\r\n                                  formControlName=\"creditCardAccepted\">\r\n                                <span class=\"text\"> No</span>\r\n                              </label>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                      <div class=\"form-group\">\r\n                        <label for=\"freeEstimates\">Free Estimates </label>\r\n                        <div class=\"control-group\">\r\n                          <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                            <div class=\"radio\">\r\n                              <label>\r\n                                <input value=\"yes\" type=\"radio\" class=\"colored-success\" formControlName=\"freeEstimated\">\r\n                                <span class=\"text\"> Yes</span>\r\n                              </label>\r\n                            </div>\r\n                          </div>\r\n                          <div class=\"col-lg-4 col-sm-4 col-xs-4\">\r\n                            <div class=\"radio\">\r\n                              <label>\r\n                                <input value=\"no\" type=\"radio\" class=\"colored-success\" checked=\"checked\"\r\n                                  formControlName=\"freeEstimated\">\r\n                                <span class=\"text\"> No</span>\r\n                              </label>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-12\">\r\n                      <div class=\"form-group\">\r\n                        <hr class=\"hr-blue\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-sm-2\">\r\n                      <div class=\"form-group\"></div>\r\n                    </div>\r\n                    <!-- <div class=\"col-sm-4\">\r\n                      <div class=\"form-group\">\r\n                        <input type=\"button\" class=\"btn btn-primary shiny btn-block\" value=\"Remind Me Later\"\r\n                          (click)=\"remindMeLater()\">\r\n                      </div>\r\n                    </div> -->\r\n                    <div class=\"col-sm-8\">\r\n                      <div class=\"form-group\">\r\n                        <input type=\"submit\" class=\"btn btn-success shiny btn-block\" value=\"Save & Continue\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-sm-2\">\r\n                      <div class=\"form-group\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <!-- /PROZ PROFILE - STARTS HERE -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./src/app/proz-profile/proz-profile/proz-profile.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/proz-profile/proz-profile/proz-profile.component.ts ***!
  \*********************************************************************/
/*! exports provided: ProzProfileComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProzProfileComponent", function() { return ProzProfileComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _utilities_imageupload__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utilities/imageupload */ "./src/utilities/imageupload.ts");
/* harmony import */ var _global_global__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/global */ "./src/global/global.ts");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm5/ngx-toastr.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _utilities_beyond__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../utilities/beyond */ "./src/utilities/beyond.ts");
/* harmony import */ var _utilities_customValidators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../utilities/customValidators */ "./src/utilities/customValidators.ts");
/* harmony import */ var _utilities_geocode_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../utilities/geocode.service */ "./src/utilities/geocode.service.ts");











//  declare var $: any;
//  declare var google: any;
var DEFAULT_COMPANY_LOGO = "assets/img/proz/company_default.jpg";
var DEFAULT_PROFILE_IMG = "assets/img/default person.jpg";
var config = { headers: { "content-type": "multipart/form-data" } };
var ProzProfileComponent = /** @class */ (function () {
    function ProzProfileComponent(beyond, router, formBuilder, activatedRoute, http, toastr, ngZone, geocodingService) {
        this.beyond = beyond;
        this.router = router;
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.http = http;
        this.toastr = toastr;
        this.ngZone = ngZone;
        this.geocodingService = geocodingService;
        //ARRAYS FOR USE
        this.yelpBusinesses = [];
        this.prozDetailsData = [];
        this.ratingsDetails = [];
        this.statesData = [];
        this.categoriesData = [];
        this.yearsData = [];
        this.dateTimeData = [];
        this.areaOfExpertise = [];
        this.areaOfExpertiseTemp = [];
        //ARRAYS FOR USE
        this.yelpExists = true;
        this.coordinates = {
            latitude: 0,
            longitude: 0
        };
        this.percentage = 0;
        this.progressShow = false;
        this.progressHide = false;
        this.proprogressShow = false;
        this.proprogressHide = false;
        this.editProfile = false;
        this.secFormValidation = false;
        this.disableCheck = false;
        this.yelpRatingNo = 0;
        this.googleRating = 0;
        this.aggregateRating = 0;
        this.globalUrl = _global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url;
        this.yelpValidate = true;
        this.tradeStatusCheck = false;
        this.submitted = false;
        this.StatusCheck = false;
        this.subCategoriesData = [];
        this.subcatArray = [];
        this.displayZipcodes = [];
        this.companyLogoImg = DEFAULT_COMPANY_LOGO;
        this.proProfileImg = DEFAULT_PROFILE_IMG;
        this.companyLogoImgToSave = DEFAULT_COMPANY_LOGO;
        this.proProfileImgToSave = DEFAULT_PROFILE_IMG;
        this.isProfileImg = false;
        this.isCompanyLogo = false;
        this.addTradeLicenseList = this.formBuilder.group({
            tradeLicense: this.formBuilder.array([], _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required)
        });
    }
    ProzProfileComponent.prototype.ngAfterViewInit = function () {
        document.body.scrollTop = document.documentElement.scrollTop = 0;
    };
    ProzProfileComponent.prototype.ngOnInit = function () {
        this.beyond.beyondAdmin();
        this.getMasterDateTime();
        this.loginData = this.activatedRoute.snapshot.params['prozId'];
        this.getListOfStates();
        this.getYears();
        this.getListOfCategories();
        this.listRatingDetails(this.activatedRoute.snapshot.params['prozId']);
        this.prozDetails(this.activatedRoute.snapshot.params['prozId']);
        this.viewProzDetails(this.activatedRoute.snapshot.params['prozId']);
        this.serProzDetails = this.formBuilder.group({
            companyName: [''],
            webMailId: [''],
            firstName: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            lastName: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            businessPhone: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            smsMobile: [''],
            businessEmail: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]("", _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].compose([_utilities_customValidators__WEBPACK_IMPORTED_MODULE_9__["CustomValidators"].emailValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required])),
            businessType: [''],
            businessHours: [''],
            businessAddressLine1: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            businessAddressLine2: [''],
            suite: [''],
            city: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            state: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            zipCode: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            // image: [''],
            companyProfileDescription: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            inBusinessSince: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            // stateRegisteredIn: ['', Validators.required],
            // tradeLicense: ['', Validators.required],
            // tradeLicenseNumber: ['', Validators.required],
            // tradeLicenseExpiration: ['', Validators.required],
            areYouInsured: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('no'),
            areYouBonded: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('no'),
            numberOfEmployees: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            areaOfExpertise: [''],
            additionalInfo: [''],
            warrantyOffered: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('no'),
            creditCardAccepted: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('yes'),
            freeEstimated: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('no'),
        });
        /*current date and future Date*/
        this.blockifyDate = new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getDate();
        var day = new Date().getDate();
        var month = new Date().getMonth() + 1;
        if (day < 10) {
            var formattedDay = "0" + day;
        }
        else {
            var formattedDay = "" + day;
        }
        if (month < 10) {
            var formattedMonth = "0" + month;
        }
        else {
            var formattedMonth = "" + month;
        }
        this.blockifyDate = new Date().getFullYear() + '-' + formattedMonth + '-' + formattedDay;
        //var splitDtae = params.start_date.split('-')
        //  var convertedDate = splitDtae[2] + "-" + splitDtae[1] + "-" + splitDtae[0]
        /*current date and future Date*/
    };
    /*current date and future Date*/
    ProzProfileComponent.prototype.departureReturnDate = function (date) {
        this.min = date;
    };
    Object.defineProperty(ProzProfileComponent.prototype, "f", {
        get: function () { return this.serProzDetails.controls; },
        enumerable: true,
        configurable: true
    });
    //TRADE LICENSE GENERATION
    ProzProfileComponent.prototype.createTradeLicense = function (prozProfileData) {
        return this.formBuilder.group({
            stateRegisteredIn: [prozProfileData.stateRegisteredIn, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            tradeLicense: [prozProfileData.tradeLicense, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
            tradeLicenseNumber: [prozProfileData.tradeLicenseNumber, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].maxLength(6)],
            tradeLicenseExpiration: [prozProfileData.tradeLicenseExpiration, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required]
        });
    };
    ProzProfileComponent.prototype.addFieldValue = function () {
        this.items = this.addTradeLicenseList.get('tradeLicense');
        this.items.push(this.createTradeLicense(''));
        this.checkValidationTrade();
    };
    Object.defineProperty(ProzProfileComponent.prototype, "tradeLicenseValues", {
        get: function () {
            return this.addTradeLicenseList.get('tradeLicense');
        },
        enumerable: true,
        configurable: true
    });
    ProzProfileComponent.prototype.deleteFieldValue = function (index) {
        this.subCategoriesData = this.subCategoriesData.filter(function (val) { return val.unique != index; });
        this.tradeLicenseValues.removeAt(index);
        this.checkValidationTrade();
    };
    //TRADE LICENSE GENERATION
    ProzProfileComponent.prototype.listRatingDetails = function (prozCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/listRatings/' + prozCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.ratingsDetails = response.response;
                return false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    // seting image prview based on flag
    ProzProfileComponent.prototype.setImagePreview = function (file, isCompanyLogo) {
        var _this = this;
        var picReader = new FileReader();
        picReader.onload = function (e) {
            if (isCompanyLogo) {
                _this.companyLogoImg = e.target.result;
            }
            else {
                _this.proProfileImg = e.target.result;
            }
        };
        picReader.readAsDataURL(file);
    };
    ProzProfileComponent.prototype.selectCompanyLogo = function (event) {
        this.companyLogoImg = DEFAULT_COMPANY_LOGO;
        var file = (event.target.files || [null])[0];
        if (file) {
            this.isCompanyLogo = true;
            this.companyLogoFile = file;
            this.setImagePreview(file, true);
        }
        this.progressShow = false;
        this.progressHide = false;
    };
    ProzProfileComponent.prototype.uploadCompanyLogo = function () {
        var _this = this;
        var url = _global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/imageUpload';
        var formData = new FormData();
        formData.append('image', this.companyLogoFile);
        var xhr = new XMLHttpRequest();
        xhr.open('post', url, true);
        xhr.onerror = function (err) { return console.log(err); };
        xhr.onload = function () {
            var a = JSON.parse(xhr.responseText);
            _this.companyLogoImgToSave = a.imagePath;
        };
        xhr.upload.onprogress = function (e) {
            if (e.lengthComputable) {
                _this.percentage = (e.loaded / e.total) * 100;
                _this.progressShow = true;
                _this.progressHide = false;
                if (_this.percentage === 100) {
                    _this.progressShow = false;
                    _this.progressHide = true;
                    _this.imageUploadVariable.nativeElement.value = "";
                    _this.isCompanyLogo = false;
                }
            }
        };
        xhr.send(formData);
    };
    // profile image start
    ProzProfileComponent.prototype.selectProfileImg = function (event) {
        this.proProfileImg = DEFAULT_PROFILE_IMG;
        var file = (event.target.files || [null])[0];
        if (file) {
            this.isProfileImg = true;
            this.profileImageFile = file;
            this.setImagePreview(file, false);
        }
        this.proprogressShow = false;
        this.proprogressHide = false;
    };
    ProzProfileComponent.prototype.uploadProfileImage = function () {
        var _this = this;
        var url = _global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/proimageUpload';
        var formData = new FormData();
        formData.append('image', this.profileImageFile);
        var xhr = new XMLHttpRequest();
        xhr.open('post', url, true);
        xhr.onerror = function (e) { return console.log(e); };
        xhr.onload = function () {
            var a = JSON.parse(xhr.responseText);
            _this.proProfileImgToSave = a.imagePath;
            _this.imagepathName = a.name;
        };
        xhr.upload.onprogress = function (e) {
            if (e.lengthComputable) {
                _this.percentage = (e.loaded / e.total) * 100;
                _this.proprogressShow = true;
                _this.proprogressHide = false;
                if (_this.percentage === 100) {
                    _this.proprogressShow = false;
                    _this.proprogressHide = true;
                    _this.imageUploadVariable.nativeElement.value = "";
                    _this.isProfileImg = false;
                }
            }
        };
        xhr.send(formData);
    };
    //Profile image end
    //PROZ DETAILS
    ProzProfileComponent.prototype.prozDetails = function (prozId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getProzDetails/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozDetailsData = response.response;
                console.log(_this.prozDetailsData);
                var addressMixed = _this.prozDetailsData[0].businessAddress + "," + _this.prozDetailsData[0].city + "," + _this.prozDetailsData[0].zipCode;
                _this.geocodingService.getLatLongViaZipcode(addressMixed)
                    .subscribe(function (address) {
                    if (address == undefined || address == '') {
                        _this.coordinates.latitude = 0;
                        _this.coordinates.longitude = 0;
                    }
                    else {
                        var coordObj = {
                            lat: address.lat,
                            lng: address.lng,
                        };
                        _this.coordinates.latitude = address.lat;
                        _this.coordinates.longitude = address.lng;
                    }
                    // google.maps.event.addDomListener(window, 'load', this.initializeZipMap(coordObj));
                });
                _this.serProzDetails.get("companyName").setValue(_this.prozDetailsData[0].typeOfBusiness);
                _this.serProzDetails.get("firstName").setValue(_this.prozDetailsData[0].firstName);
                _this.serProzDetails.get("lastName").setValue(_this.prozDetailsData[0].lastName);
                _this.serProzDetails.get("businessPhone").setValue(_this.prozDetailsData[0].mobileNumber);
                _this.serProzDetails.get("smsMobile").setValue(_this.prozDetailsData[0].smsMobile);
                _this.serProzDetails.get("businessEmail").setValue(_this.prozDetailsData[0].emailId);
                _this.serProzDetails.get("businessType").setValue(_this.prozDetailsData[0].businessType);
                _this.serProzDetails.get("businessAddressLine1").setValue(_this.prozDetailsData[0].businessAddress);
                _this.serProzDetails.get("state").setValue(_this.prozDetailsData[0].state);
                _this.serProzDetails.get("city").setValue(_this.prozDetailsData[0].city);
                _this.serProzDetails.get("zipCode").setValue(_this.prozDetailsData[0].zipcode);
                _this.changeBusinessName();
                return false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //PROZ DETAILS
    //STATES
    ProzProfileComponent.prototype.getListOfStates = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getListOfStates', options)
            .subscribe(function (data) {
            var response = data.json();
            _this.statesData = response.response;
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //STATES
    //YEARS
    ProzProfileComponent.prototype.getYears = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getYears', options)
            .subscribe(function (data) {
            var response = data.json();
            _this.yearsData = response.response;
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //YEARS
    //CATEGORIES
    ProzProfileComponent.prototype.getListOfCategories = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getListOfCategories', options)
            .subscribe(function (data) {
            var response = data.json();
            _this.categoriesData = response.response;
            _this.categoriesData.forEach(function (e) {
                e.checked = false;
            });
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //CATEGORIES
    ProzProfileComponent.prototype.getSubcat = function (i) {
        var trade = this.addTradeLicenseList.get('tradeLicense').value[i];
        console.log("index" + i);
        this.getListOfSubCategories(trade['tradeLicense'], i);
    };
    //SUB CATEGORIES
    ProzProfileComponent.prototype.getListOfSubCategories = function (tradeLicense, index) {
        var _this = this;
        console.log("categorys" + JSON.stringify(tradeLicense));
        this.getCatCode(tradeLicense);
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/subcategories/' + tradeLicense, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status === 200) {
                _this.subCategoriesData = _this.subCategoriesData.filter(function (val) { return val.unique != index; });
                console.log(response);
                //this.subCategoriesData=response.response
                console.log(_this.subCategoriesData);
                response.response.forEach(function (e) {
                    console.log(_this.addTradeLicenseList.get('tradeLicense').value);
                    _this.subCategoriesData.push({
                        unique: index,
                        subCategories: [e]
                    });
                    console.log("subcatdata1" + JSON.stringify(_this.subCategoriesData));
                });
                _this.subCategoriesData.forEach(function (e, i) {
                    e.checked = false;
                    console.log(e);
                    if (i == _this.subCategoriesData.length - 1) {
                        _this.subCategoriesData.forEach(function (g, i) {
                            g.subCategories.forEach(function (h) {
                                _this.subcatArray.forEach(function (f) {
                                    if (f == h.subcat_code) {
                                        h.checked = true;
                                    }
                                });
                            });
                        });
                    }
                });
                // this.addTradeLicenseList.get('tradeLicense').value.forEach((e) => {
                //   console.log(e)
                //   console.log(this.subCategoriesData)
                //   this.subCategoriesData.forEach((f)=>{
                //     if(f.cat_code == e.tradeLicense){
                //     }else{
                //       this.subCategoriesData.splice(f)
                //     }
                //   })
                //   //this.subCategoriesData = this.subCategoriesData.filter(val => val.cat_code == e.tradeLicense)
                // })
                console.log("subcatdata2" + JSON.stringify(_this.subCategoriesData));
            }
            // this.subCategoriesData.forEach((e) => {
            //   e.checked = false;
            // })
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //SUB CATEGORIES
    //SAVE PROFILE
    ProzProfileComponent.prototype.onSubmit = function () {
        var _this = this;
        this.submitted = true;
        console.log("stateRegisteredInvalue");
        this.disableCheck = false;
        this.addTradeLicenseList.get('tradeLicense').value.forEach(function (e, i) {
            if (e.stateRegisteredIn == "" || e.tradeLicense == "" || e.tradeLicenseExpiration == "" || e.tradeLicenseNumber == "") {
                console.log('The empty');
                e.StatusCheck = true;
                _this.disableCheck = true;
                return false;
            }
            if (e.stateRegisteredIn == null || e.tradeLicense == null || e.tradeLicenseExpiration == null || e.tradeLicenseNumber == null) {
                console.log('The empty');
                e.StatusCheck = true;
                _this.disableCheck = true;
                return false;
            }
            else if (e.stateRegisteredIn !== "" && e.tradeLicense !== "" && e.tradeLicenseExpiration !== "" && e.tradeLicenseNumber !== "") {
                console.log('The not empty');
                e.StatusCheck = false;
            }
            if (i == _this.addTradeLicenseList.get('tradeLicense').value.length - 1) {
                console.log(e.StatusCheck);
                if (_this.disableCheck == true || _this.serProzDetails.invalid) {
                    return false;
                }
                else {
                    var state = [];
                    var tradeLicense = [];
                    var tradeLicenseNumber = [];
                    var tradeLicenseExpiration = [];
                    var tradeLicenseCategoryNames = [];
                    _this.addTradeLicenseList.get('tradeLicense').value.forEach(function (e) {
                        state.push(e.stateRegisteredIn);
                        tradeLicense.push(e.tradeLicense);
                        tradeLicenseNumber.push(e.tradeLicenseNumber);
                        tradeLicenseExpiration.push(e.tradeLicenseExpiration);
                        tradeLicenseCategoryNames.push(e.tradeLicense);
                    });
                    var obj_1 = {
                        "prozId": _this.activatedRoute.snapshot.params['prozId'],
                        "companyName": _this.serProzDetails.value.companyName,
                        "webMailId": _this.serProzDetails.value.webMailId,
                        "firstName": _this.serProzDetails.value.firstName,
                        "lastName": _this.serProzDetails.value.lastName,
                        "businessPhone": _this.serProzDetails.value.businessPhone,
                        "smsMobile": _this.serProzDetails.value.smsMobile,
                        "businessEmail": _this.serProzDetails.value.businessEmail,
                        "businessHours": _this.serProzDetails.value.businessHours,
                        "businessDays": _this.serProzDetails.value.businessDays,
                        "businessType": _this.serProzDetails.value.businessType,
                        "businessAddressLine1": _this.serProzDetails.value.businessAddressLine1,
                        "businessAddressLine2": _this.serProzDetails.value.businessAddressLine2,
                        "suite": _this.serProzDetails.value.suite,
                        "city": _this.serProzDetails.value.city,
                        "state": _this.serProzDetails.value.state,
                        "zipCode": _this.serProzDetails.value.zipCode,
                        "proProfileImage": _this.proProfileImgToSave,
                        "image": _this.companyLogoImgToSave,
                        "companyProfileDescription": _this.serProzDetails.value.companyProfileDescription,
                        "inBusinessSince": _this.serProzDetails.value.inBusinessSince,
                        "areYouInsured": _this.serProzDetails.value.areYouInsured,
                        "areYouBonded": _this.serProzDetails.value.areYouBonded,
                        "numberOfEmployees": _this.serProzDetails.value.numberOfEmployees,
                        "stateRegisteredIn": state,
                        "tradeLicense": tradeLicense,
                        "tradeLicenseNumber": tradeLicenseNumber,
                        "tradeLicenseExpiration": tradeLicenseExpiration,
                        "areaOfExpertise": _this.areaOfExpertiseTemp,
                        "additionalInfo": _this.serProzDetails.value.additionalInfo,
                        "warrantyOffered": _this.serProzDetails.value.warrantyOffered,
                        "creditCardAccepted": _this.serProzDetails.value.creditCardAccepted,
                        "freeEstimated": _this.serProzDetails.value.freeEstimated,
                        "latitude": _this.coordinates.latitude,
                        "longitude": _this.coordinates.longitude,
                        "yelpBusinessId": '' + _this.yelpId,
                        "googleBusinessId": '' + _this.googleRatingId,
                        "yelpRating": '' + _this.yelpRatingNo,
                        "googleRating": '' + _this.googleRating,
                        "aggregateRating": '' + _this.aggregateRating
                    };
                    console.log('profile', obj_1.image);
                    console.log('logo', obj_1.proProfileImage);
                    _this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/addProfile', obj_1)
                        .subscribe(function (data) {
                        var response = data.json();
                        if (response.status === 200) {
                            _this.saveDateTime();
                            _this.getcountyDetails(obj_1.city, obj_1.zipCode, obj_1.prozId);
                        }
                        else {
                            _this.toastr.warning('Profile Creation Failed...');
                        }
                    }, function (error) {
                        _this.toastr.warning('Unable to connect to server');
                    });
                }
            }
        });
    };
    //SAVE PROFILE
    //REMIND ME LATER
    ProzProfileComponent.prototype.remindMeLater = function () {
        this.router.navigate(['/prozadmin-dashboard']);
    };
    //REMIND ME LATER
    //MASTER DATE TIME
    ProzProfileComponent.prototype.getMasterDateTime = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/firstmasterDateTime', options)
            .subscribe(function (data) {
            var response = data.json();
            _this.dateTimeData = response.response;
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //MASTER DATE TIME
    ProzProfileComponent.prototype.status = function (data) {
        if (data.status == "CLOSED") {
            data.fromTime = "";
            data.toTime = "";
        }
        else {
            data.fromTime = "09:00 AM";
            data.toTime = "06:00 PM";
        }
    };
    //SAVE DATE
    //TASK #490: Pro Profile Screen,Business Hours, In the From Time and To Time,Give CLOSED as an option
    ProzProfileComponent.prototype.saveDateTime = function () {
        var _this = this;
        // data.editButton = false;
        // data.saveButton = true;
        var obj = {
            prozId: this.loginData,
            dateTimeArray: this.dateTimeData,
        };
        console.log('dateTimeArray' + JSON.stringify(obj));
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/saveMasterDateTime', obj)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                console.log("Pro Profile Component: Business Hours saved Successfully");
            }
            else {
                return false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //SAVE DATE
    ///TASK #490: Pro Profile Screen,Business Hours, In the From Time and To Time,Give CLOSED as an option
    //VIEW PROZ DETAILS
    ProzProfileComponent.prototype.viewProzDetails = function (prozCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getProzProfile/' + prozCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozProfileData = response.response[0];
                if (_this.prozProfileData.areaOfExpertise.length > 0) {
                    _this.subcatArray = _this.prozProfileData.areaOfExpertise.split(',');
                    if (_this.subcatArray.length > 0) {
                        _this.areaOfExpertiseTemp = _this.subcatArray;
                    }
                }
                _this.prozProfileData.tradeDetails = [];
                _this.prozProfileData.stateRegisteredIn.split(',').forEach(function (e, i) {
                    var tradeDetailsObj = {
                        stateRegisteredIn: _this.prozProfileData.stateRegisteredIn.split(',')[i],
                        tradeLicense: _this.prozProfileData.tradeLicense.split(',')[i],
                        tradeLicenseNumber: _this.prozProfileData.tradeLicenseNumber.split(',')[i],
                        tradeLicenseExpiration: _this.prozProfileData.tradeLicenseExpiration.split(',')[i],
                    };
                    _this.prozProfileData.tradeDetails.push(tradeDetailsObj);
                    if (i === _this.prozProfileData.stateRegisteredIn.split(',').length - 1) {
                        _this.prozProfileData.tradeDetails.forEach(function (e, i) {
                            _this.items = _this.addTradeLicenseList.get('tradeLicense');
                            _this.items.push(_this.createTradeLicense(e));
                            _this.getSubcat(i);
                        });
                    }
                });
                _this.serProzDetails = _this.formBuilder.group({
                    companyName: [_this.prozProfileData.companyName, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    webMailId: [_this.prozProfileData.webMailId],
                    firstName: [_this.prozProfileData.firstName, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    lastName: [_this.prozProfileData.lastName, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    businessPhone: [_this.prozProfileData.businessPhone, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    smsMobile: [_this.prozProfileData.smsMobile],
                    businessEmail: [_this.prozProfileData.businessEmail, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    businessType: [_this.prozProfileData.bussinessType, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    businessHours: [_this.prozProfileData.businessHours],
                    businessAddressLine1: [_this.prozProfileData.businessAddressLine1, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    businessAddressLine2: [_this.prozProfileData.businessAddressLine2],
                    suite: [_this.prozProfileData.suite],
                    city: [_this.prozProfileData.city, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    state: [_this.prozProfileData.state, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    zipCode: [_this.prozProfileData.zipCode, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    image: [''],
                    proProfileImage: [''],
                    companyProfileDescription: [_this.prozProfileData.companyProfileDescription, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    inBusinessSince: [_this.prozProfileData.inBusinessSince, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    areYouInsured: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('no'),
                    areYouBonded: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('no'),
                    numberOfEmployees: [_this.prozProfileData.numberOfEmployees, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required],
                    stateRegisteredIn: [_this.prozProfileData.stateRegisteredIn],
                    tradeLicense: [_this.prozProfileData.tradeLicense],
                    tradeLicenseNumber: [_this.prozProfileData.tradeLicenseNumber, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].minLength(6)],
                    tradeLicenseExpiration: [_this.prozProfileData.tradeLicenseExpiration],
                    areaOfExpertise: [_this.prozProfileData.areaOfExpertise],
                    additionalInfo: [_this.prozProfileData.additionalInfo],
                    warrantyOffered: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('no'),
                    creditCardAccepted: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('yes'),
                    freeEstimated: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('no'),
                });
                if (_this.prozProfileData.image === DEFAULT_COMPANY_LOGO) {
                    console.log('img');
                    _this.companyLogoImg = DEFAULT_COMPANY_LOGO;
                }
                else {
                    console.log('nnoimg');
                    _this.companyLogoImg = _global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + _this.prozProfileData.image;
                }
                if (_this.prozProfileData.proProfileImage === DEFAULT_PROFILE_IMG) {
                    console.log('img');
                    _this.proProfileImg = DEFAULT_PROFILE_IMG;
                }
                else {
                    console.log('nnoimg');
                    _this.proProfileImg = _global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + _this.prozProfileData.proProfileImage;
                }
                _this.editProfile = true;
            }
            else {
                _this.prozDetails(_this.activatedRoute.snapshot.params['prozId']);
                _this.addTradeLicenseList = _this.formBuilder.group({
                    tradeLicense: _this.formBuilder.array([_this.createTradeLicense('')], [_angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required])
                });
                _this.editProfile = false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //VIEW PROZ DETAILS
    //TRADE LICENSE EXPIRATION
    ProzProfileComponent.prototype.tradeLicenseExpiration = function () {
        var date = this.serProzDetails.controls.tradeLicenseExpiration.value;
        var changeDate = new Date(date);
    };
    //TRADE LICENSE EXPIRATION
    //BUSINESS API SOCIAL MEDIA
    ProzProfileComponent.prototype.changeBusinessName = function () {
        var _this = this;
        console.log('The business');
        if (this.serProzDetails.controls.companyName.value != '' && this.serProzDetails.controls.businessAddressLine1.value != '' && this.serProzDetails.controls.city.value != '' && this.serProzDetails.controls.state.value != '' && this.serProzDetails.controls.zipCode.value != '') {
            //COMMON OBJECT FOR FETCHING SOCIAL MEDIA RATING
            var businessObj = {
                name: this.serProzDetails.controls.companyName.value,
                address1: this.serProzDetails.controls.businessAddressLine1.value,
                city: this.serProzDetails.controls.city.value,
                country: 'US',
                state: this.serProzDetails.controls.state.value,
                zipcode: this.serProzDetails.controls.zipCode.value,
            };
            console.log(businessObj);
            //COMMON OBJECT FOR FETCHING SOCIAL MEDIA RATING
            //YELP DETAILS FETCHER
            this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getYelpBusiness', businessObj)
                .subscribe(function (data) {
                var response = data.json();
                console.log('THis is data ' + JSON.stringify(businessObj));
                if (response.businesses == "") {
                    console.log('THe business is empty');
                    _this.yelpExists = true;
                    _this.yelpId = "NO YELP ID FOUND";
                    _this.yelpRatingNo = 'NA';
                    _this.googleRatingId = "NO GOOGLE ID FOUND";
                    _this.googleRating = 'NA';
                    _this.aggregateRating = 'NA';
                    return false;
                }
                if (response.businesses !== null) {
                    console.log('THe business is not empty');
                    _this.yelpExists = false;
                    _this.yelpBusinesses = response.businesses;
                    console.log('This is the yelp and google rating id ' + JSON.stringify(response));
                    _this.selectYelp(_this.yelpBusinesses[0]);
                    return false;
                }
                if (response['error']['code'] === "VALIDATION_ERROR") {
                    console.log('THe business validation error');
                    return false;
                }
            }, function (error) {
                _this.toastr.warning('Unable to connect to server');
            });
            //YELP DETAILS FETCHER
            //GOOGLE BUSINESS FETCHER
            this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getGoogleBusiness', businessObj)
                .subscribe(function (data) {
                var response = data.json();
                if (response.results == "") {
                    _this.googleRatingId = 'NO GOOGLE ID FOUND';
                    _this.googleRating = 'NA';
                    return false;
                }
                else {
                    // this.coordinates.latitude = response.results[0].geometry.location.lat
                    // this.coordinates.longitude = response.results[0].geometry.location.lng
                    _this.googleRatingId = response.results[0].name;
                    _this.googleRating = response.results[0].rating;
                }
            }, function (error) {
                _this.toastr.warning('Unable to connect to server');
            });
            //GOOGLE BUSINESS FETCHER
        }
        else {
            console.log('The empty');
            //COMMON OBJECT FOR FETCHING SOCIAL MEDIA RATING
            var businessObj = {
                name: this.serProzDetails.controls.companyName.value,
                address1: this.serProzDetails.controls.businessAddressLine1.value,
                city: this.serProzDetails.controls.city.value,
                country: 'US',
                state: this.serProzDetails.controls.state.value,
                zipcode: this.serProzDetails.controls.zipCode.value,
            };
            //COMMON OBJECT FOR FETCHING SOCIAL MEDIA RATING
            console.log(businessObj);
            //YELP DETAILS FETCHER
            this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getYelpBusiness', businessObj)
                .subscribe(function (data) {
                var response = data.json();
                console.log('THis is data ' + JSON.stringify(businessObj));
                if (response.businesses == "") {
                    console.log('THe business is empty');
                    _this.yelpExists = true;
                    _this.yelpId = "NO YELP ID FOUND";
                    _this.yelpRatingNo = 'NA';
                    _this.googleRatingId = "NO GOOGLE ID FOUND";
                    _this.googleRating = 'NA';
                    _this.aggregateRating = 'NA';
                    return false;
                }
                if (response.businesses !== null) {
                    console.log('THe business is not empty');
                    _this.yelpExists = false;
                    _this.yelpBusinesses = response.businesses;
                    console.log('This is the yelp and google rating id ' + JSON.stringify(response));
                    _this.selectYelp(_this.yelpBusinesses[0]);
                    return false;
                }
                if (response['error']['code'] === "VALIDATION_ERROR") {
                    console.log('THe business validation error');
                    return false;
                }
            }, function (error) {
                _this.toastr.warning('Unable to connect to server');
            });
            //YELP DETAILS FETCHER
            //GOOGLE BUSINESS FETCHER
            this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getGoogleBusiness', businessObj)
                .subscribe(function (data) {
                var response = data.json();
                if (response.results == "") {
                    _this.googleRatingId = 'NO GOOGLE ID FOUND';
                    _this.googleRating = '';
                    return false;
                }
                else {
                    // this.coordinates.latitude = response.results[0].geometry.location.lat
                    // this.coordinates.longitude = response.results[0].geometry.location.lng
                    _this.googleRatingId = response.results[0].name;
                    _this.googleRating = response.results[0].rating;
                }
            }, function (error) {
                _this.toastr.warning('Unable to connect to server');
            });
            //GOOGLE BUSINESS FETCHER
        }
    };
    //BUSINESS API SOCIAL MEDIA
    //YELP SELECTION
    ProzProfileComponent.prototype.selectYelp = function (yelp) {
        var _this = this;
        // this.coordinates.latitude = yelp.coordinates.latitude
        // this.coordinates.longitude = yelp.coordinates.longitude
        this.yelpId = yelp.alias;
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getYelpBusinessRating/' + yelp.alias)
            .subscribe(function (data) {
            var response = data.json();
            _this.yelpRatingNo = response.rating;
            if (_this.yelpId != null && _this.googleRatingId != null) {
                if (_this.googleRating == "NA" || _this.yelpRatingNo == "NA") {
                    _this.aggregateRating = "NA";
                }
                else {
                    _this.aggregateRating = (parseFloat(_this.yelpRatingNo) + parseFloat(_this.googleRating)) / 2;
                }
                _this.yelpValidate = false;
            }
            else {
                _this.yelpValidate = true;
            }
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //YELP SELECTION
    ProzProfileComponent.prototype.removeDuplicates = function (arr) {
        var unique_array = [];
        for (var i = 0; i < arr.length; i++) {
            if (unique_array.indexOf(arr[i]) == -1) {
                unique_array.push(arr[i]);
            }
        }
        return unique_array;
    };
    //CHECK CATEGORY
    ProzProfileComponent.prototype.checkCategory = function (data, category) {
        var _this = this;
        if (category.checked === true) {
            var subCategory = data.subCategories.filter(function (val) { return val.subcat_code == category.subcat_code; });
            console.log(subCategory);
            if (subCategory.length > 0) {
                if (this.areaOfExpertiseTemp.length == 0) {
                    this.areaOfExpertiseTemp.push(category.subcat_code);
                    console.log(this.areaOfExpertiseTemp);
                }
                else {
                    this.areaOfExpertiseTemp.forEach(function (f, i) {
                        if (f == category.subcat_code) {
                        }
                        else {
                            _this.areaOfExpertiseTemp.push(category.subcat_code);
                        }
                    });
                }
            }
            this.areaOfExpertiseTemp = this.removeDuplicates(this.areaOfExpertiseTemp);
        }
        else {
            //this.areaOfExpertiseTemp = this.areaOfExpertiseTemp.filter(value => value === category.subcat_code)
            for (var i = 0; i < this.areaOfExpertiseTemp.length; i++) {
                if (this.areaOfExpertiseTemp[i] == category.subcat_code) {
                    console.log(this.areaOfExpertiseTemp[i] + '-' + category.subcat_code);
                    this.areaOfExpertiseTemp.splice(i, 1);
                }
            }
            this.areaOfExpertiseTemp = this.removeDuplicates(this.areaOfExpertiseTemp);
        }
    };
    //CHECK CATEGORY
    //CHECK TRADE VALIDATIONS
    ProzProfileComponent.prototype.checkValidationTrade = function () {
        var _this = this;
        console.log("chekcing trade details values");
        if (this.addTradeLicenseList.get('tradeLicense').value.length > 0) {
            this.tradeStatusCheck = true;
        }
        else {
            this.tradeStatusCheck = false;
        }
        this.addTradeLicenseList.get('tradeLicense').value.forEach(function (e) {
            console.log(e);
            if (e.stateRegisteredIn == "" || e.tradeLicense == "" || e.tradeLicenseExpiration == "" || e.tradeLicenseNumber == "") {
                console.log('The empty');
                e.tradeStatusCheck = true;
                return false;
            }
            if (e.stateRegisteredIn == null || e.tradeLicense == null || e.tradeLicenseExpiration == null || e.tradeLicenseNumber == null) {
                console.log('The empty');
                _this.tradeStatusCheck = true;
                return false;
            }
            else if (e.stateRegisteredIn !== "" && e.tradeLicense !== "" && e.tradeLicenseExpiration !== "" && e.tradeLicenseNumber !== "") {
                console.log('The not empty');
                _this.tradeStatusCheck = false;
                return false;
            }
        });
    };
    //CHECK TRADE VALIDATIONS
    //CHECK TRADE VALIDATIONS
    ProzProfileComponent.prototype.checkValidationStatus = function () {
        var _this = this;
        console.log("chekcing trade status details values");
        this.addTradeLicenseList.get('tradeLicense').value.forEach(function (e) {
            console.log(e);
            if (e.stateRegisteredIn == "" || e.tradeLicense == "" || e.tradeLicenseExpiration == "" || e.tradeLicenseNumber == "") {
                console.log('The empty');
                _this.StatusCheck = true;
                return false;
            }
            if (e.stateRegisteredIn == null || e.tradeLicense == null || e.tradeLicenseExpiration == null || e.tradeLicenseNumber == null) {
                console.log('The empty');
                _this.StatusCheck = true;
                return false;
            }
            else if (e.stateRegisteredIn !== "" && e.tradeLicense !== "" && e.tradeLicenseExpiration !== "" && e.tradeLicenseNumber !== "") {
                console.log('The not empty');
                _this.StatusCheck = false;
            }
        });
    };
    //CHECK TRADE VALIDATIONS
    ProzProfileComponent.prototype.keyPress1 = function (event) {
        var pattern = /^[a-zA-Z ]+$/;
        var inputChar = String.fromCharCode(event.charCode);
        if (event.keyCode != 8 && event.keyCode != 9 && !pattern.test(inputChar)) {
            event.preventDefault();
        }
    };
    //DEFAULTCOUNTY INSERTION
    //INSERT COUNTIES ZIPCODE BATCH DIRECT
    ProzProfileComponent.prototype.getcountyDetails = function (city, zipcode, proId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getStateCodewithZipcode/' + city + '/' + zipcode, options)
            .subscribe(function (data) {
            var response = data.json();
            _this.countyData = response.response[0];
            _this.getZipcodesFromCountyData(_this.countyData.county, _this.countyData.stateCode, proId);
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    ProzProfileComponent.prototype.getZipcodesFromCountyData = function (data, stateCode, proId) {
        var _this = this;
        console.log(data);
        this.displayZipcodes = [];
        var householdsZipcodes = 0;
        var county = data;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getZipcodeFromCounty/' + county + '/' + stateCode, options)
            .subscribe(function (data1) {
            var response = data1.json();
            if (response.status == 200) {
                _this.displayZipcodes = response.response;
                _this.displayZipcodes.forEach(function (e, i) {
                    e.proCode = proId;
                    e.zipcode = e.zipCode;
                    e.checked = false;
                    householdsZipcodes = householdsZipcodes + parseInt(e.households);
                    if (i == _this.displayZipcodes.length - 1) {
                        _this.insertCountiesZipcodeBatchDirect(data, stateCode, _this.displayZipcodes, proId);
                    }
                });
                return false;
            }
            else {
                _this.displayZipcodes = [];
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    ProzProfileComponent.prototype.insertCountiesZipcodeBatchDirect = function (county, stateCode, zipcodesData, proId) {
        var _this = this;
        //console.log(this.activatedRoute.snapshot.params['prozId'])
        console.log(county);
        console.log(zipcodesData);
        console.log(this.displayZipcodes);
        var countiesZipcodeObj = {
            prozId: proId,
            county: county,
            stateCode: stateCode,
            zipcodes: zipcodesData
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/countiesZipcodeBatchInsertDirect', countiesZipcodeObj)
            .subscribe(function (data) {
            var response = data.json();
            _this.toastr.success("Pro Profile Saved Successfully");
            _this.router.navigate(['/prozProfile/prozProfileServiceAreas', _this.activatedRoute.snapshot.params['prozId']]);
        }, function (error) {
            _this.toastr.warning('Unable to connect to server');
        });
    };
    //INSERT COUNTIES ZIPCODE BATCH DIRECT
    //DEFAULTCOUNTY INSERTION
    ProzProfileComponent.prototype.getCatCode = function (tradeLicense) {
        var _this = this;
        console.log("stdInventoryValue calling" + tradeLicense);
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getStdCatData/' + tradeLicense, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.listInventry = response.response;
                //  this.priceBookListDetails.push(this.listInventry)
                console.log("getStdInventory" + JSON.stringify(_this.listInventry[0].categoryName));
                _this.catNameData = _this.listInventry[0].categoryName;
                _this.getStdPBServices();
            }
            else {
            }
        });
    };
    ProzProfileComponent.prototype.getStdPBServices = function () {
        var _this = this;
        console.log("getStdPBSubcategories calling" + this.catNameData);
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_5__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/getStdPBSubcategories/' + this.catNameData, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.listStdPb = response.response;
                //  this.priceBookListDetails.push(this.listInventry)
                console.log("catName Data" + JSON.stringify(_this.listStdPb));
                _this.addInventoryValues();
            }
            else {
            }
        });
    };
    ProzProfileComponent.prototype.addInventoryValues = function () {
        var _this = this;
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_4__["Global"].url + '/addPBSubcategoriesData' + '/' + this.loginData, this.listStdPb)
            .subscribe(function (data) {
            var matchingData = data.json();
            console.log("matchingData..." + JSON.stringify(matchingData));
            _this.matchingResponse = matchingData.response;
            if (matchingData.status == 200) {
                _this.matchingResponseStatus = false;
            }
            else {
                _this.matchingResponseStatus = true;
            }
        }, function (error) {
        });
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('imageUpload'),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ProzProfileComponent.prototype, "imageUploadVariable", void 0);
    ProzProfileComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            providers: [_utilities_beyond__WEBPACK_IMPORTED_MODULE_8__["Beyond"], _utilities_imageupload__WEBPACK_IMPORTED_MODULE_3__["ImageUpload"], _utilities_geocode_service__WEBPACK_IMPORTED_MODULE_10__["GeocodingService"], _utilities_customValidators__WEBPACK_IMPORTED_MODULE_9__["CustomValidators"]],
            selector: 'app-proz-profile',
            template: __webpack_require__(/*! ./proz-profile.component.html */ "./src/app/proz-profile/proz-profile/proz-profile.component.html"),
            styles: [__webpack_require__(/*! ./proz-profile.component.css */ "./src/app/proz-profile/proz-profile/proz-profile.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_utilities_beyond__WEBPACK_IMPORTED_MODULE_8__["Beyond"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_http__WEBPACK_IMPORTED_MODULE_5__["Http"],
            ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"],
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"],
            _utilities_geocode_service__WEBPACK_IMPORTED_MODULE_10__["GeocodingService"]])
    ], ProzProfileComponent);
    return ProzProfileComponent;
}());



/***/ }),

/***/ "./src/app/proz-profile/proz-public-profile/proz-public-profile.component.html":
/*!*************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-public-profile/proz-public-profile.component.html ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<app-commontopprozblueheader></app-commontopprozblueheader>\r\n<div class=\"body\">\r\n  <div class=\"container\">\r\n    <div class=\"col-lg-12 col-sm-12 col-xs-12 \">\r\n      <!-- Heading -->\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12 col-sm-12 col-xs-12\">\r\n          <h1 class=\"heading\"><b>View Pro Profile</b></h1>\r\n        </div>\r\n      </div>\r\n      <!-- /Heading -->\r\n    </div>\r\n    <!-- Page Body -->\r\n    <div class=\"page-body\">\r\n      <!-- Proz Details -->\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <div class=\"profile-container\">\r\n            <!-- PROFILE HEADER -->\r\n            <div class=\"profile-header row\">\r\n              <!-- Pro Profile Image -->\r\n              <div class=\"col-lg-2 col-md-2 col-sm-12 col-xs-12 text-center\" *ngIf=\"imageStatus\">\r\n                <img [src]=\"imagePreview\" alt=\"\" class=\"header-avatar\" />\r\n              </div>\r\n              <!-- /Pro Profile Image -->\r\n\r\n              <!-- Pro Information -->\r\n              <div class=\"col-lg-5 col-md-5 col-sm-12 col-xs-12 profile-info\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-8\">\r\n                    <div class=\"form-group\">\r\n                      <div class=\"header-fullname\">{{prozProfileData.companyName}}</div>&nbsp;\r\n                      <span><i class=\"glyphicon glyphicon-heart danger\"></i>&nbsp;&nbsp;&nbsp;</span>\r\n                    </div>\r\n                    <!-- <div class=\"header-information\">\r\n                    <span class=\"label label-warning\">\r\n                        <i class=\"fa fa-bolt\"></i>&nbsp;Very Popular\r\n                      </span>  -->\r\n                  </div>\r\n                  <div class=\"col-sm-4\">\r\n                    <div class=\"form-group\">\r\n                      <span class=\"label label-success\">\r\n                        <i class=\"fa fa-thumbs-o-up\"></i> TopProz Assured\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-12\" *ngIf=\"statusValue\">\r\n                    <div class=\"form-group\">\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.googleRating == '1'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">1.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.googleRating == '1.5'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">1.5 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.googleRating == '2'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">2.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.googleRating == '2.5'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">2.5 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.googleRating == '3'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">3.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.googleRating == '3.5'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">3.5 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.googleRating == '4'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">4.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.googleRating == '4.5'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">4.5 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.googleRating == '5'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">5.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n\r\n\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.yelpRating == '1'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">1.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.yelpRating == '1.5'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">1.5 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.yelpRating == '2'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">2.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.yelpRating == '2.5'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">2.5 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.yelpRating == '3'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">3.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.yelpRating == '3.5'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">3.5 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.yelpRating == '4'\">\r\n                        <b>Google:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">4.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.yelpRating == '4.5'\">\r\n                        <b>Yelp:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">4.5 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.yelpRating == '5'\">\r\n                        <b>Yelp:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">5.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.yelpRating == '5.5'\">\r\n                        <b>Yelp:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">5.5 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.aggregateRating == '1'\">\r\n                        <b>Aggregate Rating:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">1.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.aggregateRating == '1.5'\">\r\n                        <b>Aggregate Rating:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">1.5 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.aggregateRating == '2'\">\r\n                        <b>Aggregate Rating:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">2.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.aggregateRating == '2.5'\">\r\n                        <b>Aggregate Rating:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">2.5 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.aggregateRating == '3'\">\r\n                        <b>Aggregate Rating:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">3.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.aggregateRating == '3.5'\">\r\n                        <b>Aggregate Rating:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">3.5 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.aggregateRating == '4'\">\r\n                        <b>Aggregate Rating:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">4.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.aggregateRating == '4.5'\">\r\n                        <b>Aggregate Rating:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">4.5</span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                      <div class=\"ratings\" *ngIf=\"prozProfileData.aggregateRating == '5'\">\r\n                        <b>Aggregate Rating:</b>&nbsp;\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i>&nbsp;</span>\r\n                        <span><i class=\"fa fa-star checked warning\"></i></span>\r\n                        <p class=\"verified-ratings\"><span class=\"rating-count\">5.0 </span>| 200 Verified Ratings</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <!-- /Pro Information -->\r\n\r\n              <!-- Pro Details and Buttons -->\r\n              <div class=\"col-lg-5 col-md-5 col-sm-12 col-xs-12 profile-stats\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12 stats-col\">\r\n                    <div class=\"form-group\">\r\n                      <div class=\"stats-value pink\">{{prozProfileData.inBusinessSince}}</div>\r\n                      <div class=\"stats-title\">BUSINESS SINCE</div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12 stats-col\">\r\n                    <div class=\"form-group\">\r\n                      <div class=\"stats-value pink\">{{workAssignedCount}}</div>\r\n                      <div class=\"stats-title\">HIRES ON TOPPROZ</div>\r\n                    </div><br />\r\n                    <div class=\"row\">\r\n                      <div class=\"col-sm-12\">\r\n                        <div class=\"form-group\">\r\n                          <button type=\"button\" class=\"btn btn-block btn-gray\" (click)=\"getAQuote()\">\r\n                            <i class=\"fa fa-pencil\"></i>Get A Quote</button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <div class=\"col-sm-12\">\r\n                        <div class=\"form-group\">\r\n                          <button type=\"button\" class=\"btn btn-block btn-blue\" (click)=\"bookNow()\">\r\n                            <i class=\"fa fa-check\"></i>Book Now</button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <!-- DELETE Class - STARTS HERE -->\r\n                  <div class=\"backdrop\" class=\"modal fade bs-example-modal-lg\" [ngStyle]=\"{'display':displayFileModal}\">\r\n                  </div>\r\n                  <div class=\"modal\" tabindex=\"-1\" role=\"dialog\" [ngStyle]=\"{'display':displayFileModal}\"\r\n                    style=\"margin-top:3em\">\r\n\r\n                    <div class=\"modal-dialog modal-lg\" role=\"document\">\r\n                      <form [formGroup]=\"bookNow1\">\r\n                        <div class=\"modal-content\">\r\n\r\n                          <div class=\"modal-header\">\r\n                            <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"onCloseHandled()\">\r\n                              <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                            <h4 class=\"modal-title\">Book Now</h4>\r\n                          </div>\r\n\r\n                          <div class=\"row\" style=\"margin-top:2em\">\r\n                            <div class=\"col-sm-3\">\r\n                              <div class=\"form-group\">\r\n                                <label for=\"firstNameLbl\" style=\"margin-left:3em\">\r\n                                  <b>Choose Date <span class=\"mandatory\">*</span></b>\r\n                                </label>\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"col-sm-3\">\r\n                              <div class=\"form-group\">\r\n                                <span class=\"input-icon\" style=\"margin-left:-3em\">\r\n                                  <input type=\"date\" class=\"form-control\" placeholder=\"\" min=\"{{blockifyTodayDate}}\"\r\n                                    formControlName=\"date\">\r\n                                </span>\r\n\r\n                                <!-- <span *ngIf = \"firstName\">Please Enter First Name</span> -->\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"col-sm-3\">\r\n                              <div class=\"form-group\">\r\n                                <label for=\"lastNameLbl\" style=\"margin-left:-2em\">\r\n                                  <b>Choose Time<span class=\"mandatory\">*</span></b>\r\n                                </label>\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"col-sm-3\">\r\n                              <div class=\"form-group\">\r\n                                <span class=\"input-icon\" style=\"margin-left:-6em\">\r\n                                  <input type=\"time\" class=\"form-control\" placeholder=\"\" formControlName=\"time\">\r\n                                </span>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          <div class=\"row\" style=\"margin-top:2em\">\r\n                            <div class=\"col-sm-3\">\r\n                              <div class=\"form-group\">\r\n                                <label for=\"lastNameLbl\" style=\"margin-left:3em\">\r\n                                  <b>Choose Service<span class=\"mandatory\">*</span></b>\r\n                                </label>\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"col-sm-3\">\r\n                              <div class=\"form-group\">\r\n                                <span class=\"input-icon\" style=\"margin-left:-3em\">\r\n                                  <ng2-completer class=\"form-control\" id=\"xlginput\" formControlName=\"serviceSelected\"\r\n                                    [datasource]=\"dataServices\" [minSearchLength]=\"0\"></ng2-completer>\r\n                                </span>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n\r\n\r\n\r\n\r\n                          <div class=\"modal-footer\">\r\n                            <button type=\"button\" class=\"btn btn-primary\" (click)=\"getStarted()\">Ok</button>\r\n                            <button type=\"button\" class=\"btn btn-default\" (click)=\"onCloseHandled()\">No</button>\r\n                          </div>\r\n\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n\r\n                  </div>\r\n\r\n                  <!-- <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-12 stats-col \">\r\n                      <a (click)=\"viewProzProfile()\" class=\"btn btn-primary btn-sm  shiny btn-follow\">\r\n                        <i class=\"fa fa-eye\"></i>\r\n                        View Profile\r\n                      </a>\r\n                    </div> -->\r\n                </div>\r\n              </div>\r\n              <!-- /Pro Details and Buttons -->\r\n\r\n\r\n            </div>\r\n            <!-- /PROFILE HEADER -->\r\n\r\n\r\n            <!-- PROFILE BODY -->\r\n            <div class=\"profile-body\">\r\n              <div class=\"col-lg-12\">\r\n                <div class=\"form-group\">\r\n                  <div class=\"tabbable\">\r\n                    <ul class=\"nav nav-tabs tabs-flat  nav-justified\" id=\"myTab11\">\r\n                      <li class=\"active\">\r\n                        <a data-toggle=\"tab\" href=\"#services\">\r\n                          <!-- Services -->\r\n                        </a>\r\n                      </li>\r\n                      <!-- <li class=\"tab-red\">\r\n                        <a data-toggle=\"tab\" href=\"#about\">\r\n                          About\r\n                        </a>\r\n                      </li> -->\r\n                    </ul>\r\n                    <div class=\"tab-content tabs-flat\">\r\n                      <div id=\"services\" class=\"tab-pane active\">\r\n                        <div class=\"row\">\r\n                          <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n                            <h2>Profile</h2>\r\n                            <b>{{prozProfileData.companyName}}</b><br />\r\n                            <hr class=\"hr-gray\">\r\n                            <p>{{prozProfileData.companyProfileDescription}}</p>\r\n                            <hr class=\"hr-gray\">\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                          <div class=\"col-md-12\">\r\n                            <div class=\"profile-contacts\">\r\n                              <div class=\"contact-info\">\r\n                                <!-- COL 1 -->\r\n                                <!-- <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                                  <h2>Service Area</h2>\r\n                                  <ul *ngFor=\"let item of countyData\">\r\n                                    <li>{{item.county}}</li>\r\n                                  </ul>\r\n                                  <br />\r\n                                  <div>\r\n                                    <h2>Service Offered</h2>\r\n                                    <ng-container *ngFor=\"let data of countyCategory\">\r\n                                      <ul>\r\n                                        <li><b>{{data.categoryName}}</b></li>\r\n                                        <ul *ngFor=\"let data1 of countySubCategory\">\r\n                                          <li *ngIf=\"data1.categoryCode == data.categoryCode\">\r\n                                            {{data1.subcategoryName}}\r\n                                          </li>\r\n                                        </ul>\r\n                                      </ul>\r\n                                    </ng-container>\r\n                                  </div>\r\n                                </div> -->\r\n                                <!-- /COL 1 -->\r\n                                <!-- COL 1 -->\r\n                                <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                                  <h2>Service Area and Service Offered</h2>\r\n                                  <ng-container *ngFor=\" let data of countyList\">\r\n                                    <ul>\r\n                                      <span class=\"countysize\"><i\r\n                                          class=\"fa fa-play\"></i>&nbsp;&nbsp;<b>{{data.county}}</b></span>\r\n                                      <br />\r\n                                      <ng-container *ngFor=\"let categoryData of data.categories\">\r\n                                        <li><b>{{categoryData.categoryName}}</b>\r\n                                          <ul *ngFor=\"let categoryDataSub of data.subcategories\">\r\n                                            <li class=\"listcountysize\"\r\n                                              *ngIf=\"categoryDataSub.categoryCode == categoryData.categoryCode\">\r\n                                              {{categoryDataSub.subcategoryName}}\r\n                                            </li>\r\n                                          </ul>\r\n                                        </li>\r\n                                      </ng-container>\r\n                                    </ul>\r\n                                    <br />\r\n                                  </ng-container>\r\n                                </div>\r\n                                <!-- /COL 1 -->\r\n\r\n                                <!-- COL 2 -->\r\n                                <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                                  <h2>Quick Facts</h2>\r\n                                  <!--TASK #503: View Public Profile Screen, Under Quick Facts, Under Business Hours,24x7 (Please call to confirm)  this field Based on Work Hours Set on Sign Up-->\r\n                                  <div class=\"row\">\r\n                                    <div class=\"col-sm-12\">\r\n                                      <b>Business Hours</b><br />\r\n                                    </div>\r\n                                  </div>\r\n                                  <div class=\"row\">\r\n                                    <div class=\"col-sm-12\">\r\n                                      <div class=\"form-group\">\r\n                                        <table class=\"table table-bordered table-hover\">\r\n                                          <thead>\r\n                                            <tr>\r\n                                              <th>\r\n                                                Day\r\n                                              </th>\r\n                                              <th>\r\n                                                Status\r\n                                              </th>\r\n                                              <th>\r\n                                                From Time\r\n                                              </th>\r\n                                              <th>\r\n                                                To Time\r\n                                              </th>\r\n\r\n                                            </tr>\r\n                                          </thead>\r\n                                          <tbody>\r\n                                            <tr *ngFor=\"let data of dateTimeData\">\r\n                                              <td>\r\n                                                {{data.day}}\r\n                                              </td>\r\n                                              <td>\r\n                                                {{data.status}}\r\n                                              </td>\r\n                                              <td>\r\n                                                {{data.fromTime}}\r\n                                              </td>\r\n                                              <td>\r\n                                                {{data.toTime}}\r\n                                              </td>\r\n                                            </tr>\r\n                                          </tbody>\r\n                                        </table>\r\n                                      </div>\r\n                                    </div>\r\n                                  </div>\r\n                                  <!--/TASK #503: View Public Profile Screen, Under Quick Facts, Under Business Hours,24x7 (Please call to confirm)  this field Based on Work Hours Set on Sign Up-->\r\n                                  <!-- <p>24/7 (Please call to confirm)</p> -->\r\n                                  <ul>\r\n                                    <li>Free Estimates:&nbsp;&nbsp;&nbsp;<b>{{prozProfileData.freeEstimated}}</b></li>\r\n                                    <li>Credit Card\r\n                                      Accepted:&nbsp;&nbsp;&nbsp;<b>{{prozProfileData.creditCardAccepted}}</b></li>\r\n                                    <li>Insured:&nbsp;&nbsp;&nbsp;<b>{{prozProfileData.areYouInsured}}</b></li>\r\n                                    <li>Bonded:&nbsp;&nbsp;&nbsp;<b>{{prozProfileData.areYouBonded}}</b></li>\r\n                                  </ul><br />\r\n                                  <div class=\"row\">\r\n                                    <h2>Credentials</h2>\r\n                                    <b>In Business Since: {{prozProfileData.inBusinessSince}}</b><br />\r\n                                    <div class=\"col-sm-12\">\r\n                                      <!-- <div class=\"col-sm-6\">\r\n                                    <b>State Licensing: {{prozProfileData.stateRegisteredIn.split(\",\")[0]}}</b><br />\r\n                                    <p>Trade: {{prozProfileData.tradeLicense.split(\",\")[0]}}</p>\r\n                                    <p>License #: {{prozProfileData.tradeLicenseNumber.split(\",\")[0]}}</p>\r\n                                    <p>\r\n                                      Expiration:{{prozProfileData.tradeLicenseExpiration.split(\",\")[0] | date: \"MM-dd-yyyy\"}}\r\n                                    </p>\r\n                                 </div> -->\r\n                                      <div class=\"col-sm-6\" *ngFor=\"let data of prozProfileData.tradeLicenseList\">\r\n                                        <b>State Licensing:\r\n                                          {{data.stateRegisteredIn.split(\",\")[0]}}</b><br />\r\n                                        <p>Trade: {{data.tradeLicense.split(\",\")[0]}}</p>\r\n                                        <p>License #: {{data.tradeLicenseNumber.split(\",\")[0]}}</p>\r\n                                        <p>\r\n                                          Expiration:{{data.tradeLicenseExpiration.split(\",\")[0] | date: \"MM-dd-yyyy\"}}\r\n                                        </p>\r\n                                      </div>\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                                <!-- /COL 2-->\r\n\r\n                                <!-- COL 3 -->\r\n                                <!-- <div class=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\r\n                                  <div class=\"row\">\r\n                                    <div class=\"service-offered\">\r\n                                      <p>Save $300 on Any Sewer Repair or Install. Sewer Specialist. We'll beat any\r\n                                        written estimate. Coupon must be shown to tech upon arrival.</p><br>\r\n                                      <button type=\"button\" class=\"btn btn-block btn-blue\" (click)=\"editProfile()\">\r\n                                        Save $300\r\n                                      </button><br /><br />\r\n                                      <div class=\"btn-center\">\r\n                                        <button type=\"button\" class=\"btn btn-xs btn-gray\" (click)=\"editProfile()\">\r\n                                          Learn More\r\n                                        </button>\r\n                                      </div><br />\r\n                                    </div>\r\n                                  </div>\r\n                                  <div class=\"row\">\r\n                                    <div class=\"service-offered\">\r\n                                      <p>Save $180 on Slab leak repair. Coupon must be shown to tech upon arrival.</p><br>\r\n                                      <button type=\"button\" class=\"btn btn-block btn-blue\" (click)=\"editProfile()\">\r\n                                        Save $180\r\n                                      </button><br /><br />\r\n                                      <div class=\"btn-center\">\r\n                                        <button type=\"button\" class=\"btn btn-xs btn-gray\" (click)=\"editProfile()\">\r\n                                          Learn More\r\n                                        </button>\r\n                                      </div><br />\r\n                                    </div>\r\n                                  </div>\r\n                                  <div class=\"row\">\r\n                                    <div class=\"service-offered\">\r\n                                      <p>Save $180 on Any water heater install, include tank-less. Coupon must be shown to tech upon arrival.</p><br>\r\n                                      <button type=\"button\" class=\"btn btn-block btn-blue\" (click)=\"editProfile()\">\r\n                                        Save $180\r\n                                      </button><br /><br />\r\n                                      <div class=\"btn-center\">\r\n                                        <button type=\"button\" class=\"btn btn-xs btn-gray\" (click)=\"editProfile()\">\r\n                                          Learn More\r\n                                        </button>\r\n                                      </div><br />\r\n                                    </div>\r\n                                  </div>\r\n                                </div> -->\r\n                                <!-- /COL 3 -->\r\n\r\n\r\n\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div id=\"about\" class=\"tab-pane\">\r\n                        <div class=\"row profile-overview\">\r\n                          <div class=\"col-md-12\">\r\n                            <div class=\"profile-contacts\">\r\n                              <div class=\"contact-info\">\r\n                                <h2> About</h2><br />\r\n                                <p>Good Prices, Good References, Good Services at Good Price. Free Estimates. </p>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div id=\"reviews\" class=\"tab-pane\">\r\n                        <div class=\"row\">\r\n                          <div class=\"col-md-12\">\r\n                            <form method=\"post\" class=\"well padding-bottom-10\" onsubmit=\"return false;\">\r\n                              <span class=\"input-icon icon-right\">\r\n                                <textarea rows=\"2\" class=\"form-control\" placeholder=\"Post a new message\"></textarea>\r\n                                <i class=\"fa fa-camera themeprimary\"></i>\r\n                              </span>\r\n                              <!-- <div class=\"padding-top-10 text-align-right\">\r\n                                <a class=\"btn btn-sm btn-primary\">\r\n                                  Send\r\n                                </a>\r\n                              </div> -->\r\n                            </form>\r\n                            <!-- <div>\r\n                              <h2> Reviews</h2><br/>\r\n                              <div class=\"comment\">\r\n                                <img src=\"assets/img/avatars/adam-jansen.jpg\" alt=\"\" class=\"comment-avatar\">\r\n                                <div class=\"comment-body\">\r\n                                  <div class=\"comment-text\">\r\n                                    <div class=\"comment-header\">\r\n                                      <a href=\"#\" title=\"\">Adam Jansen</a><span>about 2 minuts ago</span>\r\n                                    </div>\r\n                                    Best Service!!! \r\n                                  </div>\r\n                                  <div class=\"comment-footer\">\r\n                                    <a href=\"#\"><i class=\"fa fa-thumbs-o-up\"></i></a>\r\n                                    <a href=\"#\"><i class=\"fa fa-thumbs-o-down\"></i></a>\r\n                                    <a href=\"#\">Reply</a>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                              <div class=\"comment\">\r\n                                <img src=\"assets/img/avatars/divyia.jpg\" alt=\"\" class=\"comment-avatar\">\r\n                                <div class=\"comment-body\">\r\n                                  <div class=\"comment-text\">\r\n                                    <div class=\"comment-header\">\r\n                                      <a href=\"#\" title=\"\">Kim Ryder</a><span>about 4 hours ago</span>\r\n                                    </div>\r\n                                    Fixed the problem on time!!!\r\n                                  </div>\r\n                                  <div class=\"comment-footer\">\r\n                                    <a href=\"#\"><i class=\"fa fa-thumbs-o-up\"></i></a>\r\n                                    <a href=\"#\"><i class=\"fa fa-thumbs-o-down\"></i></a>\r\n                                    <a href=\"#\">Reply</a>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                              <div class=\"comment\">\r\n                                <img src=\"assets/img/avatars/Nicolai-Larson.jpg\" alt=\"\" class=\"comment-avatar\">\r\n                                <div class=\"comment-body\">\r\n                                  <div class=\"comment-text\">\r\n                                    <div class=\"comment-header\">\r\n                                      <a href=\"#\" title=\"\">Nicolai Larson</a><span>10 hours ago</span>\r\n                                    </div>\r\n                                    Awesome Services!!!\r\n                                  </div>\r\n                                  <div class=\"comment-footer\">\r\n                                    <a href=\"#\"><i class=\"fa fa-thumbs-o-up\"></i></a>\r\n                                    <a href=\"#\"><i class=\"fa fa-thumbs-o-down\"></i></a>\r\n                                    <a href=\"#\">Reply</a>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div> -->\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- /PROFILE BODY -->\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- /Page Body -->\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./src/app/proz-profile/proz-public-profile/proz-public-profile.component.scss":
/*!*************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-public-profile/proz-public-profile.component.scss ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".login-container {\n  position: relative;\n  margin: 3% auto;\n  max-width: 100%; }\n\n.login-container .loginbox {\n  position: relative;\n  width: 100% !important;\n  height: auto !important;\n  padding: 0 0 0px 0;\n  box-shadow: 0 0 14px rgba(0, 0, 0, 0.1); }\n\n.login-container .loginbox .loginbox-social .social-buttons .button-facebook {\n  float: left;\n  border: 2px solid #3b5998;\n  color: #3b5998;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  margin-right: 40%;\n  background-color: #fff; }\n\n.login-container .loginbox .loginbox-social .social-buttons .button-twitter {\n  float: left;\n  border: 2px solid #29c1f6;\n  color: #29c1f6;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  margin-right: 35%;\n  background-color: #fff; }\n\n.login-container .loginbox .loginbox-social .social-buttons .button-google {\n  float: right;\n  border: 2px solid #ef4f1d;\n  color: #ef4f1d;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  background-color: #fff; }\n\n.loginbox-social {\n  padding: 0 0 0 0 !important; }\n\n.loginbox-title {\n  font-weight: bold !important;\n  font-size: 25px !important; }\n\nlabel {\n  font-weight: bold !important; }\n\nlabel .mandatory {\n  color: red;\n  font-size: 16px !important;\n  font-weight: bold !important; }\n\n.hr-blue-title {\n  border-top: 3px solid #5DB2FF !important; }\n\n.hr-blue {\n  border-top: 1px solid #5DB2FF !important; }\n\n.logoImage {\n  width: 100px;\n  height: 100px;\n  margin-top: 5px;\n  border-width: 1px;\n  border-color: #5DB2FF;\n  border-style: solid; }\n\n.aggregateRating {\n  color: #bc5679;\n  font-size: 14px !important;\n  font-weight: bold !important; }\n\n.aggregateRating span {\n  color: green;\n  font-size: 14px !important;\n  font-weight: bold !important; }\n\n.totalcost {\n  color: #bc5679;\n  font-size: 14px !important;\n  font-weight: bold !important;\n  margin-right: auto !important;\n  margin-left: auto !important; }\n\n.totalcost span {\n  color: green;\n  font-size: 14px !important;\n  font-weight: bold !important; }\n\n.well {\n  margin-bottom: 0 !important;\n  padding: 0 10px !important; }\n\n.well.with-footer {\n  padding-bottom: 10px !important; }\n\n.well.with-header {\n  padding-top: 10px !important; }\n\n.btn {\n  font-size: 14px !important;\n  font-weight: bold !important; }\n\n.form-title {\n  display: block;\n  padding: 8px 0;\n  border-bottom: 1px dashed #5DB2FF;\n  font-size: 15px;\n  font-weight: bold;\n  color: #5DB2FF;\n  margin-bottom: 15px; }\n\n.heading {\n  text-align: center; }\n\n.ratings {\n  line-height: 18px;\n  margin-top: 5px;\n  text-align: justify; }\n\np {\n  margin: 0px !important; }\n\n.verified-ratings {\n  margin-top: -5px;\n  font-size: 10px; }\n\n.rating-count {\n  color: orange;\n  font-size: 10px; }\n\n.btn-gray {\n  background-color: #333 !important;\n  color: #5db2ff !important; }\n\n.btn-blue {\n  color: #333 !important;\n  background-color: #5db2ff !important; }\n\n.fa-heart {\n  width: 30px;\n  height: 30px; }\n\nh2 {\n  margin-top: 5px !important;\n  margin-bottom: 5px !important;\n  color: #5db2ff !important;\n  font-weight: bold !important;\n  font-size: 20px !important; }\n\n.profile-container .profile-contacts .contact-info p {\n  padding: 0px 0px !important; }\n\n.service-offered {\n  border: 2px solid #5DB2FF;\n  border-style: dashed;\n  padding: 0 10%;\n  background-color: #333;\n  color: white;\n  margin: 10px 0px !important; }\n\n.service-offered p {\n  padding: 10px 0px !important; }\n\n.btn-center {\n  margin-left: auto;\n  margin-right: auto;\n  text-align: center; }\n\n.hr-gray {\n  border-top: 1px solid #CCC !important; }\n\n.label-success {\n  margin-top: 25% !important;\n  padding: 10px !important; }\n\n.countysize {\n  font-size: 15px !important;\n  list-style-type: square !important;\n  margin-left: -40px !important; }\n\n.listcountysize {\n  margin-left: -20px !important; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/proz-profile/proz-public-profile/proz-public-profile.component.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/proz-profile/proz-public-profile/proz-public-profile.component.ts ***!
  \***********************************************************************************/
/*! exports provided: ProzPublicProfileComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProzPublicProfileComponent", function() { return ProzPublicProfileComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _utilities_beyond__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utilities/beyond */ "./src/utilities/beyond.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm5/ngx-toastr.js");
/* harmony import */ var _global_global__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../global/global */ "./src/global/global.ts");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var ng2_completer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ng2-completer */ "./node_modules/ng2-completer/esm5/ng2-completer.js");
/* harmony import */ var ng4_auto_complete__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ng4-auto-complete */ "./node_modules/ng4-auto-complete/index.js");











var ProzPublicProfileComponent = /** @class */ (function () {
    function ProzPublicProfileComponent(beyond, router, http, activatedRoute, formBuilder, toastr, autoCompleteService, completerService) {
        this.beyond = beyond;
        this.router = router;
        this.http = http;
        this.activatedRoute = activatedRoute;
        this.formBuilder = formBuilder;
        this.toastr = toastr;
        this.autoCompleteService = autoCompleteService;
        this.completerService = completerService;
        this.counties = [];
        this.countyZipcode = [];
        // public countyCategory = []
        this.countySubCategory = [];
        this.statusValue = false;
        this.imageStatus = false;
        this.displayFileModal = 'none';
        this.dataServiceCategory = false;
        this.subcatArray = [];
        this.catNames = [];
    }
    ProzPublicProfileComponent.prototype.ngOnInit = function () {
        this.beyond.beyondAdmin();
        this.loginData = JSON.parse(localStorage.getItem("login"));
        // this.prozId = this.activatedRoute.snapshot.params['prozId']
        // console.log("loginData" + JSON.stringify(this.loginData.loginCode))
        this.blockifyTodayDate = this.dateConversion(new Date());
        this.viewProzDetails();
        this.getMasterDateTime();
        // this.getCountiesCategoryList()
        this.getWorkorderAssignedCountList();
        // this.listCategoriesSubCategories()
        // this.getCountiesSubCategoryList();
        var today = this.dateConversion(new Date());
        this.bookNow1 = this.formBuilder.group({
            date: [today, _angular_forms__WEBPACK_IMPORTED_MODULE_8__["Validators"].required],
            time: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_8__["Validators"].required],
            serviceSelected: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_8__["Validators"].required]
        });
        this.bookNow1.controls.time.setValue(moment__WEBPACK_IMPORTED_MODULE_7__().format('HH:mm'));
        // this.ViewCatSSubcat();
    };
    //Date Conversion
    ProzPublicProfileComponent.prototype.dateConversion = function (todayTime) {
        var month = todayTime.getMonth() + 1;
        var day = todayTime.getDate();
        var year = todayTime.getFullYear();
        if (month < 10)
            month = "0" + month;
        if (day < 10)
            day = "0" + day;
        return year + "-" + month + "-" + day;
    };
    //Date Conversion
    ProzPublicProfileComponent.prototype.getStarted = function () {
        var _this = this;
        localStorage.setItem('categoryName', JSON.stringify(this.bookNow1.value.serviceSelected));
        this.dataServices['_data'].forEach(function (e) {
            if (e.categoryName == _this.bookNow1.value.serviceSelected) {
                _this.router.navigate(['/customer/selectedService', e.catCode, e.subCatCode, 'ZIP']);
            }
        });
    };
    //TASK #503: View Public Profile Screen, Under Quick Facts, Under Business Hours,24x7 (Please call to confirm)  this field Based on Work Hours Set on Sign Up
    ProzPublicProfileComponent.prototype.getMasterDateTime = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        console.log("ProPublicProfilebefore:" + JSON.stringify(this.loginData.loginCode));
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/masterDateTime/' + this.loginData.loginCode, options)
            .subscribe(function (data) {
            var viewdatetime = data.json();
            _this.dateTimeData = viewdatetime.response;
            for (var i = 0; i < _this.dateTimeData.length; i++) {
                if (_this.dateTimeData[i].status == "CLOSED") {
                    _this.dateTimeData[i].fromTime = "";
                    _this.dateTimeData[i].toTime = "";
                }
                else if (_this.dateTimeData[i].status == "OPEN") {
                    // this.dateTimeData[i].fromTime = ;
                    // this.dateTimeData[i].toTime = true;
                }
            }
        }, function (error) {
            _this.toastr.warning('Unable to Connect to Server');
        });
    };
    //TASK #503: View Public Profile Screen, Under Quick Facts, Under Business Hours,24x7 (Please call to confirm)  this field Based on Work Hours Set on Sign Up
    //categoriesSubCategories
    ProzPublicProfileComponent.prototype.listCategoriesSubCategories = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/categoriesSubCategories', options)
            .subscribe(function (data) {
            _this.serviceCategoryData = data.json();
            _this.categoriesSubCategoriesData = _this.serviceCategoryData.response;
            for (var i = 0; i < _this.categoriesSubCategoriesData.length; i++) {
                //this.options.push(this.categoriesSubCategoriesData[i].categoryName + "-" + this.categoriesSubCategoriesData[i].subcategoryName + " - " + this.categoriesSubCategoriesData[i].catId + " - " + this.categoriesSubCategoriesData[i].subCatId) 
                _this.catNames.push({
                    "categoryName": _this.categoriesSubCategoriesData[i].categoryName + "-" + _this.categoriesSubCategoriesData[i].subcategoryName,
                    "catCode": _this.categoriesSubCategoriesData[i].cat_code,
                    "subCatCode": _this.categoriesSubCategoriesData[i].subcat_code
                });
                if (i == _this.categoriesSubCategoriesData.length - 1) {
                    _this.dataServices = _this.completerService.local(_this.catNames, 'categoryName', 'categoryName');
                    _this.dataServiceCategory = true;
                }
            }
        }, function (error) {
            _this.toastr.warning('Unable to Connect to Server');
        });
    };
    //VIEW PROZ DETAILS
    ProzPublicProfileComponent.prototype.viewProzDetails = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getProDetails/' + this.loginData.loginCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.statusValue = true;
                _this.prozProfileData = response.profile[0];
                console.log(_this.prozProfileData);
                _this.prozServiceData = response.serviceAreas;
                _this.prozPaymentData = response.payment[0];
                _this.countyData = response.county;
                console.log("county", _this.countyData);
                if (_this.prozProfileData.image == 'assets/img/proz/company_default.jpg') {
                    console.log('defaut');
                    _this.imagePreview = "assets/img/proz/company_default.jpg";
                    _this.imageStatus = true;
                }
                else {
                    _this.imagePreview = _global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + _this.prozProfileData.image;
                    console.log('dynamic');
                    _this.imageStatus = true;
                }
                _this.prozProfileData.tradeLicenseList = [];
                _this.subCategoryProz(_this.prozProfileData.tradeLicense);
                _this.prozProfileData.stateRegisteredIn.split(',').forEach(function (e, i) {
                    var tradeDetailsObj = {
                        stateRegisteredIn: _this.prozProfileData.stateRegisteredIn.split(',')[i],
                        tradeLicense: _this.prozProfileData.tradeLicense.split(',')[i],
                        tradeLicenseNumber: _this.prozProfileData.tradeLicenseNumber.split(',')[i],
                        tradeLicenseExpiration: _this.prozProfileData.tradeLicenseExpiration.split(',')[i],
                    };
                    _this.prozProfileData.tradeLicenseList.push(tradeDetailsObj);
                    //console.log(this.prozProfileData.tradeLicenseList)
                    if (i === _this.prozProfileData.stateRegisteredIn.split(',').length - 1) {
                        _this.prozProfileData.tradeLicenseList.forEach(function (e) {
                            _this.categoriesData.forEach(function (f, j) {
                                if (e.tradeLicense == f.cat_code) {
                                    e.name = f.categoryName;
                                }
                            });
                            _this.items = _this.addTradeLicenseList.get('tradeLicense');
                            _this.items.push(_this.createTradeLicense(e));
                        });
                    }
                });
                // for(var i=0; i<this.prozServiceData.length; i++){
                //   this.prozServiceData = this.prozServiceData[i].county;
                // }
                //  this.toastr.success("View Proz Details")
            }
            else {
                _this.statusValue = false;
            }
        }, function (error) {
            _this.toastr.warning('Unable to Connect to Server');
        });
        this.getCountiesList(this.loginData.loginCode);
    };
    //SUB CATEGORIES PROZ
    ProzPublicProfileComponent.prototype.subCategoryProz = function (categoryCode) {
        var _this = this;
        //console.log('cat')
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        var catCodeObj = {
            catCodes: categoryCode
        };
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/subCategoryFromCategoryCounty', catCodeObj, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                var list = response.response;
                console.log(response.response);
                var subcatArray = _this.prozProfileData.areaOfExpertise.split(',');
                console.log(subcatArray);
                list.forEach(function (e, i) {
                    subcatArray.forEach(function (f, j) {
                        if (e.subcat_code == f) {
                            _this.areaExpertiseList.push(e.subcategoryName);
                        }
                    });
                    if (i == list.length - 1) {
                        console.log(_this.areaExpertiseList);
                        _this.areaStatus = true;
                    }
                });
            }
            else {
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //SUB CATEGORIES PROZ
    ProzPublicProfileComponent.prototype.createTradeLicense = function (e) {
        throw new Error("Method not implemented.");
    };
    ProzPublicProfileComponent.prototype.getWorkorderAssignedCountList = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getWorkorderAssignedCountList/' + this.loginData.loginCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.workAssignedCount = response.response;
            }
        });
    };
    ProzPublicProfileComponent.prototype.getAQuote = function () {
        this.router.navigate(['']);
    };
    // bookNow(){
    //   // this.router.navigate(['/bookNowcalendar'])
    // }
    ProzPublicProfileComponent.prototype.bookNow = function () {
        // var classId = classId;
        this.displayFileModal = 'block';
        // this.classId = classId
    };
    // this.blockifyTo
    ProzPublicProfileComponent.prototype.onDelete = function () {
        this.router.navigate(['']);
        // event.preventDefault();
        // event.stopPropagation();
        // this.http.get(Global.url + 'deleteclass/' + this.classId)
        //   .subscribe((data: any) => {
        //     this.Dataclass = data;
        //     if (this.Dataclass.status == 200) {
        //       this.listclassesData()
        //       this.displayFileModal = 'classId';
        //       this.displayFileModal = 'none';
        //     } else {
        //       console.log('The else')
        //     }
        //   })
    };
    ProzPublicProfileComponent.prototype.onCloseHandled = function () {
        this.displayFileModal = 'none';
    };
    //GET COUNTIES LIST
    ProzPublicProfileComponent.prototype.getCountiesList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getUniqueCounty/' + this.loginData.loginCode, options)
            .subscribe(function (data) {
            var response = data.json();
            var categoryName = [];
            if (response.status == 200) {
                _this.countyStore = response.response;
                _this.counties = response.response;
                _this.getCountiesCategoryList(proCode);
            }
            else {
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES LIST
    //GET COUNTIES CATEGORY LIST
    ProzPublicProfileComponent.prototype.getCountiesCategoryList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getCountiesCategoryList/' + this.loginData.loginCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.countyCategory = response.response;
                _this.getCountiesSubCategoryList(proCode);
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES CATEGORY LIST
    //GET COUNTIES SUB CATEGORY LIST
    ProzPublicProfileComponent.prototype.getCountiesSubCategoryList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_4__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_6__["Global"].url + '/getCountiesSubCategoryList/' + this.loginData.loginCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.countyStatus = true;
                _this.countySubCategory = response.response;
                for (var i = 0; i < _this.counties.length; i++) {
                    _this.counties[i].categories = [];
                    _this.counties[i].subcategories = [];
                    for (var j = 0; j < _this.countyCategory.length; j++) {
                        if (_this.counties[i].county === _this.countyCategory[j].county && _this.counties[i].stateCode == _this.countyCategory[j].stateCode) {
                            _this.counties[i].categories.push(_this.countyCategory[j]);
                        }
                    }
                    for (var k = 0; k < _this.countySubCategory.length; k++) {
                        if (_this.counties[i].county === _this.countySubCategory[k].county && _this.counties[i].stateCode == _this.countySubCategory[k].stateCode) {
                            _this.counties[i].subcategories.push(_this.countySubCategory[k]);
                        }
                    }
                }
                _this.countyList = _this.counties;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    ProzPublicProfileComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            providers: [_utilities_beyond__WEBPACK_IMPORTED_MODULE_2__["Beyond"]],
            selector: 'app-proz-public-profile',
            template: __webpack_require__(/*! ./proz-public-profile.component.html */ "./src/app/proz-profile/proz-public-profile/proz-public-profile.component.html"),
            styles: [__webpack_require__(/*! ./proz-public-profile.component.scss */ "./src/app/proz-profile/proz-public-profile/proz-public-profile.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_utilities_beyond__WEBPACK_IMPORTED_MODULE_2__["Beyond"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _angular_http__WEBPACK_IMPORTED_MODULE_4__["Http"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_8__["FormBuilder"],
            ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"],
            ng4_auto_complete__WEBPACK_IMPORTED_MODULE_10__["AutoCompleteService"],
            ng2_completer__WEBPACK_IMPORTED_MODULE_9__["CompleterService"]])
    ], ProzPublicProfileComponent);
    return ProzPublicProfileComponent;
}());



/***/ }),

/***/ "./src/app/proz-profile/proz-subscription-confirmation/proz-subscription-confirmation.component.html":
/*!***********************************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-subscription-confirmation/proz-subscription-confirmation.component.html ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<app-commontopprozblueheader></app-commontopprozblueheader>\r\n<div class=\"container\" *ngIf=\"showConfirmation\">\r\n  <div class=\"body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12 col-sm-12 col-xs-12\">\r\n        <!-- PROZ PROFILE - STARTS HERE -->\r\n        <div class=\"login-container animated fadeInDown\">\r\n          <div class=\"loginbox bg-white\">\r\n            <div class=\"widget-body\">\r\n              <div id=\"registration-form\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-12\">\r\n                    <div class=\"form-group\">\r\n                      <div class=\"loginbox-title\">SUBSCRIPTION CONFIRMATION</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-12\">\r\n                    <div class=\"form-group\">\r\n                      <hr class=\"hr-blue-title\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <!-- <div class=\"row\">\r\n                  <div class=\"col-sm-12\">\r\n                    <div class=\"form-group\">\r\n                      <h5> <span class=\"mandatory\" style=\"color:red\">*</span> <b>Selected Service Area Details </b></h5>\r\n                    </div>\r\n                  </div>\r\n                </div> -->\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-4\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"nameofbusiness\">Subscription Type:</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-4\" *ngIf=\"monthlyStatus\">\r\n                    <span class=\"text\"> Monthly</span>\r\n                  </div>\r\n                  <div class=\"col-sm-4\" *ngIf=\"perLeadStatus\">\r\n                    <span class=\"text\"> Per Lead</span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\" *ngIf=\"monthlyStatus\">\r\n                  <div class=\"col-xs-12 col-md-12\">\r\n                    <div class=\"widget-body\">\r\n                      <div class=\"flip-scroll\">\r\n                        <table class=\"table table-bordered table-striped table-condensed flip-content\">\r\n                          <thead class=\"flip-content bordered-palegreen\">\r\n                            <tr>\r\n                              <th style=\"width: 15%;\">\r\n                                County\r\n                              </th>\r\n                              <th >\r\n                                Households\r\n                              </th>\r\n                              <th style=\"width: 15%;\">\r\n                                Category\r\n                              </th>\r\n                              <th style=\"width: 50%;\">\r\n                                Sub Category\r\n                              </th>\r\n                              <th style=\"width: 15%;\">\r\n                                Monthly Subscription Fee\r\n                              </th>\r\n                              <th style=\"width: 15%;\">\r\n                                Total\r\n                              </th>\r\n                            </tr>\r\n                          </thead>\r\n                          <ng-container>\r\n                            <tbody>\r\n                              <ng-container *ngFor=\"let data of countyList\">\r\n                                <tr style=\"border-bottom: 2px solid black;\">\r\n                                  <td><a data-toggle=\"modal\" data-target=\".bs-example-modal-lg\"\r\n                                      (click)=\"getZipcodesFromCounty(data)\">{{data.county}}</a>\r\n                                  </td>\r\n                                  <td>{{data.households}}</td>\r\n                                  <td>\r\n                                    <table>\r\n                                      <tr *ngFor=\"let categoryData of data.categories\"   style=\"border-bottom: 1px solid black;\">\r\n                                        <td>\r\n                                          <div style=\"width:100%;height:auto; \">\r\n                                            <div>\r\n                                              <div style=\"float:left;width:60%;\">\r\n                                                <span class=\"text\">{{categoryData.categoryName}}</span>\r\n                                              </div>\r\n                                              <div style=\"float:right;width:40%;\">\r\n                                                <span>&nbsp;</span>\r\n                                              </div>\r\n                                            </div>\r\n                                          </div>\r\n                                        </td>\r\n                                      </tr>\r\n                                    </table>\r\n                                  </td>\r\n                                  <td colspan=\"2\">\r\n                                    <table>\r\n                                      <ng-container *ngFor=\"let categoryData of data.categories\">\r\n                                        <ng-container>\r\n                                          <tr>\r\n                                            <td>\r\n                                              <div style=\"width:100%;height:auto; border-bottom: 1px solid black;\">\r\n                                                <div>\r\n                                                  <ng-container *ngFor=\"let categoryDataSub of data.subcategories\">\r\n                                                    <ng-container\r\n                                                      *ngIf=\"categoryDataSub.categoryCode == categoryData.categoryCode\">\r\n                                                      <div style=\"float:left;width:60%;\">\r\n                                                        <span class=\"text\">{{categoryDataSub.subcategoryName}}</span>\r\n                                                      </div>\r\n                                                      <div style=\"float:right;width:40%;\">\r\n                                                        <span>$&nbsp;{{categoryDataSub.monthly}}</span>\r\n                                                      </div>\r\n                                                    </ng-container>\r\n                                                  </ng-container>\r\n                                                </div>\r\n                                              </div>\r\n                                            </td>\r\n                                          </tr>\r\n                                        </ng-container>\r\n                                      </ng-container>\r\n                                    </table>\r\n                                  </td>\r\n                                  <td>\r\n                                    $ {{data.totalEstimatedCost}}\r\n                                  </td>\r\n                                </tr>\r\n                              </ng-container>\r\n                            </tbody>\r\n                          </ng-container>\r\n                        </table>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\" *ngIf=\"perLeadStatus\">\r\n                  <div class=\"col-xs-12 col-md-12\">\r\n                    <div class=\"widget-body\">\r\n                      <div class=\"flip-scroll\">\r\n                        <table class=\"table table-bordered table-striped table-condensed flip-content\">\r\n                          <thead class=\"flip-content bordered-palegreen\">\r\n                            <tr>\r\n                              <th style=\"width: 7%;\">\r\n                                County\r\n                              </th>\r\n                              <th style=\"width: 4%;\">\r\n                                State\r\n                              </th>\r\n                              <th style=\"width: 15%;\">\r\n                                Category\r\n                              </th>\r\n                              <th style=\"width: 35%;\">\r\n                                Sub Category\r\n                              </th>\r\n                              <th style=\"width: 7%;\">\r\n                                Per Lead Fee\r\n                              </th>\r\n                            </tr>\r\n                          </thead>\r\n                          <ng-container *ngIf=\"countyStatus\">\r\n                              <tbody>\r\n                                <ng-container *ngFor=\"let data of countyList\">\r\n                                  <tr style=\"border-bottom: 2px solid black;\">\r\n                                    <td style=\"width:20%\"><a data-toggle=\"modal\" data-target=\".bs-example-modal-lg\"\r\n                                        (click)=\"getZipcodesFromCounty(data,data.stateCode)\">{{data.county}}</a>\r\n                                    </td>\r\n                                    <td>{{data.state}}</td>\r\n                                    <td style=\"width:20%\">\r\n                                      <table>\r\n                                             <ng-container >\r\n                                        <tr *ngFor=\"let categoryData of data.categories\" style=\"border-bottom: 1px solid black;\">\r\n                                          <td>\r\n                                            <div style=\"width:100%;height:auto;border-bottom: 1px solid black;\">\r\n                                              <div>\r\n                                                <div style=\"float:left;width:60%;\">\r\n                                                  <span class=\"text\">{{categoryData.categoryName}}</span>\r\n                                                </div>\r\n                                                <div style=\"float:right;width:15%;\">\r\n                                                  <span>&nbsp;</span>\r\n                                                </div>\r\n                                              </div>\r\n                                            </div>\r\n                                          </td>\r\n                                        </tr>\r\n                                        </ng-container>\r\n                    \r\n                                      </table>\r\n                                    </td>\r\n                                    <td colspan=\"2\">\r\n                                      <table>\r\n                                        <ng-container *ngFor=\"let categoryData of data.categories\">\r\n                                          <ng-container>\r\n                                            <tr>\r\n                                              <td>\r\n                                                       <div style=\"width:100%;height:auto; border-bottom: 1px solid black;\">\r\n                                                                 <div>\r\n                                                    <ng-container *ngFor=\"let categoryDataSub of data.subcategories\">\r\n                                                      <ng-container\r\n                                                        *ngIf=\"categoryDataSub.categoryCode == categoryData.categoryCode\">\r\n                                                        <td style=\"float:left;width:60%;\">\r\n                                                          <span class=\"text\">{{categoryDataSub.subcategoryName}}</span>\r\n                                                        </td>\r\n                                                        <td style=\"float:right;width:10%;\">\r\n                                                          <span>$&nbsp;{{categoryDataSub.perLead}}</span>\r\n                                                        </td>\r\n                                                      </ng-container>\r\n                                                    </ng-container>\r\n                                                    </div>\r\n                                                </div>\r\n                                              </td>\r\n                                            </tr>\r\n                                          </ng-container>\r\n                                        </ng-container>\r\n                                      </table>\r\n                                    </td>\r\n                                  </tr>\r\n                                </ng-container>\r\n                              </tbody>\r\n                            </ng-container>\r\n                        </table>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- <div class=\"row\">\r\n                  <div class=\"col-sm-4\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"nameofbusiness\">Total Subscription Cost:</label>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-4\" *ngIf=\"monthlyStatus\">\r\n                    <span class=\"text\"> {{totalCostSubscription}}</span>\r\n                  </div>\r\n                  <div class=\"col-sm-4\" *ngIf=\"perLeadStatus\">\r\n                    <span class=\"text\"> {{totalCostSubscription}}</span>\r\n                  </div>\r\n                </div> -->\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-4\">\r\n                    <div class=\"form-group\">\r\n                      <input type=\"button\" class=\"btn btn-azure shiny btn-block\" value=\"Back\" (click)=\"backBtn()\">\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-sm-4\">\r\n                    <div class=\"form-group\">\r\n                      <input type=\"button\" class=\"btn btn-success shiny btn-block\" value=\"Save\"\r\n                        (click)=\"payBtn()\">\r\n                    </div>\r\n                  </div>\r\n                  <!-- <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                      <input type=\"button\" class=\"btn btn-danger shiny btn-block\" value=\"Cancel\" (click)=\"cancelBtn()\"\r\n                        data-toggle=\"modal\" data-target=\"#modal-info\">\r\n                    </div>\r\n                  </div> -->\r\n                  <div class=\"col-sm-2\">\r\n                    <div class=\"form-group\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <!--Info Modal Templates-->\r\n              <div id=\"modal-info\" class=\"modal modal-message modal-info fade\" style=\"display: none;\"\r\n                aria-hidden=\"true\">\r\n                <div class=\"modal-dialog\">\r\n                  <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                      <h3><b>CANCEL SUBSCRIPTION</b></h3>\r\n                    </div>\r\n                    <!-- <div class=\"modal-title\">Alert</div> -->\r\n                    <div class=\"modal-body\">\r\n                      <div class=\"row\">\r\n                        <label><b></b></label>\r\n                      </div>\r\n                      <div class=\"row\">\r\n                        <label><b>Are You Sure, You Want To Cancel The Subcription ?</b></label>\r\n                      </div>\r\n                    </div>\r\n                    <br><br>\r\n                    <div class=\"modal-footer\">\r\n                      <button type=\"button\" class=\"btn btn-info\" data-dismiss=\"modal\"\r\n                        (click)=\"subcriptionYes()\">Yes</button>\r\n                      <button type=\"button\" class=\"btn btn-danger\" data-dismiss=\"modal\"\r\n                        (click)=\"subcriptionNo()\">No</button>\r\n                    </div>\r\n                  </div> <!-- / .modal-content -->\r\n                </div> <!-- / .modal-dialog -->\r\n              </div>\r\n              <!--End Info Modal Templates-->\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<div class=\"modal fade bs-example-modal-lg\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n  aria-hidden=\"true\" style=\"display: none;\">\r\n  <div class=\"modal-dialog modal-lg\">\r\n    <div class=\"modal-content\">\r\n\r\n      <div class=\"modal-header\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\r\n        <h4 class=\"modal-title\" id=\"myLargeModalLabel\">Zipcodes</h4>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div style=\"width:100%;\">\r\n          <table class=\"table table-bordered table-striped table-condensed flip-content\">\r\n            <thead class=\"flip-content bordered-palegreen\">\r\n              <tr>\r\n                <th>\r\n                  Zipcode\r\n                </th>\r\n                <th>\r\n                  County\r\n                </th>\r\n                <th>\r\n                  City\r\n                </th>\r\n                <!-- <th>\r\n                  Households\r\n                </th> -->\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr *ngFor=\"let data of displayZipcodes\">\r\n                <td>{{data.zipcode}}</td>\r\n                <td>{{data.county}}</td>\r\n                <td>{{data.city}}</td>\r\n                <!-- <td>{{data.households}}</td> -->\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div><!-- /.modal-content -->\r\n  </div><!-- /.modal-dialog -->\r\n</div>"

/***/ }),

/***/ "./src/app/proz-profile/proz-subscription-confirmation/proz-subscription-confirmation.component.scss":
/*!***********************************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-subscription-confirmation/proz-subscription-confirmation.component.scss ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".login-container {\n  position: relative;\n  margin: 3% auto;\n  max-width: 100%; }\n\n.login-container .loginbox {\n  position: relative;\n  width: 100% !important;\n  height: auto !important;\n  padding: 0 0 0px 0;\n  box-shadow: 0 0 14px rgba(0, 0, 0, 0.1); }\n\n.login-container .loginbox .loginbox-title {\n  height: auto !important;\n  font-family: 'Arial', 'Helvetica', 'sans-serif' !important; }\n\n.login-container .loginbox .loginbox-social .social-buttons .button-facebook {\n  float: left;\n  border: 2px solid #3b5998;\n  color: #3b5998;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  margin-right: 40%;\n  background-color: #fff; }\n\n.login-container .loginbox .loginbox-social .social-buttons .button-twitter {\n  float: left;\n  border: 2px solid #29c1f6;\n  color: #29c1f6;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  margin-right: 35%;\n  background-color: #fff; }\n\n.login-container .loginbox .loginbox-social .social-buttons .button-google {\n  float: right;\n  border: 2px solid #ef4f1d;\n  color: #ef4f1d;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  background-color: #fff; }\n\n.loginbox-social {\n  padding: 0 0 0 0 !important; }\n\n.loginbox-title {\n  font-weight: bold !important;\n  font-size: 25px !important; }\n\nlabel {\n  font-weight: bold !important; }\n\nlabel .mandatory {\n  color: red;\n  font-size: 16px !important;\n  font-weight: bold !important; }\n\n.hr-blue-title {\n  border-top: 3px solid #5DB2FF !important; }\n\n.hr-blue {\n  border-top: 1px solid #5DB2FF !important; }\n\n.logoImage {\n  width: 100px;\n  height: 100px;\n  margin-top: 5px;\n  border-width: 1px;\n  border-color: #5DB2FF;\n  border-style: solid; }\n\n.btn {\n  font-size: 20px !important;\n  font-weight: bold !important;\n  font-family: 'Arial', 'Helvetica', 'sans-serif' !important; }\n\n.form-title {\n  display: block;\n  padding: 8px 0;\n  border-bottom: 1px dashed #5DB2FF;\n  font-size: 15px;\n  font-weight: bold;\n  color: #5DB2FF;\n  margin-bottom: 15px; }\n\n.green-text {\n  color: green;\n  font-family: 'Arial', 'Helvetica', 'sans-serif' !important;\n  text-align: center;\n  font-size: 16px !important;\n  font-weight: bold !important; }\n\n.green-text span {\n  font-weight: bold; }\n\nth {\n  font-weight: bold !important;\n  font-size: 14px !important; }\n\ndiv .modal-backdrop .fade.in {\n  filter: alpha(opacity=100) !important;\n  opacity: 1 !important; }\n\n.modal-content {\n  width: 450px !important; }\n\n.modal-message .modal-footer {\n  margin: -23px 0 20px !important;\n  padding-bottom: 10px !important; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcHJvei1wcm9maWxlL3Byb3otc3Vic2NyaXB0aW9uLWNvbmZpcm1hdGlvbi9EOlxcVG9wcHJvelxcVG9wUHJvel9BZHZhbmNlX0NsaWVudC9zcmNcXGFwcFxccHJvei1wcm9maWxlXFxwcm96LXN1YnNjcmlwdGlvbi1jb25maXJtYXRpb25cXHByb3otc3Vic2NyaXB0aW9uLWNvbmZpcm1hdGlvbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLG1CQUFrQjtFQUNsQixnQkFBZTtFQUNmLGdCQUFlLEVBQ2xCOztBQUVEO0VBQ0ksbUJBQWtCO0VBQ2xCLHVCQUFzQjtFQUN0Qix3QkFBdUI7RUFDdkIsbUJBQWtCO0VBR2xCLHdDQUFtQyxFQUN0Qzs7QUFFRDtFQUNJLHdCQUF1QjtFQUN2QiwyREFBMEQsRUFDN0Q7O0FBR0Q7RUFDSSxZQUFXO0VBQ1gsMEJBQXlCO0VBQ3pCLGVBQWM7RUFDZCxtQkFBa0I7RUFDbEIsWUFBVztFQUNYLGFBQVk7RUFDWixrQkFBaUI7RUFDakIsdUJBQXNCLEVBQ3pCOztBQUVEO0VBQ0ksWUFBVztFQUNYLDBCQUF5QjtFQUN6QixlQUFjO0VBQ2QsbUJBQWtCO0VBQ2xCLFlBQVc7RUFDWCxhQUFZO0VBQ1osa0JBQWlCO0VBQ2pCLHVCQUFzQixFQUN6Qjs7QUFFRDtFQUNJLGFBQVk7RUFDWiwwQkFBeUI7RUFDekIsZUFBYztFQUNkLG1CQUFrQjtFQUNsQixZQUFXO0VBQ1gsYUFBWTtFQUNaLHVCQUFzQixFQUN6Qjs7QUFHQTtFQUNHLDRCQUEyQixFQUM5Qjs7QUFFRDtFQUNJLDZCQUE0QjtFQUM1QiwyQkFBMEIsRUFDN0I7O0FBRUQ7RUFDSSw2QkFBMkIsRUFDOUI7O0FBRUQ7RUFDSSxXQUFTO0VBQ1QsMkJBQTBCO0VBQzFCLDZCQUE0QixFQUMvQjs7QUFFRDtFQUNJLHlDQUF3QyxFQUMzQzs7QUFFRDtFQUNJLHlDQUF3QyxFQUMzQzs7QUFFRDtFQUNJLGFBQVc7RUFDWCxjQUFZO0VBQ1osZ0JBQWM7RUFDZCxrQkFBaUI7RUFDakIsc0JBQXFCO0VBQ3JCLG9CQUFtQixFQUN0Qjs7QUFHRDtFQUNJLDJCQUEwQjtFQUMxQiw2QkFBNEI7RUFDNUIsMkRBQTBELEVBQzdEOztBQUVEO0VBQ0ksZUFBYztFQUNkLGVBQWM7RUFDZCxrQ0FBaUM7RUFDakMsZ0JBQWU7RUFDZixrQkFBaUI7RUFDakIsZUFBYztFQUNkLG9CQUFtQixFQUN0Qjs7QUFFRDtFQUNJLGFBQVk7RUFDWiwyREFBMEQ7RUFDMUQsbUJBQWtCO0VBQ2xCLDJCQUEwQjtFQUMxQiw2QkFBNEIsRUFFL0I7O0FBRUQ7RUFDSSxrQkFBaUIsRUFDcEI7O0FBR0Q7RUFDSSw2QkFBNEI7RUFDNUIsMkJBQTBCLEVBQzdCOztBQUVEO0VBQ0ksc0NBQXFDO0VBQ3JDLHNCQUFxQixFQUN4Qjs7QUFFRDtFQUNJLHdCQUFzQixFQUN6Qjs7QUFFRDtFQUNJLGdDQUErQjtFQUMvQixnQ0FBK0IsRUFDbEMiLCJmaWxlIjoic3JjL2FwcC9wcm96LXByb2ZpbGUvcHJvei1zdWJzY3JpcHRpb24tY29uZmlybWF0aW9uL3Byb3otc3Vic2NyaXB0aW9uLWNvbmZpcm1hdGlvbi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5sb2dpbi1jb250YWluZXIge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgbWFyZ2luOiAzJSBhdXRvO1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4ubG9naW4tY29udGFpbmVyIC5sb2dpbmJveCB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XHJcbiAgICBwYWRkaW5nOiAwIDAgMHB4IDA7XHJcbiAgICAtd2Via2l0LWJveC1zaGFkb3c6IDAgMCAxNHB4IHJnYmEoMCwwLDAsLjEpO1xyXG4gICAgLW1vei1ib3gtc2hhZG93OiAwIDAgMTRweCByZ2JhKDAsMCwwLC4xKTtcclxuICAgIGJveC1zaGFkb3c6IDAgMCAxNHB4IHJnYmEoMCwwLDAsLjEpO1xyXG59XHJcblxyXG4ubG9naW4tY29udGFpbmVyIC5sb2dpbmJveCAubG9naW5ib3gtdGl0bGUge1xyXG4gICAgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LWZhbWlseTogJ0FyaWFsJywgJ0hlbHZldGljYScsICdzYW5zLXNlcmlmJyAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5cclxuLmxvZ2luLWNvbnRhaW5lciAubG9naW5ib3ggLmxvZ2luYm94LXNvY2lhbCAuc29jaWFsLWJ1dHRvbnMgLmJ1dHRvbi1mYWNlYm9vayB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkICMzYjU5OTg7XHJcbiAgICBjb2xvcjogIzNiNTk5ODtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIHdpZHRoOiA1MHB4O1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiA0MCU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG59XHJcblxyXG4ubG9naW4tY29udGFpbmVyIC5sb2dpbmJveCAubG9naW5ib3gtc29jaWFsIC5zb2NpYWwtYnV0dG9ucyAuYnV0dG9uLXR3aXR0ZXIge1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjMjljMWY2O1xyXG4gICAgY29sb3I6ICMyOWMxZjY7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICB3aWR0aDogNTBweDtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIG1hcmdpbi1yaWdodDogMzUlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxufVxyXG5cclxuLmxvZ2luLWNvbnRhaW5lciAubG9naW5ib3ggLmxvZ2luYm94LXNvY2lhbCAuc29jaWFsLWJ1dHRvbnMgLmJ1dHRvbi1nb29nbGUge1xyXG4gICAgZmxvYXQ6IHJpZ2h0O1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgI2VmNGYxZDtcclxuICAgIGNvbG9yOiAjZWY0ZjFkO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgd2lkdGg6IDUwcHg7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG59XHJcblxyXG5cclxuIC5sb2dpbmJveC1zb2NpYWwge1xyXG4gICAgcGFkZGluZzogMCAwIDAgMCAhaW1wb3J0YW50OyBcclxufVxyXG5cclxuLmxvZ2luYm94LXRpdGxle1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQgIWltcG9ydGFudDtcclxuICAgIGZvbnQtc2l6ZTogMjVweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5sYWJlbHtcclxuICAgIGZvbnQtd2VpZ2h0OmJvbGQgIWltcG9ydGFudDtcclxufVxyXG5cclxubGFiZWwgLm1hbmRhdG9yeXtcclxuICAgIGNvbG9yOnJlZDtcclxuICAgIGZvbnQtc2l6ZTogMTZweCAhaW1wb3J0YW50O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmhyLWJsdWUtdGl0bGV7ICAgIFxyXG4gICAgYm9yZGVyLXRvcDogM3B4IHNvbGlkICM1REIyRkYgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmhyLWJsdWV7ICAgIFxyXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM1REIyRkYgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmxvZ29JbWFnZXtcclxuICAgIHdpZHRoOjEwMHB4OyBcclxuICAgIGhlaWdodDoxMDBweDtcclxuICAgIG1hcmdpbi10b3A6NXB4OyBcclxuICAgIGJvcmRlci13aWR0aDogMXB4OyAgIFxyXG4gICAgYm9yZGVyLWNvbG9yOiAjNURCMkZGOyAgIFxyXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDsgXHJcbn1cclxuXHJcblxyXG4uYnRuIHtcclxuICAgIGZvbnQtc2l6ZTogMjBweCAhaW1wb3J0YW50O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQgIWltcG9ydGFudDtcclxuICAgIGZvbnQtZmFtaWx5OiAnQXJpYWwnLCAnSGVsdmV0aWNhJywgJ3NhbnMtc2VyaWYnICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5mb3JtLXRpdGxlIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgcGFkZGluZzogOHB4IDA7XHJcbiAgICBib3JkZXItYm90dG9tOiAxcHggZGFzaGVkICM1REIyRkY7XHJcbiAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGNvbG9yOiAjNURCMkZGO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDtcclxufVxyXG5cclxuLmdyZWVuLXRleHR7XHJcbiAgICBjb2xvcjogZ3JlZW47XHJcbiAgICBmb250LWZhbWlseTogJ0FyaWFsJywgJ0hlbHZldGljYScsICdzYW5zLXNlcmlmJyAhaW1wb3J0YW50O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyAgXHJcbiAgICBmb250LXNpemU6IDE2cHggIWltcG9ydGFudDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcblxyXG59XHJcblxyXG4uZ3JlZW4tdGV4dCBzcGFue1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcblxyXG50aHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXNpemU6IDE0cHggIWltcG9ydGFudDtcclxufVxyXG5cclxuZGl2IC5tb2RhbC1iYWNrZHJvcCAuZmFkZS5pbiB7XHJcbiAgICBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9MTAwKSAhaW1wb3J0YW50O1xyXG4gICAgb3BhY2l0eTogMSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ubW9kYWwtY29udGVudHtcclxuICAgIHdpZHRoOjQ1MHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5tb2RhbC1tZXNzYWdlIC5tb2RhbC1mb290ZXIge1xyXG4gICAgbWFyZ2luOiAtMjNweCAwIDIwcHggIWltcG9ydGFudDtcclxuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4ICFpbXBvcnRhbnQ7XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/proz-profile/proz-subscription-confirmation/proz-subscription-confirmation.component.ts":
/*!*********************************************************************************************************!*\
  !*** ./src/app/proz-profile/proz-subscription-confirmation/proz-subscription-confirmation.component.ts ***!
  \*********************************************************************************************************/
/*! exports provided: ProzSubscriptionConfirmationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProzSubscriptionConfirmationComponent", function() { return ProzSubscriptionConfirmationComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var _utilities_beyond__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utilities/beyond */ "./src/utilities/beyond.ts");
/* harmony import */ var _global_global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../global/global */ "./src/global/global.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm5/ngx-toastr.js");
/* harmony import */ var ngx_spinner__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ngx-spinner */ "./node_modules/ngx-spinner/fesm5/ngx-spinner.js");









var ProzSubscriptionConfirmationComponent = /** @class */ (function () {
    function ProzSubscriptionConfirmationComponent(beyond, router, formBuilder, activatedRoute, http, toastr, spinner) {
        this.beyond = beyond;
        this.router = router;
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.http = http;
        this.toastr = toastr;
        this.spinner = spinner;
        this.zipcodes = [];
        this.subCategoriesList = [];
        this.prozServiceAreaData = [];
        this.totalProzServiceAreaData = [];
        this.prozArrayExists = false;
        this.totalMonthlyStatus = false;
        this.totalQuarterlyStatus = false;
        this.totalYearlyStatus = false;
        this.countyStatus = false;
        this.showConfirmation = false;
        this.monthlyCat = '';
        this.quaterlyCat = '';
        this.yearlyCat = '';
        this.selected = {};
        this.countyList = [];
        this.serviceCostTotal = 0;
        this.counties = [];
        this.countyZipcode = [];
        this.countyCategory = [];
        this.countySubCategory = [];
        this.displayZipcodes = [];
        this.perLeadStatus = false;
        this.monthlyStatus = false;
        this.totalCostSubscription = 0;
    }
    ProzSubscriptionConfirmationComponent.prototype.ngOnInit = function () {
        this.spinner.show();
        // this.viewProzDetails(this.activatedRoute.snapshot.params['prozId'])
        // this.viewTotalProzServiceDetails(this.activatedRoute.snapshot.params['prozId'])
        // this.prozLocation(this.activatedRoute.snapshot.params['prozId'])
        // this.categoryProz(this.activatedRoute.snapshot.params['prozId'])
        this.getCountiesList(this.activatedRoute.snapshot.params['prozId']);
    };
    //VIEW TOTAL PROZ SERVICE
    ProzSubscriptionConfirmationComponent.prototype.viewTotalProzServiceDetails = function (prozCode) {
        var _this = this;
        this.totalMonthly = 0;
        this.totalQuarterly = 0;
        this.totalYearly = 0;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_5__["Global"].url + '/getProzServiceArea/' + prozCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.totalProzServiceAreaData = response.response;
                for (var i = 0; i < _this.totalProzServiceAreaData.length; i++) {
                    if (_this.totalProzServiceAreaData[i].paymentType == "Monthly") {
                        _this.totalMonthly = _this.totalMonthly + parseInt(_this.totalProzServiceAreaData[i].serviceCost);
                        _this.monthlyCat = _this.monthlyCat + _this.totalProzServiceAreaData[i].serviceOffered + ", ";
                        _this.totalMonthlyStatus = true;
                    }
                    else if (_this.totalProzServiceAreaData[i].paymentType == "Quarterly") {
                        _this.totalQuarterly = _this.totalQuarterly + parseInt(_this.totalProzServiceAreaData[i].serviceCost);
                        _this.quaterlyCat = _this.quaterlyCat + _this.totalProzServiceAreaData[i].serviceOffered + ", ";
                        _this.totalQuarterlyStatus = true;
                    }
                    else if (_this.totalProzServiceAreaData[i].paymentType == "Yearly") {
                        _this.totalYearly = _this.totalYearly + parseInt(_this.totalProzServiceAreaData[i].serviceCost);
                        _this.yearlyCat = _this.yearlyCat + _this.totalProzServiceAreaData[i].serviceOffered + ", ";
                        _this.totalYearlyStatus = true;
                    }
                    else if (parseInt(_this.totalProzServiceAreaData[i].serviceCost) == 0 && _this.totalProzServiceAreaData[i].paymentType == "Monthly") {
                        _this.totalMonthlyStatus = false;
                    }
                    else if (parseInt(_this.totalProzServiceAreaData[i].serviceCost) == 0 && _this.totalProzServiceAreaData[i].paymentType == "Quarterly") {
                        _this.totalQuarterlyStatus = false;
                    }
                    else if (parseInt(_this.totalProzServiceAreaData[i].serviceCost) == 0 && _this.totalProzServiceAreaData[i].paymentType == "Yearly") {
                        _this.totalYearlyStatus = false;
                    }
                }
                // this.prozArrayExists = true;
                return false;
            }
            else {
                // this.prozArrayExists = false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to Connect to server");
        });
    };
    //VIEW TOTAL PROZ SERVICE
    //VIEW PROZ SERVICE DETAILS
    ProzSubscriptionConfirmationComponent.prototype.viewProzDetails = function (prozCode) {
        var _this = this;
        this.totalServiceCost = 0;
        this.totalNumberOfHouses = 0;
        this.alternateHouseHolds = 0;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_5__["Global"].url + '/getProzServiceArea/' + prozCode, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozServiceAreaData = response.response;
                _this.countyList = response.response;
                for (var i = 0; i < _this.countyList.length; i++) {
                    _this.countyList[i].households = _this.countyList[i].totalHouseHolds;
                    _this.totalNumberOfHouses = _this.totalNumberOfHouses + parseInt(_this.countyList[i].totalHouseHolds);
                }
                _this.prozArrayExists = true;
                return false;
            }
            else {
                _this.prozArrayExists = false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to Connect to server");
        });
    };
    //VIEW PROZ SERVICE DETAILS
    //DELETE SERVICE AREA
    ProzSubscriptionConfirmationComponent.prototype.deleteServiceArea = function (prozData) {
        var _this = this;
        this.zipcodes = [];
        var prozDataObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            id: prozData.id
        };
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_5__["Global"].url + '/deleteProzProfileServiceAreas', prozDataObj, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.viewProzDetails(_this.activatedRoute.snapshot.params['prozId']);
                _this.prozLocation(_this.activatedRoute.snapshot.params['prozId']);
                return false;
            }
            else {
                _this.toastr.warning("Unable to delete specific record");
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //DELETE SERVICE AREA
    //DELETE CHANGE
    ProzSubscriptionConfirmationComponent.prototype.deleteChange = function (item) {
        this.batchServiceAreaDelete(item);
    };
    //DELETE CHANGE  
    //BATCH SERVICE AREA DELETE
    ProzSubscriptionConfirmationComponent.prototype.batchServiceAreaDelete = function (item) {
        var _this = this;
        this.zipcodes = [];
        var prozDataObj = {
            prozId: this.activatedRoute.snapshot.params['prozId'],
            zipcode: item.zipcode
        };
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["RequestOptions"]({ headers: headers });
        this.http.post(_global_global__WEBPACK_IMPORTED_MODULE_5__["Global"].url + '/batchServiceAreaDelete', prozDataObj, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozServiceAreaData = [];
                _this.viewProzDetails(_this.activatedRoute.snapshot.params['prozId']);
                _this.prozLocation(_this.activatedRoute.snapshot.params['prozId']);
                _this.viewTotalProzServiceDetails(_this.activatedRoute.snapshot.params['prozId']);
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //BATCH SERVICE AREA DELETE
    //FETCH PROZ LOCATION
    ProzSubscriptionConfirmationComponent.prototype.prozLocation = function (prozId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_5__["Global"].url + '/getProzLocation/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.prozLocationFetch = response.response;
                return false;
            }
            else {
                _this.toastr.warning("No Records Found");
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //FETCH PROZ LOCATION 
    //OPEN COLLAPSE
    ProzSubscriptionConfirmationComponent.prototype.openCollapse = function (item) {
        item.openCollapse = false;
        item.closeCollapse = true;
    };
    //OPEN COLLAPSE
    //CLOSE COLLAPSE
    ProzSubscriptionConfirmationComponent.prototype.closeCollapse = function (item) {
        item.openCollapse = true;
        item.closeCollapse = false;
    };
    //CLOSE COLLAPSE  
    ProzSubscriptionConfirmationComponent.prototype.payBtn = function () {
        this.router.navigate(['/prozProfile/prozProfileConfirmation', this.activatedRoute.snapshot.params['prozId']]);
    };
    ProzSubscriptionConfirmationComponent.prototype.cancelBtn = function () {
        //this.router.navigate(['/proz/prozProfileServiceAreas', this.activatedRoute.snapshot.params['prozId']])
    };
    ProzSubscriptionConfirmationComponent.prototype.backBtn = function () {
        this.router.navigate(['/prozProfile/prozProfileServiceAreas', this.activatedRoute.snapshot.params['prozId']]);
    };
    ProzSubscriptionConfirmationComponent.prototype.modalYes = function () {
        this.router.navigate(['/']);
    };
    //CATEGORIES PROZ
    ProzSubscriptionConfirmationComponent.prototype.categoryProz = function (prozId) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_5__["Global"].url + '/getProCategories/' + prozId, options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.subCategoriesList = response.response;
                for (var i = 0; i < _this.subCategoriesList.length; i++) {
                    _this.serviceCostTotal = _this.serviceCostTotal + parseInt(_this.subCategoriesList[i].serviceCost);
                }
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //CATEGORIES PROZ
    ProzSubscriptionConfirmationComponent.prototype.subcriptionYes = function () {
        this.router.navigate(['/prozProfile/prozSubscriptionConfirmation', this.activatedRoute.snapshot.params['prozId']]);
    };
    //GET COUNTIES LIST
    ProzSubscriptionConfirmationComponent.prototype.getCountiesList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_5__["Global"].url + '/getUniqueCounty/' + proCode, options)
            .subscribe(function (data) {
            var response = data.json();
            //console.log(response.response)
            if (response.status == 200) {
                _this.counties = response.response;
                _this.getCountiesCategoryList(proCode);
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES LIST
    //GET COUNTIES ZIPCODE LIST
    ProzSubscriptionConfirmationComponent.prototype.getCountiesZipcodeList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_5__["Global"].url + '/getCountiesZipcodeList/' + proCode, options)
            .subscribe(function (data) {
            var response = data.json();
            //console.log(response.response)
            if (response.status == 200) {
                _this.countyZipcode = response.response;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES ZIPCODE LIST
    //GET COUNTIES CATEGORY LIST
    ProzSubscriptionConfirmationComponent.prototype.getCountiesCategoryList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_5__["Global"].url + '/getCountiesCategoryList/' + proCode, options)
            .subscribe(function (data) {
            var response = data.json();
            //console.log(response.response)
            if (response.status == 200) {
                _this.countyCategory = response.response;
                _this.getCountiesSubCategoryList(proCode);
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES CATEGORY LIST
    //GET COUNTIES SUB CATEGORY LIST
    ProzSubscriptionConfirmationComponent.prototype.getCountiesSubCategoryList = function (proCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_5__["Global"].url + '/getCountiesSubCategoryList/' + proCode, options)
            .subscribe(function (data) {
            var response = data.json();
            //console.log(this.counties)
            //console.log(this.countyCategory[0].stateCode)
            //console.log(response.response)
            if (response.status == 200) {
                _this.countyStatus = true;
                _this.countySubCategory = response.response;
                for (var i = 0; i < _this.counties.length; i++) {
                    _this.counties[i].categories = [];
                    _this.counties[i].subcategories = [];
                    for (var j = 0; j < _this.countyCategory.length; j++) {
                        if (_this.counties[i].county === _this.countyCategory[j].county && _this.counties[i].stateCode == _this.countyCategory[j].stateCode) {
                            _this.counties[i].categories.push(_this.countyCategory[j]);
                        }
                    }
                    for (var k = 0; k < _this.countySubCategory.length; k++) {
                        if (_this.countySubCategory[k].subscriptionType === 'perLead') {
                            //console.log(this.countySubCategory[k])
                            _this.totalCostSubscription = _this.totalCostSubscription + parseInt(_this.countySubCategory[k].perLead);
                            _this.perLeadStatus = true;
                            _this.monthlyStatus = false;
                        }
                        if (_this.countySubCategory[k].subscriptionType === 'monthly') {
                            //console.log(this.countySubCategory[k])
                            _this.totalCostSubscription = _this.totalCostSubscription + parseInt(_this.countySubCategory[k].monthly);
                            _this.perLeadStatus = false;
                            _this.monthlyStatus = true;
                        }
                        if (_this.counties[i].county === _this.countySubCategory[k].county && _this.counties[i].stateCode == _this.countySubCategory[k].stateCode) {
                            _this.counties[i].subcategories.push(_this.countySubCategory[k]);
                        }
                    }
                    //console.log(this.totalCostSubscription)
                    localStorage.setItem('serviceCost', _this.totalCostSubscription);
                    if (i == _this.counties.length - 1) {
                        _this.showConfirmation = true;
                        _this.spinner.hide();
                    }
                }
                _this.countyList = _this.counties;
                //console.log(this.counties[i])
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    //GET COUNTIES SUB CATEGORY LIST
    //GET ZIPCODES FROM COUNTY
    ProzSubscriptionConfirmationComponent.prototype.getZipcodesFromCounty = function (data, stateCode) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["Headers"]();
        headers.append("Accept", 'application/json');
        headers.append('Content-Type', 'application/json');
        var options = new _angular_http__WEBPACK_IMPORTED_MODULE_3__["RequestOptions"]({ headers: headers });
        this.http.get(_global_global__WEBPACK_IMPORTED_MODULE_5__["Global"].url + '/getZipcodeFromCountyTable/' + data.county + '/' + stateCode + '/' + this.activatedRoute.snapshot.params['prozId'], options)
            .subscribe(function (data) {
            var response = data.json();
            if (response.status == 200) {
                _this.displayZipcodes = response.response;
                _this.displayZipcodes.forEach(function (e) {
                    e.proCode = _this.activatedRoute.snapshot.params['prozId'];
                    e.checked = true;
                });
                return false;
            }
        }, function (error) {
            _this.toastr.warning("Unable to connect to server");
        });
    };
    ProzSubscriptionConfirmationComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            providers: [_utilities_beyond__WEBPACK_IMPORTED_MODULE_4__["Beyond"]],
            selector: 'app-proz-subscription-confirmation',
            template: __webpack_require__(/*! ./proz-subscription-confirmation.component.html */ "./src/app/proz-profile/proz-subscription-confirmation/proz-subscription-confirmation.component.html"),
            styles: [__webpack_require__(/*! ./proz-subscription-confirmation.component.scss */ "./src/app/proz-profile/proz-subscription-confirmation/proz-subscription-confirmation.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_utilities_beyond__WEBPACK_IMPORTED_MODULE_4__["Beyond"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_http__WEBPACK_IMPORTED_MODULE_3__["Http"],
            ngx_toastr__WEBPACK_IMPORTED_MODULE_7__["ToastrService"],
            ngx_spinner__WEBPACK_IMPORTED_MODULE_8__["NgxSpinnerService"]])
    ], ProzSubscriptionConfirmationComponent);
    return ProzSubscriptionConfirmationComponent;
}());



/***/ }),

/***/ "./src/utilities/customValidators.ts":
/*!*******************************************!*\
  !*** ./src/utilities/customValidators.ts ***!
  \*******************************************/
/*! exports provided: CustomValidators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomValidators", function() { return CustomValidators; });
var CustomValidators = /** @class */ (function () {
    function CustomValidators() {
    }
    CustomValidators.hasError = function (errorCode, path) {
        var error = {
            'invalidMobileNumber': 'InvalidMobile Number',
            'invalidEmailAddress': 'invalidEmailAddress',
            'invalidAadhar': 'invalidAadhar',
            'invalidPan': 'invalidPan',
            'invalidIfscCode': 'invalidIfscCode',
            'invalidText': 'invalidText',
            'invalidField': 'InvalidMobile Field',
            'invalidHeight': 'InvalidHeight',
            'invalidWeight': 'InvalidWeight',
            'invalidZipCode': 'InvalidZipCode',
        };
    };
    CustomValidators.emailValidator = function (control) {
        if (control.value.match(/^[A-Za-z0-9._%+-]{2,}@[a-zA-Z0-9]{1,}([.]{1}[a-zA-Z0-9]{2,}|[.]{1}[a-zA-Z]{2,}[.]{1}[a-zA-Z]{2,})/)) {
            return null;
        }
        if (control.value === "") {
            return { 'invalidEmailAddress': false };
        }
        else {
            return { 'invalidEmailAddress': true };
        }
    };
    CustomValidators.mobileNumValidator = function (control) {
        if (control.value.match(/^[0-9]{3}-[0-9]{3}-[0-9]{4}$/)) {
            return null;
        }
        if (control.value === "") {
            return { 'invalidMobileNumber': false };
        }
        else {
            return { 'invalidMobileNumber': true };
        }
    };
    CustomValidators.aadharValidator = function (control) {
        if (control.value.match(/[0-9]{12}/)) {
            return null;
        }
        else if (control.value === "") {
            return { 'invalidAadhar': false };
        }
        else {
            console.log('The else');
            return { 'invalidAadhar': true };
        }
    };
    CustomValidators.panValidator = function (control) {
        if (control.value.match(/[A-Z]{5}[0-9]{4}[A-Z]{1}$/)) {
            return null;
        }
        else if (control.value === "") {
            return { 'invalidPan': false };
        }
        else {
            return { 'invalidPan': true };
        }
    };
    CustomValidators.ifscCodeValidator = function (control) {
        if (control.value.match(/^[A-Za-z]{4}0[A-Z0-9a-z]{6}$/)) {
            return null;
        }
        else if (control.value === "") {
            return { 'invalidIfscCode': false };
        }
        else {
            return { 'invalidIfscCode': true };
        }
    };
    CustomValidators.textValidator = function (control) {
        if (control.value.match(/^[a-zA-Z ]*$/)) {
            return null;
        }
        else if (control.value === "") {
            return { 'invalidText': false };
        }
        else {
            return { 'invalidText': true };
        }
    };
    CustomValidators.heightValidator = function (control) {
        if (control.value.match(/^([0-9]|[1-8][0-9]|9[0-9]|1[0-9]{2}|2[0-4][0-9]|250)$/)) {
            return null;
        }
        else if (control.value === "") {
            return { 'invalidHeight': false };
        }
        else {
            return { 'invalidHeight': true };
        }
    };
    CustomValidators.weightValidator = function (control) {
        if (control.value.match(/^([0-9]|[1-8][0-9]|9[0-9]|[1-4][0-9]{2}|500)$/)) {
            return null;
        }
        else if (control.value === "") {
            return { 'InvalidWeight': false };
        }
        else {
            console.log('The else');
            return { 'InvalidWeight': true };
        }
    };
    CustomValidators.zipCodeValidator = function (control) {
        if (control.value.match(/^\d{5}$/)) {
            return null;
        }
        else if (control.value === "") {
            return { 'InvalidZipCode': false };
        }
        else {
            console.log('The else');
            return { 'InvalidZipCode': true };
        }
    };
    return CustomValidators;
}());



/***/ }),

/***/ "./src/utilities/multipleselectservice.ts":
/*!************************************************!*\
  !*** ./src/utilities/multipleselectservice.ts ***!
  \************************************************/
/*! exports provided: multipleselectservice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multipleselectservice", function() { return multipleselectservice; });
var multipleselectservice = /** @class */ (function () {
    function multipleselectservice() {
    }
    multipleselectservice.prototype.Multipleselectservice = function () {
        $(document).ready(function () {
            var next = 0;
            $("#add-more").click(function (e) {
                e.preventDefault();
                var addto = "#field" + next;
                var addRemove = "#field" + (next);
                next = next + 1;
                var newIn = ' <div id="field' + next + '" name="field' + next + '"> <div class="row"> <div class="col-sm-6"><div class="form-group"> <label for="serviceareas">Service Areas <span class="mandatory">*</span></label>  <span class="input-icon icon-right"> <input type="text" class="form-control" id="serviceareas" placeholder="Enter Zip Code"  #search formControlName="serviceArea">  <i class="fa fa-map-marker"></i>  </span>  </div>   </div> <div class="col-sm-6">  <div class="form-group">     <label for="serviceradius">Service Radius (in Miles) <span class="mandatory">*</span></label>   <select class="form-control" id="serviceradius" name="status" data-bv-field="row-title" formControlName="serviceRadius">   <option value="">--Select Service Radius--</option> <option value="10">10</option>  <option value="25">25</option>   <option value="50">50</option> <option value="100">100</option>  <option value="150">150</option> <option value="200">200</option>    </select> </div>  </div></div>';
                var newInput = $(newIn);
                var removeBtn = '<button id="remove' + (next) + '" class="btn btn-danger remove-me" >Remove</button></div></div><div id="field">';
                var removeButton = $(removeBtn);
                $(addto).after(newInput);
                $(addRemove).after(removeButton);
                $("#field" + next).attr('data-source', $(addto).attr('data-source'));
                $("#count").val(next);
                $('.remove-me').click(function (e) {
                    e.preventDefault();
                    var fieldNum = this.id.charAt(this.id.length - 1);
                    var fieldID = "#field" + fieldNum;
                    $(this).remove();
                    $(fieldID).remove();
                });
            });
        });
    };
    return multipleselectservice;
}());



/***/ })

}]);
//# sourceMappingURL=proz-profile-proz-profile-module.js.map